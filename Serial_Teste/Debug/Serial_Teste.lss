
Serial_Teste.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080010c  0080010c  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005d8  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027cd  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004bf  00000000  00000000  00003275  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010f7  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c44  00000000  00000000  0000482c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000239d  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000171a  00000000  00000000  0000780d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d8  00000000  00000000  00008f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  9e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	4a 01       	movw	r8, r20
  ba:	5b 01       	movw	r10, r22
	uint8 reg1 = UCSR0A;
  bc:	90 91 c0 00 	lds	r25, 0x00C0
	uint8 reg2 = UCSR0B;
  c0:	90 91 c1 00 	lds	r25, 0x00C1
	uint8 reg3 = UCSR0C;
  c4:	90 91 c2 00 	lds	r25, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	e9 16       	cp	r14, r25
  cc:	21 f0       	breq	.+8      	; 0xd6 <usartConfig+0x30>
		switch(stopBits){
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	9e 15       	cp	r25, r14
  d2:	08 f4       	brcc	.+2      	; 0xd6 <usartConfig+0x30>
  d4:	7d c0       	rjmp	.+250    	; 0x1d0 <usartConfig+0x12a>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
  d6:	0f 3f       	cpi	r16, 0xFF	; 255
  d8:	19 f0       	breq	.+6      	; 0xe0 <usartConfig+0x3a>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
  da:	03 30       	cpi	r16, 0x03	; 3
  dc:	08 f0       	brcs	.+2      	; 0xe0 <usartConfig+0x3a>
  de:	7a c0       	rjmp	.+244    	; 0x1d4 <usartConfig+0x12e>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
  e0:	2f 3f       	cpi	r18, 0xFF	; 255
  e2:	19 f0       	breq	.+6      	; 0xea <usartConfig+0x44>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
  e4:	25 30       	cpi	r18, 0x05	; 5
  e6:	08 f0       	brcs	.+2      	; 0xea <usartConfig+0x44>
  e8:	77 c0       	rjmp	.+238    	; 0x1d8 <usartConfig+0x132>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	89 f4       	brne	.+34     	; 0x110 <usartConfig+0x6a>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
  ee:	80 91 c2 00 	lds	r24, 0x00C2
  f2:	82 95       	swap	r24
  f4:	86 95       	lsr	r24
  f6:	86 95       	lsr	r24
  f8:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
  fa:	21 f0       	breq	.+8      	; 0x104 <usartConfig+0x5e>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	09 f4       	brne	.+2      	; 0x102 <usartConfig+0x5c>
 100:	6f c0       	rjmp	.+222    	; 0x1e0 <usartConfig+0x13a>
 102:	05 c0       	rjmp	.+10     	; 0x10e <usartConfig+0x68>
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
 104:	80 91 c0 00 	lds	r24, 0x00C0
 108:	86 95       	lsr	r24
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	01 c0       	rjmp	.+2      	; 0x110 <usartConfig+0x6a>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	89 16       	cp	r8, r25
 114:	99 06       	cpc	r9, r25
 116:	a9 06       	cpc	r10, r25
 118:	b9 06       	cpc	r11, r25
 11a:	09 f4       	brne	.+2      	; 0x11e <usartConfig+0x78>
 11c:	5f c0       	rjmp	.+190    	; 0x1dc <usartConfig+0x136>
		switch(modeAux){
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	b9 f0       	breq	.+46     	; 0x150 <usartConfig+0xaa>
 122:	18 f0       	brcs	.+6      	; 0x12a <usartConfig+0x84>
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	39 f1       	breq	.+78     	; 0x176 <usartConfig+0xd0>
 128:	39 c0       	rjmp	.+114    	; 0x19c <usartConfig+0xf6>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
 12a:	60 e4       	ldi	r22, 0x40	; 64
 12c:	72 e4       	ldi	r23, 0x42	; 66
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	a5 01       	movw	r20, r10
 134:	94 01       	movw	r18, r8
 136:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodsi4>
 13a:	da 01       	movw	r26, r20
 13c:	c9 01       	movw	r24, r18
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	a1 09       	sbc	r26, r1
 142:	b1 09       	sbc	r27, r1
 144:	4c 01       	movw	r8, r24
 146:	5d 01       	movw	r10, r26
 148:	c1 2c       	mov	r12, r1
 14a:	d1 2c       	mov	r13, r1
 14c:	76 01       	movw	r14, r12
			break;
 14e:	2e c0       	rjmp	.+92     	; 0x1ac <usartConfig+0x106>
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
 150:	60 e8       	ldi	r22, 0x80	; 128
 152:	74 e8       	ldi	r23, 0x84	; 132
 154:	8e e1       	ldi	r24, 0x1E	; 30
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	a5 01       	movw	r20, r10
 15a:	94 01       	movw	r18, r8
 15c:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodsi4>
 160:	da 01       	movw	r26, r20
 162:	c9 01       	movw	r24, r18
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	4c 01       	movw	r8, r24
 16c:	5d 01       	movw	r10, r26
 16e:	c1 2c       	mov	r12, r1
 170:	d1 2c       	mov	r13, r1
 172:	76 01       	movw	r14, r12
			break;
 174:	1b c0       	rjmp	.+54     	; 0x1ac <usartConfig+0x106>
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	72 e1       	ldi	r23, 0x12	; 18
 17a:	8a e7       	ldi	r24, 0x7A	; 122
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a5 01       	movw	r20, r10
 180:	94 01       	movw	r18, r8
 182:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodsi4>
 186:	da 01       	movw	r26, r20
 188:	c9 01       	movw	r24, r18
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	a1 09       	sbc	r26, r1
 18e:	b1 09       	sbc	r27, r1
 190:	4c 01       	movw	r8, r24
 192:	5d 01       	movw	r10, r26
 194:	c1 2c       	mov	r12, r1
 196:	d1 2c       	mov	r13, r1
 198:	76 01       	movw	r14, r12
			break;
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <usartConfig+0x106>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
 19c:	81 2c       	mov	r8, r1
 19e:	91 2c       	mov	r9, r1
 1a0:	a1 2c       	mov	r10, r1
 1a2:	b1 2c       	mov	r11, r1
 1a4:	c1 2c       	mov	r12, r1
 1a6:	d1 2c       	mov	r13, r1
 1a8:	e1 2c       	mov	r14, r1
 1aa:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
 1ac:	28 2d       	mov	r18, r8
 1ae:	39 2d       	mov	r19, r9
 1b0:	4a 2d       	mov	r20, r10
 1b2:	5b 2d       	mov	r21, r11
 1b4:	6c 2d       	mov	r22, r12
 1b6:	7d 2d       	mov	r23, r13
 1b8:	8e 2d       	mov	r24, r14
 1ba:	9f 2d       	mov	r25, r15
 1bc:	08 e0       	ldi	r16, 0x08	; 8
 1be:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__lshrdi3>
 1c2:	2f 70       	andi	r18, 0x0F	; 15
 1c4:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
 1c8:	80 92 c4 00 	sts	0x00C4, r8
	}

	return RESULT_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <usartConfig+0x148>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <usartConfig+0x148>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
			case USART_PARITY_NONE:		break;
			case USART_PARITY_EVEN:		reg3 |= (0x02 << UPM00);	break;
			case USART_PARITY_ODD:		reg3 |= (0x03 << UPM00);	break;
			case USART_PARITY_MARK:		return RESULT_USART_PARITY_UNSUPORTED;	break;
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <usartConfig+0x148>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <usartConfig+0x148>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <usartConfig+0x148>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	88 16       	cp	r8, r24
 1e4:	98 06       	cpc	r9, r24
 1e6:	a8 06       	cpc	r10, r24
 1e8:	b8 06       	cpc	r11, r24
 1ea:	29 f6       	brne	.-118    	; 0x176 <usartConfig+0xd0>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
}
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	ef 90       	pop	r14
 1f4:	df 90       	pop	r13
 1f6:	cf 90       	pop	r12
 1f8:	bf 90       	pop	r11
 1fa:	af 90       	pop	r10
 1fc:	9f 90       	pop	r9
 1fe:	8f 90       	pop	r8
 200:	08 95       	ret

00000202 <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
 202:	e1 ec       	ldi	r30, 0xC1	; 193
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 61       	ori	r24, 0x10	; 16
 20a:	80 83       	st	Z, r24
	return RESULT_OK;
}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	88 60       	ori	r24, 0x08	; 8
 218:	80 83       	st	Z, r24
	return RESULT_OK;
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret

0000021e <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
 21e:	e1 ec       	ldi	r30, 0xC1	; 193
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 68       	ori	r24, 0x80	; 128
 226:	80 83       	st	Z, r24
	return RESULT_OK;
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
 22c:	80 91 c0 00 	lds	r24, 0x00C0
}
 230:	85 fb       	bst	r24, 5
 232:	88 27       	eor	r24, r24
 234:	80 f9       	bld	r24, 0
 236:	08 95       	ret

00000238 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
 23c:	0e 94 16 01 	call	0x22c	; 0x22c <usartIsBufferEmpty>
 240:	88 23       	and	r24, r24
 242:	e1 f3       	breq	.-8      	; 0x23c <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
 244:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
 254:	88 23       	and	r24, r24
 256:	ec f7       	brge	.-6      	; 0x252 <usartReceive+0x4>
		;	// Waits until last reception ends
	status = UCSR0A;
 258:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
 25c:	80 91 c6 00 	lds	r24, 0x00C6
}
 260:	08 95       	ret

00000262 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
 26e:	c0 91 3e 01 	lds	r28, 0x013E
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	88 27       	eor	r24, r24
 27c:	77 fd       	sbrc	r23, 7
 27e:	80 95       	com	r24
 280:	98 2f       	mov	r25, r24
 282:	22 e3       	ldi	r18, 0x32	; 50
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodsi4>
 28e:	00 91 40 01 	lds	r16, 0x0140
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	60 17       	cp	r22, r16
 29a:	71 07       	cpc	r23, r17
 29c:	82 07       	cpc	r24, r18
 29e:	93 07       	cpc	r25, r19
 2a0:	51 f0       	breq	.+20     	; 0x2b6 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
 2a2:	c4 5f       	subi	r28, 0xF4	; 244
 2a4:	de 4f       	sbci	r29, 0xFE	; 254
 2a6:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
 2a8:	60 93 3e 01 	sts	0x013E, r22
		usartReceiverBufferLength++;
 2ac:	80 91 3f 01 	lds	r24, 0x013F
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 3f 01 	sts	0x013F, r24
	}
	return;
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	08 95       	ret

000002c2 <main>:
#include <avr/io.h>
#include "globaldefines.h"
#include "ATmega328.h"

int main(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	2c 97       	sbiw	r28, 0x0c	; 12
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	//uint8 segundo, minuto, hora, dia, mes, ano
	int data[6] = {12, 23, 8, 10, 11, 2017};
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	e0 e0       	ldi	r30, 0x00	; 0
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	de 01       	movw	r26, r28
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	01 90       	ld	r0, Z+
 2e2:	0d 92       	st	X+, r0
 2e4:	8a 95       	dec	r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x1e>
	uint8 aux8 = 0;

	// USART configuration
	usartConfig(USART_MODE_ASYNCHRONOUS, USART_BAUD_9600, USART_DATA_BITS_8, USART_PARITY_NONE, USART_STOP_BIT_SINGLE);
 2e8:	e1 2c       	mov	r14, r1
 2ea:	00 e0       	ldi	r16, 0x00	; 0
 2ec:	23 e0       	ldi	r18, 0x03	; 3
 2ee:	40 e8       	ldi	r20, 0x80	; 128
 2f0:	55 e2       	ldi	r21, 0x25	; 37
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <usartConfig>
	usartEnableReceiver();
 2fc:	0e 94 01 01 	call	0x202	; 0x202 <usartEnableReceiver>
	usartEnableTransmitter();
 300:	0e 94 08 01 	call	0x210	; 0x210 <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
 304:	0e 94 0f 01 	call	0x21e	; 0x21e <usartActivateReceptionCompleteInterrupt>
	sei();
 308:	78 94       	sei
	while(1) {
		for(aux8 = 0; aux8  < 5; aux8++) {
 30a:	10 e0       	ldi	r17, 0x00	; 0
			usartTransmit(data[aux8]);
 30c:	e1 2f       	mov	r30, r17
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	8c 0f       	add	r24, r28
 31a:	9d 1f       	adc	r25, r29
 31c:	e8 0f       	add	r30, r24
 31e:	f9 1f       	adc	r31, r25
 320:	80 81       	ld	r24, Z
 322:	0e 94 1c 01 	call	0x238	; 0x238 <usartTransmit>
	usartEnableReceiver();
	usartEnableTransmitter();
	usartActivateReceptionCompleteInterrupt();
	sei();
	while(1) {
		for(aux8 = 0; aux8  < 5; aux8++) {
 326:	1f 5f       	subi	r17, 0xFF	; 255
 328:	15 30       	cpi	r17, 0x05	; 5
 32a:	80 f3       	brcs	.-32     	; 0x30c <main+0x4a>
 32c:	10 2f       	mov	r17, r16
 32e:	ee cf       	rjmp	.-36     	; 0x30c <main+0x4a>

00000330 <__vector_18>:
			usartTransmit(data[aux8]);
		}
	}
}

 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
 352:	0e 94 27 01 	call	0x24e	; 0x24e <usartReceive>
 356:	0e 94 31 01 	call	0x262	; 0x262 <usartAddDataToReceiverBuffer>
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__udivmodsi4>:
 37c:	a1 e2       	ldi	r26, 0x21	; 33
 37e:	1a 2e       	mov	r1, r26
 380:	aa 1b       	sub	r26, r26
 382:	bb 1b       	sub	r27, r27
 384:	fd 01       	movw	r30, r26
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <__udivmodsi4_ep>

00000388 <__udivmodsi4_loop>:
 388:	aa 1f       	adc	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	ee 1f       	adc	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	a2 17       	cp	r26, r18
 392:	b3 07       	cpc	r27, r19
 394:	e4 07       	cpc	r30, r20
 396:	f5 07       	cpc	r31, r21
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__udivmodsi4_ep>
 39a:	a2 1b       	sub	r26, r18
 39c:	b3 0b       	sbc	r27, r19
 39e:	e4 0b       	sbc	r30, r20
 3a0:	f5 0b       	sbc	r31, r21

000003a2 <__udivmodsi4_ep>:
 3a2:	66 1f       	adc	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	88 1f       	adc	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	1a 94       	dec	r1
 3ac:	69 f7       	brne	.-38     	; 0x388 <__udivmodsi4_loop>
 3ae:	60 95       	com	r22
 3b0:	70 95       	com	r23
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	9b 01       	movw	r18, r22
 3b8:	ac 01       	movw	r20, r24
 3ba:	bd 01       	movw	r22, r26
 3bc:	cf 01       	movw	r24, r30
 3be:	08 95       	ret

000003c0 <__ashrdi3>:
 3c0:	97 fb       	bst	r25, 7
 3c2:	10 f8       	bld	r1, 0

000003c4 <__lshrdi3>:
 3c4:	16 94       	lsr	r1
 3c6:	00 08       	sbc	r0, r0
 3c8:	0f 93       	push	r16
 3ca:	08 30       	cpi	r16, 0x08	; 8
 3cc:	98 f0       	brcs	.+38     	; 0x3f4 <__lshrdi3+0x30>
 3ce:	08 50       	subi	r16, 0x08	; 8
 3d0:	23 2f       	mov	r18, r19
 3d2:	34 2f       	mov	r19, r20
 3d4:	45 2f       	mov	r20, r21
 3d6:	56 2f       	mov	r21, r22
 3d8:	67 2f       	mov	r22, r23
 3da:	78 2f       	mov	r23, r24
 3dc:	89 2f       	mov	r24, r25
 3de:	90 2d       	mov	r25, r0
 3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <__lshrdi3+0x6>
 3e2:	05 94       	asr	r0
 3e4:	97 95       	ror	r25
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	57 95       	ror	r21
 3ee:	47 95       	ror	r20
 3f0:	37 95       	ror	r19
 3f2:	27 95       	ror	r18
 3f4:	0a 95       	dec	r16
 3f6:	aa f7       	brpl	.-22     	; 0x3e2 <__lshrdi3+0x1e>
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
