
UsartBufferExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000640  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000038  00800100  00800100  000006b4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000005d8  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002bdd  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000544  00000000  00000000  00003899  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011c3  00000000  00000000  00003ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000c44  00000000  00000000  00004fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000241c  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001830  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d8  00000000  00000000  00009830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	b9 00       	.word	0x00b9	; ????
  6a:	bb 00       	.word	0x00bb	; ????
  6c:	bd 00       	.word	0x00bd	; ????
  6e:	bf 00       	.word	0x00bf	; ????
  70:	c1 00       	.word	0x00c1	; ????
  72:	c3 00       	.word	0x00c3	; ????
  74:	c5 00       	.word	0x00c5	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e0 e4       	ldi	r30, 0x40	; 64
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 33       	cpi	r26, 0x38	; 56
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  ac:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
  b4:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
  b8:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
  bc:	6f 3f       	cpi	r22, 0xFF	; 255
  be:	11 f0       	breq	.+4      	; 0xc4 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
  c0:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
  c2:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
  c4:	8f 3f       	cpi	r24, 0xFF	; 255
  c6:	69 f0       	breq	.+26     	; 0xe2 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
  c8:	83 ff       	sbrs	r24, 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <timer1Config+0x1c>
			setBit(reg2, WGM13);
  cc:	90 61       	ori	r25, 0x10	; 16
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
  d0:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
  d2:	82 ff       	sbrs	r24, 2
  d4:	02 c0       	rjmp	.+4      	; 0xda <timer1Config+0x26>
			setBit(reg2, WGM12);
  d6:	98 60       	ori	r25, 0x08	; 8
  d8:	01 c0       	rjmp	.+2      	; 0xdc <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
  da:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
  dc:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
  de:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
  e0:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
  e2:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
  e6:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
  ee:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret

000000f4 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  f4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  f6:	f8 94       	cli
		OCR1A = value;
  f8:	90 93 89 00 	sts	0x0089, r25
  fc:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 100:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret

00000106 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 106:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 108:	f8 94       	cli
		OCR1B = value;
 10a:	90 93 8b 00 	sts	0x008B, r25
 10e:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 112:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
 118:	6f 3f       	cpi	r22, 0xFF	; 255
 11a:	51 f0       	breq	.+20     	; 0x130 <adcConfig+0x18>
		reg = ADMUX;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
 122:	20 e4       	ldi	r18, 0x40	; 64
 124:	62 9f       	mul	r22, r18
 126:	b0 01       	movw	r22, r0
 128:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
 12a:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
 12c:	69 2b       	or	r22, r25
		ADMUX = reg;
 12e:	60 83       	st	Z, r22
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
 130:	4f 3f       	cpi	r20, 0xFF	; 255
 132:	31 f0       	breq	.+12     	; 0x140 <adcConfig+0x28>
		reg = ADCSRA;
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 81       	ld	r25, Z
		reg &= ~(0x07 << ADPS0);
 13a:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
 13c:	49 2b       	or	r20, r25
		ADCSRA = reg;
 13e:	40 83       	st	Z, r20
	}

	if(mode != ADC_MODE_NO_CHANGE){
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	69 f1       	breq	.+90     	; 0x19e <adcConfig+0x86>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
 144:	81 11       	cpse	r24, r1
 146:	07 c0       	rjmp	.+14     	; 0x156 <adcConfig+0x3e>
			clrBit(ADCSRA, ADATE);
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8f 7d       	andi	r24, 0xDF	; 223
 150:	80 83       	st	Z, r24
			ADCSRB = reg;
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

	if(mode != ADC_MODE_NO_CHANGE){
		if(mode == ADC_MODE_SINGLE_CONVERSION)
			clrBit(ADCSRA, ADATE);
		else{
			reg = ADCSRB;
 156:	90 91 7b 00 	lds	r25, 0x007B
			reg &= ~(0x07 << ADTS0);
 15a:	29 2f       	mov	r18, r25
 15c:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	32 97       	sbiw	r30, 0x02	; 2
 164:	e7 30       	cpi	r30, 0x07	; 7
 166:	f1 05       	cpc	r31, r1
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <adcConfig+0x8a>
 16a:	ec 5c       	subi	r30, 0xCC	; 204
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
 172:	21 60       	ori	r18, 0x01	; 1
 174:	0b c0       	rjmp	.+22     	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
 176:	22 60       	ori	r18, 0x02	; 2
 178:	09 c0       	rjmp	.+18     	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
 17a:	23 60       	ori	r18, 0x03	; 3
 17c:	07 c0       	rjmp	.+14     	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
 17e:	24 60       	ori	r18, 0x04	; 4
 180:	05 c0       	rjmp	.+10     	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
 182:	25 60       	ori	r18, 0x05	; 5
 184:	03 c0       	rjmp	.+6      	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
 186:	26 60       	ori	r18, 0x06	; 6
 188:	01 c0       	rjmp	.+2      	; 0x18c <adcConfig+0x74>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
 18a:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
 18c:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
 190:	ea e7       	ldi	r30, 0x7A	; 122
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 62       	ori	r24, 0x20	; 32
 198:	80 83       	st	Z, r24
		}
	}

	return RESULT_OK;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
 1a2:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
 1a4:	08 95       	ret

000001a6 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	80 83       	st	Z, r24

	return RESULT_OK;
}
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
 1b4:	ea e7       	ldi	r30, 0x7A	; 122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	80 83       	st	Z, r24

	return RESULT_OK;
}
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	80 83       	st	Z, r24

	return RESULT_OK;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
 1d0:	8f 92       	push	r8
 1d2:	9f 92       	push	r9
 1d4:	af 92       	push	r10
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	4a 01       	movw	r8, r20
 1e4:	5b 01       	movw	r10, r22
	uint8 reg1 = UCSR0A;
 1e6:	90 91 c0 00 	lds	r25, 0x00C0
	uint8 reg2 = UCSR0B;
 1ea:	90 91 c1 00 	lds	r25, 0x00C1
	uint8 reg3 = UCSR0C;
 1ee:	90 91 c2 00 	lds	r25, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
 1f4:	e9 16       	cp	r14, r25
 1f6:	21 f0       	breq	.+8      	; 0x200 <usartConfig+0x30>
		switch(stopBits){
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9e 15       	cp	r25, r14
 1fc:	08 f4       	brcc	.+2      	; 0x200 <usartConfig+0x30>
 1fe:	7d c0       	rjmp	.+250    	; 0x2fa <usartConfig+0x12a>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
 200:	0f 3f       	cpi	r16, 0xFF	; 255
 202:	19 f0       	breq	.+6      	; 0x20a <usartConfig+0x3a>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
 204:	03 30       	cpi	r16, 0x03	; 3
 206:	08 f0       	brcs	.+2      	; 0x20a <usartConfig+0x3a>
 208:	7a c0       	rjmp	.+244    	; 0x2fe <usartConfig+0x12e>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
 20a:	2f 3f       	cpi	r18, 0xFF	; 255
 20c:	19 f0       	breq	.+6      	; 0x214 <usartConfig+0x44>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
 20e:	25 30       	cpi	r18, 0x05	; 5
 210:	08 f0       	brcs	.+2      	; 0x214 <usartConfig+0x44>
 212:	77 c0       	rjmp	.+238    	; 0x302 <usartConfig+0x132>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
 214:	8f 3f       	cpi	r24, 0xFF	; 255
 216:	89 f4       	brne	.+34     	; 0x23a <usartConfig+0x6a>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
 218:	80 91 c2 00 	lds	r24, 0x00C2
 21c:	82 95       	swap	r24
 21e:	86 95       	lsr	r24
 220:	86 95       	lsr	r24
 222:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
 224:	21 f0       	breq	.+8      	; 0x22e <usartConfig+0x5e>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	09 f4       	brne	.+2      	; 0x22c <usartConfig+0x5c>
 22a:	6f c0       	rjmp	.+222    	; 0x30a <usartConfig+0x13a>
 22c:	05 c0       	rjmp	.+10     	; 0x238 <usartConfig+0x68>
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
 22e:	80 91 c0 00 	lds	r24, 0x00C0
 232:	86 95       	lsr	r24
 234:	81 70       	andi	r24, 0x01	; 1
 236:	01 c0       	rjmp	.+2      	; 0x23a <usartConfig+0x6a>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
 23a:	9f ef       	ldi	r25, 0xFF	; 255
 23c:	89 16       	cp	r8, r25
 23e:	99 06       	cpc	r9, r25
 240:	a9 06       	cpc	r10, r25
 242:	b9 06       	cpc	r11, r25
 244:	09 f4       	brne	.+2      	; 0x248 <usartConfig+0x78>
 246:	5f c0       	rjmp	.+190    	; 0x306 <usartConfig+0x136>
		switch(modeAux){
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	b9 f0       	breq	.+46     	; 0x27a <usartConfig+0xaa>
 24c:	18 f0       	brcs	.+6      	; 0x254 <usartConfig+0x84>
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	39 f1       	breq	.+78     	; 0x2a0 <usartConfig+0xd0>
 252:	39 c0       	rjmp	.+114    	; 0x2c6 <usartConfig+0xf6>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
 254:	60 e4       	ldi	r22, 0x40	; 64
 256:	72 e4       	ldi	r23, 0x42	; 66
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a5 01       	movw	r20, r10
 25e:	94 01       	movw	r18, r8
 260:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 264:	da 01       	movw	r26, r20
 266:	c9 01       	movw	r24, r18
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	a1 09       	sbc	r26, r1
 26c:	b1 09       	sbc	r27, r1
 26e:	4c 01       	movw	r8, r24
 270:	5d 01       	movw	r10, r26
 272:	c1 2c       	mov	r12, r1
 274:	d1 2c       	mov	r13, r1
 276:	76 01       	movw	r14, r12
			break;
 278:	2e c0       	rjmp	.+92     	; 0x2d6 <usartConfig+0x106>
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
 27a:	60 e8       	ldi	r22, 0x80	; 128
 27c:	74 e8       	ldi	r23, 0x84	; 132
 27e:	8e e1       	ldi	r24, 0x1E	; 30
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	a5 01       	movw	r20, r10
 284:	94 01       	movw	r18, r8
 286:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 28a:	da 01       	movw	r26, r20
 28c:	c9 01       	movw	r24, r18
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	a1 09       	sbc	r26, r1
 292:	b1 09       	sbc	r27, r1
 294:	4c 01       	movw	r8, r24
 296:	5d 01       	movw	r10, r26
 298:	c1 2c       	mov	r12, r1
 29a:	d1 2c       	mov	r13, r1
 29c:	76 01       	movw	r14, r12
			break;
 29e:	1b c0       	rjmp	.+54     	; 0x2d6 <usartConfig+0x106>
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	72 e1       	ldi	r23, 0x12	; 18
 2a4:	8a e7       	ldi	r24, 0x7A	; 122
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	a5 01       	movw	r20, r10
 2aa:	94 01       	movw	r18, r8
 2ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 2b0:	da 01       	movw	r26, r20
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	a1 09       	sbc	r26, r1
 2b8:	b1 09       	sbc	r27, r1
 2ba:	4c 01       	movw	r8, r24
 2bc:	5d 01       	movw	r10, r26
 2be:	c1 2c       	mov	r12, r1
 2c0:	d1 2c       	mov	r13, r1
 2c2:	76 01       	movw	r14, r12
			break;
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <usartConfig+0x106>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
 2c6:	81 2c       	mov	r8, r1
 2c8:	91 2c       	mov	r9, r1
 2ca:	a1 2c       	mov	r10, r1
 2cc:	b1 2c       	mov	r11, r1
 2ce:	c1 2c       	mov	r12, r1
 2d0:	d1 2c       	mov	r13, r1
 2d2:	e1 2c       	mov	r14, r1
 2d4:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
 2d6:	28 2d       	mov	r18, r8
 2d8:	39 2d       	mov	r19, r9
 2da:	4a 2d       	mov	r20, r10
 2dc:	5b 2d       	mov	r21, r11
 2de:	6c 2d       	mov	r22, r12
 2e0:	7d 2d       	mov	r23, r13
 2e2:	8e 2d       	mov	r24, r14
 2e4:	9f 2d       	mov	r25, r15
 2e6:	08 e0       	ldi	r16, 0x08	; 8
 2e8:	0e 94 02 03 	call	0x604	; 0x604 <__lshrdi3>
 2ec:	2f 70       	andi	r18, 0x0F	; 15
 2ee:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
 2f2:	80 92 c4 00 	sts	0x00C4, r8
	}

	return RESULT_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <usartConfig+0x148>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <usartConfig+0x148>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
			case USART_PARITY_NONE:		break;
			case USART_PARITY_EVEN:		reg3 |= (0x02 << UPM00);	break;
			case USART_PARITY_ODD:		reg3 |= (0x03 << UPM00);	break;
			case USART_PARITY_MARK:		return RESULT_USART_PARITY_UNSUPORTED;	break;
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	0b c0       	rjmp	.+22     	; 0x318 <usartConfig+0x148>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	09 c0       	rjmp	.+18     	; 0x318 <usartConfig+0x148>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	07 c0       	rjmp	.+14     	; 0x318 <usartConfig+0x148>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	88 16       	cp	r8, r24
 30e:	98 06       	cpc	r9, r24
 310:	a8 06       	cpc	r10, r24
 312:	b8 06       	cpc	r11, r24
 314:	29 f6       	brne	.-118    	; 0x2a0 <usartConfig+0xd0>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
 316:	80 e0       	ldi	r24, 0x00	; 0
}
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	9f 90       	pop	r9
 328:	8f 90       	pop	r8
 32a:	08 95       	ret

0000032c <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
 32c:	e1 ec       	ldi	r30, 0xC1	; 193
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	80 61       	ori	r24, 0x10	; 16
 334:	80 83       	st	Z, r24
	return RESULT_OK;
}
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret

0000033a <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
 33a:	e1 ec       	ldi	r30, 0xC1	; 193
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	80 83       	st	Z, r24
	return RESULT_OK;
}
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret

00000348 <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24
	return RESULT_OK;
}
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
 356:	80 91 c0 00 	lds	r24, 0x00C0
}
 35a:	85 fb       	bst	r24, 5
 35c:	88 27       	eor	r24, r24
 35e:	80 f9       	bld	r24, 0
 360:	08 95       	ret

00000362 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
 362:	cf 93       	push	r28
 364:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
 366:	0e 94 ab 01 	call	0x356	; 0x356 <usartIsBufferEmpty>
 36a:	88 23       	and	r24, r24
 36c:	e1 f3       	breq	.-8      	; 0x366 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
 36e:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
 378:	e0 ec       	ldi	r30, 0xC0	; 192
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
 37e:	88 23       	and	r24, r24
 380:	ec f7       	brge	.-6      	; 0x37c <usartReceive+0x4>
		;	// Waits until last reception ends
	status = UCSR0A;
 382:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
 386:	80 91 c6 00 	lds	r24, 0x00C6
}
 38a:	08 95       	ret

0000038c <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
 398:	c0 91 32 01 	lds	r28, 0x0132
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	be 01       	movw	r22, r28
 3a0:	6f 5f       	subi	r22, 0xFF	; 255
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	88 27       	eor	r24, r24
 3a6:	77 fd       	sbrc	r23, 7
 3a8:	80 95       	com	r24
 3aa:	98 2f       	mov	r25, r24
 3ac:	22 e3       	ldi	r18, 0x32	; 50
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 3b8:	00 91 34 01 	lds	r16, 0x0134
 3bc:	10 e0       	ldi	r17, 0x00	; 0
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	60 17       	cp	r22, r16
 3c4:	71 07       	cpc	r23, r17
 3c6:	82 07       	cpc	r24, r18
 3c8:	93 07       	cpc	r25, r19
 3ca:	51 f0       	breq	.+20     	; 0x3e0 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
 3cc:	c0 50       	subi	r28, 0x00	; 0
 3ce:	df 4f       	sbci	r29, 0xFF	; 255
 3d0:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
 3d2:	60 93 32 01 	sts	0x0132, r22
		usartReceiverBufferLength++;
 3d6:	80 91 33 01 	lds	r24, 0x0133
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	80 93 33 01 	sts	0x0133, r24
	}
	return;
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	08 95       	ret

000003ec <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
 3f0:	20 91 34 01 	lds	r18, 0x0134
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	e0 50       	subi	r30, 0x00	; 0
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
 3fe:	c0 91 33 01 	lds	r28, 0x0133
 402:	cc 23       	and	r28, r28
 404:	91 f0       	breq	.+36     	; 0x42a <usartGetDataFromReceiverBuffer+0x3e>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
 406:	b9 01       	movw	r22, r18
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	88 27       	eor	r24, r24
 40e:	77 fd       	sbrc	r23, 7
 410:	80 95       	com	r24
 412:	98 2f       	mov	r25, r24
 414:	22 e3       	ldi	r18, 0x32	; 50
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 420:	60 93 34 01 	sts	0x0134, r22
		usartReceiverBufferLength--;
 424:	c1 50       	subi	r28, 0x01	; 1
 426:	c0 93 33 01 	sts	0x0133, r28
	}
	return data;
}
 42a:	8d 2f       	mov	r24, r29
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 91 33 01 	lds	r25, 0x0133
 438:	91 11       	cpse	r25, r1
 43a:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
 43c:	08 95       	ret

0000043e <main>:

// -----------------------------------------------------------------------------
// Main function ---------------------------------------------------------------

int main(void)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <main+0x6>
 444:	00 d0       	rcall	.+0      	; 0x446 <main+0x8>
 446:	1f 92       	push	r1
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	uint8 frameSize = 0;
	uint8 checkSum = 0xFF;


	// Variable initialization
	systemFlags.allFlags = 0;
 44c:	10 92 35 01 	sts	0x0135, r1

	//Buttom Config
	setBit(PORTB, PB0);
 450:	28 9a       	sbi	0x05, 0	; 5


	// USART configuration
	usartConfig(USART_MODE_ASYNCHRONOUS, USART_BAUD_9600, USART_DATA_BITS_8, USART_PARITY_NONE, USART_STOP_BIT_SINGLE);
 452:	e1 2c       	mov	r14, r1
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	23 e0       	ldi	r18, 0x03	; 3
 458:	40 e8       	ldi	r20, 0x80	; 128
 45a:	55 e2       	ldi	r21, 0x25	; 37
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usartConfig>
	usartEnableReceiver();
 466:	0e 94 96 01 	call	0x32c	; 0x32c <usartEnableReceiver>
	usartEnableTransmitter();
 46a:	0e 94 9d 01 	call	0x33a	; 0x33a <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
 46e:	0e 94 a4 01 	call	0x348	; 0x348 <usartActivateReceptionCompleteInterrupt>

	// TIMER1 configuration
	timer1SetCompareAValue(1561);
 472:	89 e1       	ldi	r24, 0x19	; 25
 474:	96 e0       	ldi	r25, 0x06	; 6
 476:	0e 94 7a 00 	call	0xf4	; 0xf4 <timer1SetCompareAValue>
	timer1SetCompareBValue(1561);
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	96 e0       	ldi	r25, 0x06	; 6
 47e:	0e 94 83 00 	call	0x106	; 0x106 <timer1SetCompareBValue>
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_1024);
 482:	65 e0       	ldi	r22, 0x05	; 5
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	0e 94 5a 00 	call	0xb4	; 0xb4 <timer1Config>

	// ADC confoguration
	adcConfig(ADC_MODE_AUTO_TIMER1_COMPB, ADC_REFERENCE_POWER_SUPPLY, ADC_PRESCALER_128);
 48a:	47 e0       	ldi	r20, 0x07	; 7
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	86 e0       	ldi	r24, 0x06	; 6
 490:	0e 94 8c 00 	call	0x118	; 0x118 <adcConfig>
	adcEnable();
 494:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <adcEnable>
	adcClearInterruptRequest();
 498:	0e 94 da 00 	call	0x1b4	; 0x1b4 <adcClearInterruptRequest>
	adcActivateInterrupt();
 49c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <adcActivateInterrupt>
	timer1ClearCompareAInterruptRequest();
 4a0:	0e 94 77 00 	call	0xee	; 0xee <timer1ClearCompareAInterruptRequest>

	// Enable Global Interrupts
	sei();
 4a4:	78 94       	sei
	uint8 aux8 = 0;
	uint8 frameData[5];
	uint8 frameIndex = 0;
	uint8 frameStatus = 0;
	uint8 frameSize = 0;
	uint8 checkSum = 0xFF;
 4a6:	cc 24       	eor	r12, r12
 4a8:	ca 94       	dec	r12
	// Variable declaration
	uint8 aux8 = 0;
	uint8 frameData[5];
	uint8 frameIndex = 0;
	uint8 frameStatus = 0;
	uint8 frameSize = 0;
 4aa:	91 2c       	mov	r9, r1
{
	// Variable declaration
	uint8 aux8 = 0;
	uint8 frameData[5];
	uint8 frameIndex = 0;
	uint8 frameStatus = 0;
 4ac:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	// Variable declaration
	uint8 aux8 = 0;
	uint8 frameData[5];
	uint8 frameIndex = 0;
 4ae:	d1 2c       	mov	r13, r1
					}
					break;
				case 1: //Number of Data Bytes
					frameSize = aux8;
					checkSum = 0xFF;
					frameIndex = 0;
 4b0:	41 2c       	mov	r4, r1
					frameStatus++;
					break;
				case 2: //Data Bytes
					frameData[frameIndex++] = aux8;
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	7c 01       	movw	r14, r24
				}
				usartTransmit(usartGetDataFromReceiverBuffer());
			}
			//Transmit Data
			if(frameStatus == 0xFF) {
				for(aux8 = 0; aux8  < frameSize; aux8++) {
 4b8:	28 2e       	mov	r2, r24
 4ba:	3f 2c       	mov	r3, r15
						frameStatus++;
					}
					break;
				case 1: //Number of Data Bytes
					frameSize = aux8;
					checkSum = 0xFF;
 4bc:	66 24       	eor	r6, r6
 4be:	6a 94       	dec	r6
					frameIndex = 0;
					frameStatus++;
 4c0:	68 94       	set
 4c2:	77 24       	eor	r7, r7
 4c4:	71 f8       	bld	r7, 1
					}
					break;
				case 1: //Number of Data Bytes
					frameSize = aux8;
					checkSum = 0xFF;
					frameIndex = 0;
 4c6:	a4 2c       	mov	r10, r4
		if(isBitClr(PINB, PB0)) {
			while(!usartIsReceiverBufferEmpty() && (frameStatus != 0xFF)) {
				aux8 = usartGetDataFromReceiverBuffer();
				switch(frameStatus) {
				case 0: //Start Delimiter (0x7e)
					if(aux8 == 0x7E) {
 4c8:	88 24       	eor	r8, r8
 4ca:	83 94       	inc	r8
					break;
				case 2: //Data Bytes
					frameData[frameIndex++] = aux8;
					checkSum -= aux8;
					if(frameIndex == frameSize) {
						frameStatus++;
 4cc:	0f 2e       	mov	r0, r31
 4ce:	f3 e0       	ldi	r31, 0x03	; 3
 4d0:	5f 2e       	mov	r5, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <main+0x9a>
			}
			//Transmit Data
			if(frameStatus == 0xFF) {
				for(aux8 = 0; aux8  < frameSize; aux8++) {
					usartTransmit(frameData[aux8]);
					frameStatus = 0;
 4d6:	14 2d       	mov	r17, r4

	// Enable Global Interrupts
	sei();

	while(1) {
		if(isBitClr(PINB, PB0)) {
 4d8:	18 99       	sbic	0x03, 0	; 3
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <main+0x9a>
 4dc:	2a c0       	rjmp	.+84     	; 0x532 <main+0xf4>
			while(!usartIsReceiverBufferEmpty() && (frameStatus != 0xFF)) {
				aux8 = usartGetDataFromReceiverBuffer();
 4de:	0e 94 f6 01 	call	0x3ec	; 0x3ec <usartGetDataFromReceiverBuffer>
				switch(frameStatus) {
 4e2:	11 30       	cpi	r17, 0x01	; 1
 4e4:	d9 f0       	breq	.+54     	; 0x51c <main+0xde>
 4e6:	28 f0       	brcs	.+10     	; 0x4f2 <main+0xb4>
 4e8:	12 30       	cpi	r17, 0x02	; 2
 4ea:	41 f0       	breq	.+16     	; 0x4fc <main+0xbe>
 4ec:	13 30       	cpi	r17, 0x03	; 3
 4ee:	89 f0       	breq	.+34     	; 0x512 <main+0xd4>
 4f0:	1c c0       	rjmp	.+56     	; 0x52a <main+0xec>
				case 0: //Start Delimiter (0x7e)
					if(aux8 == 0x7E) {
 4f2:	18 2d       	mov	r17, r8
 4f4:	8e 37       	cpi	r24, 0x7E	; 126
 4f6:	c9 f0       	breq	.+50     	; 0x52a <main+0xec>
 4f8:	1a 2d       	mov	r17, r10
 4fa:	17 c0       	rjmp	.+46     	; 0x52a <main+0xec>
					checkSum = 0xFF;
					frameIndex = 0;
					frameStatus++;
					break;
				case 2: //Data Bytes
					frameData[frameIndex++] = aux8;
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	9d 0d       	add	r25, r13
 500:	f7 01       	movw	r30, r14
 502:	ed 0d       	add	r30, r13
 504:	f1 1d       	adc	r31, r1
 506:	80 83       	st	Z, r24
					checkSum -= aux8;
 508:	c8 1a       	sub	r12, r24
					if(frameIndex == frameSize) {
 50a:	99 15       	cp	r25, r9
 50c:	61 f0       	breq	.+24     	; 0x526 <main+0xe8>
					checkSum = 0xFF;
					frameIndex = 0;
					frameStatus++;
					break;
				case 2: //Data Bytes
					frameData[frameIndex++] = aux8;
 50e:	d9 2e       	mov	r13, r25
 510:	0c c0       	rjmp	.+24     	; 0x52a <main+0xec>
					if(frameIndex == frameSize) {
						frameStatus++;
					}
					break;
				case 3: //Verify checksum
					if(checkSum == aux8) {
 512:	18 2d       	mov	r17, r8
 514:	c8 12       	cpse	r12, r24
 516:	1a 2d       	mov	r17, r10
 518:	11 95       	neg	r17
 51a:	07 c0       	rjmp	.+14     	; 0x52a <main+0xec>
					if(aux8 == 0x7E) {
						frameStatus++;
					}
					break;
				case 1: //Number of Data Bytes
					frameSize = aux8;
 51c:	98 2e       	mov	r9, r24
					checkSum = 0xFF;
 51e:	c6 2c       	mov	r12, r6
					frameIndex = 0;
					frameStatus++;
 520:	17 2d       	mov	r17, r7
					}
					break;
				case 1: //Number of Data Bytes
					frameSize = aux8;
					checkSum = 0xFF;
					frameIndex = 0;
 522:	da 2c       	mov	r13, r10
 524:	02 c0       	rjmp	.+4      	; 0x52a <main+0xec>
					frameStatus++;
					break;
				case 2: //Data Bytes
					frameData[frameIndex++] = aux8;
 526:	d9 2e       	mov	r13, r25
					checkSum -= aux8;
					if(frameIndex == frameSize) {
						frameStatus++;
 528:	15 2d       	mov	r17, r5
					} else { //Frame Error
						frameStatus = 0;
					}

				}
				usartTransmit(usartGetDataFromReceiverBuffer());
 52a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <usartGetDataFromReceiverBuffer>
 52e:	0e 94 b1 01 	call	0x362	; 0x362 <usartTransmit>
	// Enable Global Interrupts
	sei();

	while(1) {
		if(isBitClr(PINB, PB0)) {
			while(!usartIsReceiverBufferEmpty() && (frameStatus != 0xFF)) {
 532:	0e 94 19 02 	call	0x432	; 0x432 <usartIsReceiverBufferEmpty>
 536:	81 11       	cpse	r24, r1
 538:	04 c0       	rjmp	.+8      	; 0x542 <main+0x104>
 53a:	1f 3f       	cpi	r17, 0xFF	; 255
 53c:	81 f6       	brne	.-96     	; 0x4de <main+0xa0>
 53e:	b9 2c       	mov	r11, r9
 540:	03 c0       	rjmp	.+6      	; 0x548 <main+0x10a>

				}
				usartTransmit(usartGetDataFromReceiverBuffer());
			}
			//Transmit Data
			if(frameStatus == 0xFF) {
 542:	1f 3f       	cpi	r17, 0xFF	; 255
 544:	49 f6       	brne	.-110    	; 0x4d8 <main+0x9a>
 546:	b9 2c       	mov	r11, r9
				for(aux8 = 0; aux8  < frameSize; aux8++) {
 548:	bb 20       	and	r11, r11
 54a:	31 f2       	breq	.-116    	; 0x4d8 <main+0x9a>
 54c:	02 2d       	mov	r16, r2
 54e:	13 2d       	mov	r17, r3
					usartTransmit(frameData[aux8]);
 550:	f8 01       	movw	r30, r16
 552:	81 91       	ld	r24, Z+
 554:	8f 01       	movw	r16, r30
 556:	0e 94 b1 01 	call	0x362	; 0x362 <usartTransmit>
 55a:	80 2f       	mov	r24, r16
 55c:	8e 19       	sub	r24, r14
				}
				usartTransmit(usartGetDataFromReceiverBuffer());
			}
			//Transmit Data
			if(frameStatus == 0xFF) {
				for(aux8 = 0; aux8  < frameSize; aux8++) {
 55e:	8b 15       	cp	r24, r11
 560:	b8 f3       	brcs	.-18     	; 0x550 <main+0x112>
 562:	b9 cf       	rjmp	.-142    	; 0x4d6 <main+0x98>

00000564 <__vector_18>:
}

// -----------------------------------------------------------------------------
// Interruption handlers -------------------------------------------------------

USART_RECEIVER_BUFFER_FUNCTION_HANDLER;
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
 586:	0e 94 bc 01 	call	0x378	; 0x378 <usartReceive>
 58a:	0e 94 c6 01 	call	0x38c	; 0x38c <usartAddDataToReceiverBuffer>
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__udivmodsi4>:
 5b0:	a1 e2       	ldi	r26, 0x21	; 33
 5b2:	1a 2e       	mov	r1, r26
 5b4:	aa 1b       	sub	r26, r26
 5b6:	bb 1b       	sub	r27, r27
 5b8:	fd 01       	movw	r30, r26
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <__udivmodsi4_ep>

000005bc <__udivmodsi4_loop>:
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	ee 1f       	adc	r30, r30
 5c2:	ff 1f       	adc	r31, r31
 5c4:	a2 17       	cp	r26, r18
 5c6:	b3 07       	cpc	r27, r19
 5c8:	e4 07       	cpc	r30, r20
 5ca:	f5 07       	cpc	r31, r21
 5cc:	20 f0       	brcs	.+8      	; 0x5d6 <__udivmodsi4_ep>
 5ce:	a2 1b       	sub	r26, r18
 5d0:	b3 0b       	sbc	r27, r19
 5d2:	e4 0b       	sbc	r30, r20
 5d4:	f5 0b       	sbc	r31, r21

000005d6 <__udivmodsi4_ep>:
 5d6:	66 1f       	adc	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a 94       	dec	r1
 5e0:	69 f7       	brne	.-38     	; 0x5bc <__udivmodsi4_loop>
 5e2:	60 95       	com	r22
 5e4:	70 95       	com	r23
 5e6:	80 95       	com	r24
 5e8:	90 95       	com	r25
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
 5ee:	bd 01       	movw	r22, r26
 5f0:	cf 01       	movw	r24, r30
 5f2:	08 95       	ret

000005f4 <__tablejump2__>:
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31

000005f8 <__tablejump__>:
 5f8:	05 90       	lpm	r0, Z+
 5fa:	f4 91       	lpm	r31, Z
 5fc:	e0 2d       	mov	r30, r0
 5fe:	09 94       	ijmp

00000600 <__ashrdi3>:
 600:	97 fb       	bst	r25, 7
 602:	10 f8       	bld	r1, 0

00000604 <__lshrdi3>:
 604:	16 94       	lsr	r1
 606:	00 08       	sbc	r0, r0
 608:	0f 93       	push	r16
 60a:	08 30       	cpi	r16, 0x08	; 8
 60c:	98 f0       	brcs	.+38     	; 0x634 <__lshrdi3+0x30>
 60e:	08 50       	subi	r16, 0x08	; 8
 610:	23 2f       	mov	r18, r19
 612:	34 2f       	mov	r19, r20
 614:	45 2f       	mov	r20, r21
 616:	56 2f       	mov	r21, r22
 618:	67 2f       	mov	r22, r23
 61a:	78 2f       	mov	r23, r24
 61c:	89 2f       	mov	r24, r25
 61e:	90 2d       	mov	r25, r0
 620:	f4 cf       	rjmp	.-24     	; 0x60a <__lshrdi3+0x6>
 622:	05 94       	asr	r0
 624:	97 95       	ror	r25
 626:	87 95       	ror	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	57 95       	ror	r21
 62e:	47 95       	ror	r20
 630:	37 95       	ror	r19
 632:	27 95       	ror	r18
 634:	0a 95       	dec	r16
 636:	aa f7       	brpl	.-22     	; 0x622 <__lshrdi3+0x1e>
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <_exit>:
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
