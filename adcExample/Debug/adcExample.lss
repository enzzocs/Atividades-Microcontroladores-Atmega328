
adcExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000141e  000014b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080012c  0080012c  000014de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000690  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003faa  00000000  00000000  00001bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008df  00000000  00000000  00005b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017b7  00000000  00000000  00006453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000db4  00000000  00000000  00007c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000296d  00000000  00000000  000089c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000026fb  00000000  00000000  0000b32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000680  00000000  00000000  0000da28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_21>
      58:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      64:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      68:	d8 01       	movw	r26, r16
      6a:	da 01       	movw	r26, r20
      6c:	dc 01       	movw	r26, r24
      6e:	de 01       	movw	r26, r28
      70:	e0 01       	movw	r28, r0
      72:	e2 01       	movw	r28, r4
      74:	e4 01       	movw	r28, r8
      76:	73 03       	mulsu	r23, r19
      78:	75 03       	mulsu	r23, r21
      7a:	75 03       	mulsu	r23, r21
      7c:	75 03       	mulsu	r23, r21
      7e:	75 03       	mulsu	r23, r21
      80:	73 03       	mulsu	r23, r19
      82:	73 03       	mulsu	r23, r19
      84:	75 03       	mulsu	r23, r21
      86:	75 03       	mulsu	r23, r21
      88:	73 03       	mulsu	r23, r19
      8a:	75 03       	mulsu	r23, r21
      8c:	75 03       	mulsu	r23, r21
      8e:	73 03       	mulsu	r23, r19
      90:	75 03       	mulsu	r23, r21
      92:	75 03       	mulsu	r23, r21
      94:	75 03       	mulsu	r23, r21
      96:	73 03       	mulsu	r23, r19
      98:	75 03       	mulsu	r23, r21
      9a:	93 03       	fmuls	r17, r19
      9c:	93 03       	fmuls	r17, r19
      9e:	93 03       	fmuls	r17, r19
      a0:	93 03       	fmuls	r17, r19
      a2:	95 03       	fmuls	r17, r21
      a4:	93 03       	fmuls	r17, r19
      a6:	93 03       	fmuls	r17, r19
      a8:	93 03       	fmuls	r17, r19
      aa:	98 03       	fmulsu	r17, r16
      ac:	93 03       	fmuls	r17, r19
      ae:	93 03       	fmuls	r17, r19
      b0:	9b 03       	fmulsu	r17, r19
      b2:	93 03       	fmuls	r17, r19
      b4:	93 03       	fmuls	r17, r19
      b6:	93 03       	fmuls	r17, r19
      b8:	93 03       	fmuls	r17, r19
      ba:	93 03       	fmuls	r17, r19
      bc:	93 03       	fmuls	r17, r19
      be:	b6 03       	fmuls	r19, r22
      c0:	b6 03       	fmuls	r19, r22
      c2:	b6 03       	fmuls	r19, r22
      c4:	b6 03       	fmuls	r19, r22
      c6:	b8 03       	fmulsu	r19, r16
      c8:	b6 03       	fmuls	r19, r22
      ca:	b6 03       	fmuls	r19, r22
      cc:	b6 03       	fmuls	r19, r22
      ce:	bb 03       	fmulsu	r19, r19
      d0:	b6 03       	fmuls	r19, r22
      d2:	b6 03       	fmuls	r19, r22
      d4:	be 03       	fmulsu	r19, r22
      d6:	b6 03       	fmuls	r19, r22
      d8:	b6 03       	fmuls	r19, r22
      da:	b6 03       	fmuls	r19, r22
      dc:	b6 03       	fmuls	r19, r22
      de:	b6 03       	fmuls	r19, r22
      e0:	b6 03       	fmuls	r19, r22
      e2:	0c 04       	cpc	r0, r12
      e4:	11 04       	cpc	r1, r1
      e6:	11 04       	cpc	r1, r1
      e8:	11 04       	cpc	r1, r1
      ea:	23 04       	cpc	r2, r3
      ec:	0c 04       	cpc	r0, r12
      ee:	0c 04       	cpc	r0, r12
      f0:	11 04       	cpc	r1, r1
      f2:	23 04       	cpc	r2, r3
      f4:	0c 04       	cpc	r0, r12
      f6:	11 04       	cpc	r1, r1
      f8:	23 04       	cpc	r2, r3
      fa:	0c 04       	cpc	r0, r12
      fc:	11 04       	cpc	r1, r1
      fe:	11 04       	cpc	r1, r1
     100:	11 04       	cpc	r1, r1
     102:	0c 04       	cpc	r0, r12
     104:	11 04       	cpc	r1, r1
     106:	d9 04       	cpc	r13, r9
     108:	eb 04       	cpc	r14, r11
     10a:	eb 04       	cpc	r14, r11
     10c:	eb 04       	cpc	r14, r11
     10e:	fd 04       	cpc	r15, r13
     110:	eb 04       	cpc	r14, r11
     112:	d9 04       	cpc	r13, r9
     114:	eb 04       	cpc	r14, r11
     116:	fd 04       	cpc	r15, r13
     118:	d9 04       	cpc	r13, r9
     11a:	eb 04       	cpc	r14, r11
     11c:	fd 04       	cpc	r15, r13
     11e:	d9 04       	cpc	r13, r9
     120:	eb 04       	cpc	r14, r11
     122:	eb 04       	cpc	r14, r11
     124:	eb 04       	cpc	r14, r11
     126:	d9 04       	cpc	r13, r9
     128:	eb 04       	cpc	r14, r11
     12a:	ee 06       	cpc	r14, r30
     12c:	ee 06       	cpc	r14, r30
     12e:	de 06       	cpc	r13, r30
     130:	e0 06       	cpc	r14, r16
     132:	e0 06       	cpc	r14, r16
     134:	e2 06       	cpc	r14, r18
     136:	e2 06       	cpc	r14, r18
     138:	e2 06       	cpc	r14, r18
     13a:	e2 06       	cpc	r14, r18
     13c:	e4 06       	cpc	r14, r20
     13e:	e4 06       	cpc	r14, r20
     140:	e4 06       	cpc	r14, r20
     142:	e6 06       	cpc	r14, r22
     144:	e6 06       	cpc	r14, r22
     146:	e8 06       	cpc	r14, r24
     148:	ea 06       	cpc	r14, r26
     14a:	ec 06       	cpc	r14, r28
     14c:	ec 06       	cpc	r14, r28

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	ee e1       	ldi	r30, 0x1E	; 30
     162:	f4 e1       	ldi	r31, 0x14	; 20
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	ac 32       	cpi	r26, 0x2C	; 44
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	ac e2       	ldi	r26, 0x2C	; 44
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a7 33       	cpi	r26, 0x37	; 55
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
     184:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <main>:

systemFlags_t systemFlags;
volatile uint16 rawADC;

int main(void)
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	6a 97       	sbiw	r28, 0x1a	; 26
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
	//Variable Declaration
	attachLcd(display);
     1a0:	fe 01       	movw	r30, r28
     1a2:	31 96       	adiw	r30, 0x01	; 1
     1a4:	8d e0       	ldi	r24, 0x0D	; 13
     1a6:	df 01       	movw	r26, r30
     1a8:	1d 92       	st	X+, r1
     1aa:	8a 95       	dec	r24
     1ac:	e9 f7       	brne	.-6      	; 0x1a8 <main+0x1c>
     1ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	8b 87       	std	Y+11, r24	; 0x0b
     1b4:	8d e0       	ldi	r24, 0x0D	; 13
     1b6:	de 01       	movw	r26, r28
     1b8:	1e 96       	adiw	r26, 0x0e	; 14
     1ba:	01 90       	ld	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	8a 95       	dec	r24
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x2e>

	systemFlags.allFlags = 0;
     1c2:	10 92 2e 01 	sts	0x012E, r1

	//DEBUG configuration
	setMask(DEBUG_DDR, 0x03, DEBUG_BIT0);
     1c6:	8a b1       	in	r24, 0x0a	; 10
     1c8:	83 60       	ori	r24, 0x03	; 3
     1ca:	8a b9       	out	0x0a, r24	; 10
	clrMask(DEBUG_PORT, 0x03, DEBUG_BIT0);
     1cc:	8b b1       	in	r24, 0x0b	; 11
     1ce:	8c 7f       	andi	r24, 0xFC	; 252
     1d0:	8b b9       	out	0x0b, r24	; 11

	//LCD Configuration
	lcdSetControlPort(&display, &DDRB, &PORTB, PB4, PB5);
     1d2:	05 e0       	ldi	r16, 0x05	; 5
     1d4:	24 e0       	ldi	r18, 0x04	; 4
     1d6:	45 e2       	ldi	r20, 0x25	; 37
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	64 e2       	ldi	r22, 0x24	; 36
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	ce 01       	movw	r24, r28
     1e0:	0e 96       	adiw	r24, 0x0e	; 14
     1e2:	0e 94 26 02 	call	0x44c	; 0x44c <lcdSetControlPort>
	lcdSetDataPort(&display, &DDRB, &PORTB, PB0);
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	45 e2       	ldi	r20, 0x25	; 37
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	64 e2       	ldi	r22, 0x24	; 36
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	ce 01       	movw	r24, r28
     1f2:	0e 96       	adiw	r24, 0x0e	; 14
     1f4:	0e 94 16 02 	call	0x42c	; 0x42c <lcdSetDataPort>
	lcdInit(&display, LCD_16X2, LCD_FONT_5X8);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	68 e0       	ldi	r22, 0x08	; 8
     1fc:	ce 01       	movw	r24, r28
     1fe:	0e 96       	adiw	r24, 0x0e	; 14
     200:	0e 94 bc 04 	call	0x978	; 0x978 <lcdInit>
	lcdStdio(&display);
     204:	ce 01       	movw	r24, r28
     206:	0e 96       	adiw	r24, 0x0e	; 14
     208:	0e 94 40 02 	call	0x480	; 0x480 <lcdStdio>
	printf("adcExample v 1.0\n\n");
     20c:	8e e0       	ldi	r24, 0x0E	; 14
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 31 07 	call	0xe62	; 0xe62 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     214:	bf ef       	ldi	r27, 0xFF	; 255
     216:	e7 ea       	ldi	r30, 0xA7	; 167
     218:	f1 e6       	ldi	r31, 0x61	; 97
     21a:	b1 50       	subi	r27, 0x01	; 1
     21c:	e0 40       	sbci	r30, 0x00	; 0
     21e:	f0 40       	sbci	r31, 0x00	; 0
     220:	e1 f7       	brne	.-8      	; 0x21a <main+0x8e>
     222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x98>
     224:	00 00       	nop
	_delay_ms(2000);
	lcdClearScreen(&display);
     226:	ce 01       	movw	r24, r28
     228:	0e 96       	adiw	r24, 0x0e	; 14
     22a:	0e 94 30 03 	call	0x660	; 0x660 <lcdClearScreen>

	//ADC Configuration
	adcConfig(ADC_MODE_AUTO_TIMER1_COMPB, ADC_REFERENCE_POWER_SUPPLY, ADC_PRESCALER_128);
     22e:	47 e0       	ldi	r20, 0x07	; 7
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	86 e0       	ldi	r24, 0x06	; 6
     234:	0e 94 ab 01 	call	0x356	; 0x356 <adcConfig>
	adcSelectChannel(ADC_CHANNEL_0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <adcSelectChannel>
	adcDisableDigitalInput(ADC_CHANNEL_0);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <adcDisableDigitalInput>
	//adcDataPresentation(ADC_LEFT_ADJUSTED);
	adcEnable();
     244:	0e 94 01 02 	call	0x402	; 0x402 <adcEnable>
	adcActivateInterrupt();
     248:	0e 94 08 02 	call	0x410	; 0x410 <adcActivateInterrupt>
	adcStartConversion();
     24c:	0e 94 0f 02 	call	0x41e	; 0x41e <adcStartConversion>

	//Timer1
	timer1Config(TIMER_B_MODE_CTC_ICR, TIMER_A_PRESCALER_64);
     250:	63 e0       	ldi	r22, 0x03	; 3
     252:	8c e0       	ldi	r24, 0x0C	; 12
     254:	0e 94 79 01 	call	0x2f2	; 0x2f2 <timer1Config>
	timer1SetInputCaptureValue(25000);
     258:	88 ea       	ldi	r24, 0xA8	; 168
     25a:	91 e6       	ldi	r25, 0x61	; 97
     25c:	0e 94 a2 01 	call	0x344	; 0x344 <timer1SetInputCaptureValue>
	timer1SetCompareBValue(25000);
     260:	88 ea       	ldi	r24, 0xA8	; 168
     262:	91 e6       	ldi	r25, 0x61	; 97
     264:	0e 94 99 01 	call	0x332	; 0x332 <timer1SetCompareBValue>
	timer1ClearCompareBInterruptRequest();
     268:	0e 94 96 01 	call	0x32c	; 0x32c <timer1ClearCompareBInterruptRequest>


	sei();
     26c:	78 94       	sei
	while(1) {
		if(systemFlags.conversionReady) {
			printf("ADC = %d\n\n", ADC);
     26e:	0f 2e       	mov	r0, r31
     270:	f8 e7       	ldi	r31, 0x78	; 120
     272:	ef 2e       	mov	r14, r31
     274:	f1 2c       	mov	r15, r1
     276:	f0 2d       	mov	r31, r0
     278:	00 e2       	ldi	r16, 0x20	; 32
     27a:	11 e0       	ldi	r17, 0x01	; 1
	timer1ClearCompareBInterruptRequest();


	sei();
	while(1) {
		if(systemFlags.conversionReady) {
     27c:	80 91 2e 01 	lds	r24, 0x012E
     280:	80 ff       	sbrs	r24, 0
     282:	fc cf       	rjmp	.-8      	; 0x27c <main+0xf0>
			printf("ADC = %d\n\n", ADC);
     284:	d7 01       	movw	r26, r14
     286:	8d 91       	ld	r24, X+
     288:	9c 91       	ld	r25, X
     28a:	9f 93       	push	r25
     28c:	8f 93       	push	r24
     28e:	1f 93       	push	r17
     290:	0f 93       	push	r16
     292:	0e 94 1d 07 	call	0xe3a	; 0xe3a <printf>
     296:	bf ef       	ldi	r27, 0xFF	; 255
     298:	e1 ee       	ldi	r30, 0xE1	; 225
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	b1 50       	subi	r27, 0x01	; 1
     29e:	e0 40       	sbci	r30, 0x00	; 0
     2a0:	f0 40       	sbci	r31, 0x00	; 0
     2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x110>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x11a>
     2a6:	00 00       	nop
			_delay_ms(100);
			systemFlags.conversionReady = 0;
     2a8:	80 91 2e 01 	lds	r24, 0x012E
     2ac:	8e 7f       	andi	r24, 0xFE	; 254
     2ae:	80 93 2e 01 	sts	0x012E, r24
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	e0 cf       	rjmp	.-64     	; 0x27c <main+0xf0>

000002bc <__vector_21>:
		//TODO:: Please write your application code
	}
}

ISR(ADC_vect)
{
     2bc:	1f 92       	push	r1
     2be:	0f 92       	push	r0
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
	rawADC = ADC;
     2ca:	80 91 78 00 	lds	r24, 0x0078
     2ce:	90 91 79 00 	lds	r25, 0x0079
     2d2:	90 93 30 01 	sts	0x0130, r25
     2d6:	80 93 2f 01 	sts	0x012F, r24
	systemFlags.conversionReady = 1;
     2da:	80 91 2e 01 	lds	r24, 0x012E
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 93 2e 01 	sts	0x012E, r24
     2e4:	9f 91       	pop	r25
     2e6:	8f 91       	pop	r24
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     2f2:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     2f6:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE) {
     2fa:	6f 3f       	cpi	r22, 0xFF	; 255
     2fc:	11 f0       	breq	.+4      	; 0x302 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     2fe:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     300:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE) {
     302:	8f 3f       	cpi	r24, 0xFF	; 255
     304:	69 f0       	breq	.+26     	; 0x320 <timer1Config+0x2e>
		if(isBitSet(mode, 3)) {
     306:	83 ff       	sbrs	r24, 3
     308:	02 c0       	rjmp	.+4      	; 0x30e <timer1Config+0x1c>
			setBit(reg2, WGM13);
     30a:	90 61       	ori	r25, 0x10	; 16
     30c:	01 c0       	rjmp	.+2      	; 0x310 <timer1Config+0x1e>
		} else {
			clrBit(reg2, WGM13);
     30e:	9f 7e       	andi	r25, 0xEF	; 239
		}
		if(isBitSet(mode, 2)) {
     310:	82 ff       	sbrs	r24, 2
     312:	02 c0       	rjmp	.+4      	; 0x318 <timer1Config+0x26>
			setBit(reg2, WGM12);
     314:	98 60       	ori	r25, 0x08	; 8
     316:	01 c0       	rjmp	.+2      	; 0x31a <timer1Config+0x28>
		} else {
			clrBit(reg2, WGM12);
     318:	97 7f       	andi	r25, 0xF7	; 247
		}
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     31a:	83 70       	andi	r24, 0x03	; 3
		if(isBitSet(mode, 2)) {
			setBit(reg2, WGM12);
		} else {
			clrBit(reg2, WGM12);
		}
		reg1 &= ~(0x03 << WGM10);
     31c:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     31e:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     320:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     324:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret

0000032c <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
     32c:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	08 95       	ret

00000332 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     332:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     334:	f8 94       	cli
		OCR1B = value;
     336:	90 93 8b 00 	sts	0x008B, r25
     33a:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     33e:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 95       	ret

00000344 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     344:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     346:	f8 94       	cli
		ICR1 = value;
     348:	90 93 87 00 	sts	0x0087, r25
     34c:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     350:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	08 95       	ret

00000356 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE) {
     356:	6f 3f       	cpi	r22, 0xFF	; 255
     358:	51 f0       	breq	.+20     	; 0x36e <adcConfig+0x18>
		reg = ADMUX;
     35a:	ec e7       	ldi	r30, 0x7C	; 124
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	90 81       	ld	r25, Z
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
     360:	20 e4       	ldi	r18, 0x40	; 64
     362:	62 9f       	mul	r22, r18
     364:	b0 01       	movw	r22, r0
     366:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE) {
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
     368:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
     36a:	69 2b       	or	r22, r25
		ADMUX = reg;
     36c:	60 83       	st	Z, r22
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE) {
     36e:	4f 3f       	cpi	r20, 0xFF	; 255
     370:	31 f0       	breq	.+12     	; 0x37e <adcConfig+0x28>
		reg = ADCSRA;
     372:	ea e7       	ldi	r30, 0x7A	; 122
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	90 81       	ld	r25, Z
		reg &= ~(0x07 << ADPS0);
     378:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
     37a:	49 2b       	or	r20, r25
		ADCSRA = reg;
     37c:	40 83       	st	Z, r20
	}

	if(mode != ADC_MODE_NO_CHANGE) {
     37e:	8f 3f       	cpi	r24, 0xFF	; 255
     380:	69 f1       	breq	.+90     	; 0x3dc <adcConfig+0x86>
		if(mode == ADC_MODE_SINGLE_CONVERSION) {
     382:	81 11       	cpse	r24, r1
     384:	07 c0       	rjmp	.+14     	; 0x394 <adcConfig+0x3e>
			clrBit(ADCSRA, ADATE);
     386:	ea e7       	ldi	r30, 0x7A	; 122
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	8f 7d       	andi	r24, 0xDF	; 223
     38e:	80 83       	st	Z, r24
			ADCSRB = reg;
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret

	if(mode != ADC_MODE_NO_CHANGE) {
		if(mode == ADC_MODE_SINGLE_CONVERSION) {
			clrBit(ADCSRA, ADATE);
		} else {
			reg = ADCSRB;
     394:	90 91 7b 00 	lds	r25, 0x007B
			reg &= ~(0x07 << ADTS0);
     398:	29 2f       	mov	r18, r25
     39a:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode) {
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	32 97       	sbiw	r30, 0x02	; 2
     3a2:	e7 30       	cpi	r30, 0x07	; 7
     3a4:	f1 05       	cpc	r31, r1
     3a6:	e0 f4       	brcc	.+56     	; 0x3e0 <adcConfig+0x8a>
     3a8:	ec 5c       	subi	r30, 0xCC	; 204
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
			case ADC_MODE_AUTO_ANALOG_COMP:
				reg |= (1 << ADTS0);
     3b0:	21 60       	ori	r18, 0x01	; 1
				break;
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_INT0:
				reg |= (2 << ADTS0);
     3b4:	22 60       	ori	r18, 0x02	; 2
				break;
     3b6:	09 c0       	rjmp	.+18     	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_TIMER0_COMPA:
				reg |= (3 << ADTS0);
     3b8:	23 60       	ori	r18, 0x03	; 3
				break;
     3ba:	07 c0       	rjmp	.+14     	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_TIMER0_OVERFLOW:
				reg |= (4 << ADTS0);
     3bc:	24 60       	ori	r18, 0x04	; 4
				break;
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_TIMER1_COMPB:
				reg |= (5 << ADTS0);
     3c0:	25 60       	ori	r18, 0x05	; 5
				break;
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_TIMER1_OVERFLOW:
				reg |= (6 << ADTS0);
     3c4:	26 60       	ori	r18, 0x06	; 6
				break;
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <adcConfig+0x74>
			case ADC_MODE_AUTO_TIMER1_CAPTURE:
				reg |= (7 << ADTS0);
     3c8:	27 60       	ori	r18, 0x07	; 7
				break;
			default:
				return RESULT_UNSUPPORTED_VALUE;
				break;
			}
			ADCSRB = reg;
     3ca:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
     3ce:	ea e7       	ldi	r30, 0x7A	; 122
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 62       	ori	r24, 0x20	; 32
     3d6:	80 83       	st	Z, r24
		}
	}

	return RESULT_OK;
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	08 95       	ret
				break;
			case ADC_MODE_AUTO_TIMER1_CAPTURE:
				reg |= (7 << ADTS0);
				break;
			default:
				return RESULT_UNSUPPORTED_VALUE;
     3e0:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
}
     3e2:	08 95       	ret

000003e4 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
     3e4:	ec e7       	ldi	r30, 0x7C	; 124
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
     3ea:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
     3ec:	89 2b       	or	r24, r25
	ADMUX = reg;
     3ee:	80 83       	st	Z, r24

	return RESULT_OK;
}
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
     3f4:	ee e7       	ldi	r30, 0x7E	; 126
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	90 81       	ld	r25, Z
     3fa:	89 2b       	or	r24, r25
     3fc:	80 83       	st	Z, r24

	return RESULT_OK;
}
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	08 95       	ret

00000402 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
     402:	ea e7       	ldi	r30, 0x7A	; 122
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	80 83       	st	Z, r24

	return RESULT_OK;
}
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	08 95       	ret

00000410 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
     410:	ea e7       	ldi	r30, 0x7A	; 122
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	88 60       	ori	r24, 0x08	; 8
     418:	80 83       	st	Z, r24

	return RESULT_OK;
}
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret

0000041e <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
     41e:	ea e7       	ldi	r30, 0x7A	; 122
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	80 64       	ori	r24, 0x40	; 64
     426:	80 83       	st	Z, r24

	return RESULT_OK;
}
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	08 95       	ret

0000042c <lcdSetDataPort>:
 *				dataFirst	Position of the first bit of the LCD data nibble
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdSetDataPort(volatile lcdConfiguration_t * lcd, volatile uint8 * dataDDR, volatile uint8 * dataPORT, uint8 dataFirst)
{
     42c:	fc 01       	movw	r30, r24
	lcd->dataDDR = dataDDR;
     42e:	71 83       	std	Z+1, r23	; 0x01
     430:	60 83       	st	Z, r22
	lcd->dataPORT = dataPORT;
     432:	53 83       	std	Z+3, r21	; 0x03
     434:	42 83       	std	Z+2, r20	; 0x02
	lcd->dataFirst = dataFirst;
     436:	82 2f       	mov	r24, r18
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	24 81       	ldd	r18, Z+4	; 0x04
     43c:	28 7f       	andi	r18, 0xF8	; 248
     43e:	28 2b       	or	r18, r24
     440:	24 83       	std	Z+4, r18	; 0x04
	lcd->dataPortConfigured = TRUE;
     442:	84 85       	ldd	r24, Z+12	; 0x0c
     444:	82 60       	ori	r24, 0x02	; 2
     446:	84 87       	std	Z+12, r24	; 0x0c

	return LCD_OK;
}
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret

0000044c <lcdSetControlPort>:
 *				controlRS	Position of pin RS at the control register
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdSetControlPort(volatile lcdConfiguration_t * lcd, volatile uint8 * controlDDR, volatile uint8 * controlPORT, uint8 controlE, uint8 controlRS)
{
     44c:	0f 93       	push	r16
     44e:	fc 01       	movw	r30, r24
	lcd->controlDDR = controlDDR;
     450:	76 83       	std	Z+6, r23	; 0x06
     452:	65 83       	std	Z+5, r22	; 0x05
	lcd->controlPORT = controlPORT;
     454:	50 87       	std	Z+8, r21	; 0x08
     456:	47 83       	std	Z+7, r20	; 0x07
	lcd->controlE = controlE;
     458:	27 70       	andi	r18, 0x07	; 7
     45a:	22 0f       	add	r18, r18
     45c:	22 0f       	add	r18, r18
     45e:	22 0f       	add	r18, r18
     460:	81 85       	ldd	r24, Z+9	; 0x09
     462:	87 7c       	andi	r24, 0xC7	; 199
     464:	28 2b       	or	r18, r24
     466:	21 87       	std	Z+9, r18	; 0x09
	lcd->controlRS = controlRS;
     468:	80 2f       	mov	r24, r16
     46a:	87 70       	andi	r24, 0x07	; 7
     46c:	01 85       	ldd	r16, Z+9	; 0x09
     46e:	08 7f       	andi	r16, 0xF8	; 248
     470:	08 2b       	or	r16, r24
     472:	01 87       	std	Z+9, r16	; 0x09
	lcd->controlPortConfigured = TRUE;
     474:	84 85       	ldd	r24, Z+12	; 0x0c
     476:	84 60       	ori	r24, 0x04	; 4
     478:	84 87       	std	Z+12, r24	; 0x0c

	return LCD_OK;
}
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <lcdStdio>:
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdStdio(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
     480:	fc 01       	movw	r30, r24
     482:	24 85       	ldd	r18, Z+12	; 0x0c
     484:	23 ff       	sbrs	r18, 3
     486:	14 c0       	rjmp	.+40     	; 0x4b0 <lcdStdio+0x30>
		return LCD_NOT_INITIALIZED;
	}

	stdin = stdout = stderr = &lcdStream;
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	31 e0       	ldi	r19, 0x01	; 1
     48c:	30 93 36 01 	sts	0x0136, r19
     490:	20 93 35 01 	sts	0x0135, r18
     494:	30 93 34 01 	sts	0x0134, r19
     498:	20 93 33 01 	sts	0x0133, r18
     49c:	30 93 32 01 	sts	0x0132, r19
     4a0:	20 93 31 01 	sts	0x0131, r18
	defaultDisplay = lcd;
     4a4:	90 93 2d 01 	sts	0x012D, r25
     4a8:	80 93 2c 01 	sts	0x012C, r24

	return LCD_OK;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret
 * -------------------------------------------------------------------------- */

lcdResult_t lcdStdio(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     4b0:	87 e0       	ldi	r24, 0x07	; 7

	stdin = stdout = stderr = &lcdStream;
	defaultDisplay = lcd;

	return LCD_OK;
}
     4b2:	08 95       	ret

000004b4 <lcdWriteCommand>:
 *				command		Command to be sent to LCD
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCommand(volatile lcdConfiguration_t * lcd, uint8 command)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	fc 01       	movw	r30, r24
	clrBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
     4ba:	a7 81       	ldd	r26, Z+7	; 0x07
     4bc:	b0 85       	ldd	r27, Z+8	; 0x08
     4be:	4c 91       	ld	r20, X
     4c0:	21 85       	ldd	r18, Z+9	; 0x09
     4c2:	27 70       	andi	r18, 0x07	; 7
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	ec 01       	movw	r28, r24
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <lcdWriteCommand+0x1c>
     4cc:	cc 0f       	add	r28, r28
     4ce:	dd 1f       	adc	r29, r29
     4d0:	2a 95       	dec	r18
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <lcdWriteCommand+0x18>
     4d4:	9e 01       	movw	r18, r28
     4d6:	20 95       	com	r18
     4d8:	24 23       	and	r18, r20
     4da:	2c 93       	st	X, r18
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
     4dc:	a7 81       	ldd	r26, Z+7	; 0x07
     4de:	b0 85       	ldd	r27, Z+8	; 0x08
     4e0:	4c 91       	ld	r20, X
     4e2:	21 85       	ldd	r18, Z+9	; 0x09
     4e4:	26 95       	lsr	r18
     4e6:	26 95       	lsr	r18
     4e8:	26 95       	lsr	r18
     4ea:	27 70       	andi	r18, 0x07	; 7
     4ec:	ec 01       	movw	r28, r24
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <lcdWriteCommand+0x40>
     4f0:	cc 0f       	add	r28, r28
     4f2:	dd 1f       	adc	r29, r29
     4f4:	2a 95       	dec	r18
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <lcdWriteCommand+0x3c>
     4f8:	9e 01       	movw	r18, r28
     4fa:	20 95       	com	r18
     4fc:	24 23       	and	r18, r20
     4fe:	2c 93       	st	X, r18
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (higher nibble)
     500:	a2 81       	ldd	r26, Z+2	; 0x02
     502:	b3 81       	ldd	r27, Z+3	; 0x03
     504:	7c 91       	ld	r23, X
     506:	24 81       	ldd	r18, Z+4	; 0x04
     508:	27 70       	andi	r18, 0x07	; 7
     50a:	4f e0       	ldi	r20, 0x0F	; 15
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	ea 01       	movw	r28, r20
     510:	02 c0       	rjmp	.+4      	; 0x516 <lcdWriteCommand+0x62>
     512:	cc 0f       	add	r28, r28
     514:	dd 1f       	adc	r29, r29
     516:	2a 95       	dec	r18
     518:	e2 f7       	brpl	.-8      	; 0x512 <lcdWriteCommand+0x5e>
     51a:	9e 01       	movw	r18, r28
     51c:	20 95       	com	r18
     51e:	27 23       	and	r18, r23
     520:	2c 93       	st	X, r18
	*(lcd->dataPORT) |= ((command >> 4) << lcd->dataFirst);
     522:	a2 81       	ldd	r26, Z+2	; 0x02
     524:	b3 81       	ldd	r27, Z+3	; 0x03
     526:	3c 91       	ld	r19, X
     528:	44 81       	ldd	r20, Z+4	; 0x04
     52a:	47 70       	andi	r20, 0x07	; 7
     52c:	26 2f       	mov	r18, r22
     52e:	22 95       	swap	r18
     530:	2f 70       	andi	r18, 0x0F	; 15
     532:	01 c0       	rjmp	.+2      	; 0x536 <lcdWriteCommand+0x82>
     534:	22 0f       	add	r18, r18
     536:	4a 95       	dec	r20
     538:	ea f7       	brpl	.-6      	; 0x534 <lcdWriteCommand+0x80>
     53a:	23 2b       	or	r18, r19
     53c:	2c 93       	st	X, r18
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     53e:	a7 81       	ldd	r26, Z+7	; 0x07
     540:	b0 85       	ldd	r27, Z+8	; 0x08
     542:	3c 91       	ld	r19, X
     544:	21 85       	ldd	r18, Z+9	; 0x09
     546:	26 95       	lsr	r18
     548:	26 95       	lsr	r18
     54a:	26 95       	lsr	r18
     54c:	27 70       	andi	r18, 0x07	; 7
     54e:	02 c0       	rjmp	.+4      	; 0x554 <lcdWriteCommand+0xa0>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	2a 95       	dec	r18
     556:	e2 f7       	brpl	.-8      	; 0x550 <lcdWriteCommand+0x9c>
     558:	83 2b       	or	r24, r19
     55a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55c:	d5 e0       	ldi	r29, 0x05	; 5
     55e:	da 95       	dec	r29
     560:	f1 f7       	brne	.-4      	; 0x55e <lcdWriteCommand+0xaa>
     562:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     564:	a7 81       	ldd	r26, Z+7	; 0x07
     566:	b0 85       	ldd	r27, Z+8	; 0x08
     568:	4c 91       	ld	r20, X
     56a:	81 85       	ldd	r24, Z+9	; 0x09
     56c:	86 95       	lsr	r24
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	87 70       	andi	r24, 0x07	; 7
     574:	21 e0       	ldi	r18, 0x01	; 1
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	e9 01       	movw	r28, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <lcdWriteCommand+0xcc>
     57c:	cc 0f       	add	r28, r28
     57e:	dd 1f       	adc	r29, r29
     580:	8a 95       	dec	r24
     582:	e2 f7       	brpl	.-8      	; 0x57c <lcdWriteCommand+0xc8>
     584:	ce 01       	movw	r24, r28
     586:	80 95       	com	r24
     588:	84 23       	and	r24, r20
     58a:	8c 93       	st	X, r24
     58c:	d5 e0       	ldi	r29, 0x05	; 5
     58e:	da 95       	dec	r29
     590:	f1 f7       	brne	.-4      	; 0x58e <lcdWriteCommand+0xda>
     592:	00 00       	nop
	_delay_us(1);
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (lower nibble)
     594:	a2 81       	ldd	r26, Z+2	; 0x02
     596:	b3 81       	ldd	r27, Z+3	; 0x03
     598:	4c 91       	ld	r20, X
     59a:	84 81       	ldd	r24, Z+4	; 0x04
     59c:	87 70       	andi	r24, 0x07	; 7
     59e:	2f e0       	ldi	r18, 0x0F	; 15
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	e9 01       	movw	r28, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <lcdWriteCommand+0xf6>
     5a6:	cc 0f       	add	r28, r28
     5a8:	dd 1f       	adc	r29, r29
     5aa:	8a 95       	dec	r24
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <lcdWriteCommand+0xf2>
     5ae:	ce 01       	movw	r24, r28
     5b0:	80 95       	com	r24
     5b2:	84 23       	and	r24, r20
     5b4:	8c 93       	st	X, r24
	*(lcd->dataPORT) |= ((command & 0x0F) << lcd->dataFirst);
     5b6:	a2 81       	ldd	r26, Z+2	; 0x02
     5b8:	b3 81       	ldd	r27, Z+3	; 0x03
     5ba:	9c 91       	ld	r25, X
     5bc:	24 81       	ldd	r18, Z+4	; 0x04
     5be:	27 70       	andi	r18, 0x07	; 7
     5c0:	86 2f       	mov	r24, r22
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <lcdWriteCommand+0x114>
     5c6:	88 0f       	add	r24, r24
     5c8:	2a 95       	dec	r18
     5ca:	ea f7       	brpl	.-6      	; 0x5c6 <lcdWriteCommand+0x112>
     5cc:	89 2b       	or	r24, r25
     5ce:	8c 93       	st	X, r24
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     5d0:	a7 81       	ldd	r26, Z+7	; 0x07
     5d2:	b0 85       	ldd	r27, Z+8	; 0x08
     5d4:	4c 91       	ld	r20, X
     5d6:	91 85       	ldd	r25, Z+9	; 0x09
     5d8:	96 95       	lsr	r25
     5da:	96 95       	lsr	r25
     5dc:	96 95       	lsr	r25
     5de:	97 70       	andi	r25, 0x07	; 7
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	e9 01       	movw	r28, r18
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <lcdWriteCommand+0x138>
     5e8:	cc 0f       	add	r28, r28
     5ea:	dd 1f       	adc	r29, r29
     5ec:	9a 95       	dec	r25
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <lcdWriteCommand+0x134>
     5f0:	ce 01       	movw	r24, r28
     5f2:	84 2b       	or	r24, r20
     5f4:	8c 93       	st	X, r24
     5f6:	d5 e0       	ldi	r29, 0x05	; 5
     5f8:	da 95       	dec	r29
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <lcdWriteCommand+0x144>
     5fc:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     5fe:	a7 81       	ldd	r26, Z+7	; 0x07
     600:	b0 85       	ldd	r27, Z+8	; 0x08
     602:	4c 91       	ld	r20, X
     604:	81 85       	ldd	r24, Z+9	; 0x09
     606:	86 95       	lsr	r24
     608:	86 95       	lsr	r24
     60a:	86 95       	lsr	r24
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	e9 01       	movw	r28, r18
     610:	02 c0       	rjmp	.+4      	; 0x616 <lcdWriteCommand+0x162>
     612:	cc 0f       	add	r28, r28
     614:	dd 1f       	adc	r29, r29
     616:	8a 95       	dec	r24
     618:	e2 f7       	brpl	.-8      	; 0x612 <lcdWriteCommand+0x15e>
     61a:	ce 01       	movw	r24, r28
     61c:	80 95       	com	r24
     61e:	84 23       	and	r24, r20
     620:	8c 93       	st	X, r24
     622:	d5 e0       	ldi	r29, 0x05	; 5
     624:	da 95       	dec	r29
     626:	f1 f7       	brne	.-4      	; 0x624 <lcdWriteCommand+0x170>
     628:	00 00       	nop
	_delay_us(1);
	if((command == LCD_CLEAR_SCREEN) || (command == LCD_CURSOR_HOME)) {
     62a:	61 50       	subi	r22, 0x01	; 1
     62c:	62 30       	cpi	r22, 0x02	; 2
     62e:	80 f4       	brcc	.+32     	; 0x650 <lcdWriteCommand+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     630:	8f e3       	ldi	r24, 0x3F	; 63
     632:	9f e1       	ldi	r25, 0x1F	; 31
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <lcdWriteCommand+0x180>
     638:	00 c0       	rjmp	.+0      	; 0x63a <lcdWriteCommand+0x186>
     63a:	00 00       	nop
		_delay_ms(2);
		lcd->cursorLine = 0;
     63c:	83 85       	ldd	r24, Z+11	; 0x0b
     63e:	8f 77       	andi	r24, 0x7F	; 127
     640:	83 87       	std	Z+11, r24	; 0x0b
     642:	84 85       	ldd	r24, Z+12	; 0x0c
     644:	8e 7f       	andi	r24, 0xFE	; 254
     646:	84 87       	std	Z+12, r24	; 0x0c
		lcd->cursorColumn = 0;
     648:	83 85       	ldd	r24, Z+11	; 0x0b
     64a:	81 78       	andi	r24, 0x81	; 129
     64c:	83 87       	std	Z+11, r24	; 0x0b
     64e:	04 c0       	rjmp	.+8      	; 0x658 <lcdWriteCommand+0x1a4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     650:	95 ed       	ldi	r25, 0xD5	; 213
     652:	9a 95       	dec	r25
     654:	f1 f7       	brne	.-4      	; 0x652 <lcdWriteCommand+0x19e>
     656:	00 00       	nop
	} else {
		_delay_us(40);
	}

	return LCD_OK;
}
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <lcdClearScreen>:
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdClearScreen(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
     660:	fc 01       	movw	r30, r24
     662:	24 85       	ldd	r18, Z+12	; 0x0c
     664:	23 ff       	sbrs	r18, 3
     666:	04 c0       	rjmp	.+8      	; 0x670 <lcdClearScreen+0x10>
		return LCD_NOT_INITIALIZED;
	}

	return lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>
     66e:	08 95       	ret
 * -------------------------------------------------------------------------- */

lcdResult_t lcdClearScreen(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     670:	87 e0       	ldi	r24, 0x07	; 7
	}

	return lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
}
     672:	08 95       	ret

00000674 <lcdCursorGoTo>:
 *				LCD_UNSUPPORTED_PARAMETER
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdCursorGoTo(volatile lcdConfiguration_t * lcd, uint8 line, uint8 column)
{
     674:	dc 01       	movw	r26, r24
	uint8 address = 0x00;

	if(lcd->initialized == FALSE) {
     676:	1c 96       	adiw	r26, 0x0c	; 12
     678:	8c 91       	ld	r24, X
     67a:	1c 97       	sbiw	r26, 0x0c	; 12
     67c:	83 ff       	sbrs	r24, 3
     67e:	a5 c0       	rjmp	.+330    	; 0x7ca <lcdCursorGoTo+0x156>
		return LCD_NOT_INITIALIZED;
	}

	if(line == 1) {
     680:	61 30       	cpi	r22, 0x01	; 1
     682:	b1 f4       	brne	.+44     	; 0x6b0 <lcdCursorGoTo+0x3c>
		switch(lcd->size) {
     684:	19 96       	adiw	r26, 0x09	; 9
     686:	9c 91       	ld	r25, X
     688:	19 97       	sbiw	r26, 0x09	; 9
     68a:	92 95       	swap	r25
     68c:	96 95       	lsr	r25
     68e:	96 95       	lsr	r25
     690:	93 70       	andi	r25, 0x03	; 3
     692:	1a 96       	adiw	r26, 0x0a	; 10
     694:	8c 91       	ld	r24, X
     696:	1a 97       	sbiw	r26, 0x0a	; 10
     698:	87 70       	andi	r24, 0x07	; 7
     69a:	88 0f       	add	r24, r24
     69c:	88 0f       	add	r24, r24
     69e:	89 2b       	or	r24, r25
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	42 97       	sbiw	r24, 0x12	; 18
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <lcdCursorGoTo+0x36>
     6a8:	92 c0       	rjmp	.+292    	; 0x7ce <lcdCursorGoTo+0x15a>
		case LCD_32X2:
		case LCD_40X2:
		case LCD_12X4:
		case LCD_16X4:
		case LCD_20X4:
			address += (column - 1);
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
     6ac:	94 0f       	add	r25, r20
     6ae:	68 c0       	rjmp	.+208    	; 0x780 <lcdCursorGoTo+0x10c>
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else if(line == 2) {
     6b0:	62 30       	cpi	r22, 0x02	; 2
     6b2:	f1 f4       	brne	.+60     	; 0x6f0 <lcdCursorGoTo+0x7c>
		switch(lcd->size) {
     6b4:	19 96       	adiw	r26, 0x09	; 9
     6b6:	9c 91       	ld	r25, X
     6b8:	19 97       	sbiw	r26, 0x09	; 9
     6ba:	92 95       	swap	r25
     6bc:	96 95       	lsr	r25
     6be:	96 95       	lsr	r25
     6c0:	93 70       	andi	r25, 0x03	; 3
     6c2:	1a 96       	adiw	r26, 0x0a	; 10
     6c4:	8c 91       	ld	r24, X
     6c6:	1a 97       	sbiw	r26, 0x0a	; 10
     6c8:	87 70       	andi	r24, 0x07	; 7
     6ca:	88 0f       	add	r24, r24
     6cc:	88 0f       	add	r24, r24
     6ce:	89 2b       	or	r24, r25
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	82 31       	cpi	r24, 0x12	; 18
     6d6:	91 05       	cpc	r25, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <lcdCursorGoTo+0x68>
     6da:	7b c0       	rjmp	.+246    	; 0x7d2 <lcdCursorGoTo+0x15e>
     6dc:	85 5c       	subi	r24, 0xC5	; 197
     6de:	9f 4f       	sbci	r25, 0xFF	; 255
     6e0:	fc 01       	movw	r30, r24
     6e2:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
		case LCD_16X1:
		case LCD_16X1b:
		case LCD_20X1:
		case LCD_24X1:
		case LCD_40X1:
			return LCD_UNSUPPORTED_PARAMETER;
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	08 95       	ret
		case LCD_32X2:
		case LCD_40X2:
		case LCD_12X4:
		case LCD_16X4:
		case LCD_20X4:
			address += (0x40 + column - 1);
     6ea:	9f e3       	ldi	r25, 0x3F	; 63
     6ec:	94 0f       	add	r25, r20
     6ee:	48 c0       	rjmp	.+144    	; 0x780 <lcdCursorGoTo+0x10c>
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else if(line == 3) {
     6f0:	63 30       	cpi	r22, 0x03	; 3
     6f2:	21 f5       	brne	.+72     	; 0x73c <lcdCursorGoTo+0xc8>
		switch(lcd->size) {
     6f4:	19 96       	adiw	r26, 0x09	; 9
     6f6:	9c 91       	ld	r25, X
     6f8:	19 97       	sbiw	r26, 0x09	; 9
     6fa:	92 95       	swap	r25
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	93 70       	andi	r25, 0x03	; 3
     702:	1a 96       	adiw	r26, 0x0a	; 10
     704:	8c 91       	ld	r24, X
     706:	1a 97       	sbiw	r26, 0x0a	; 10
     708:	87 70       	andi	r24, 0x07	; 7
     70a:	88 0f       	add	r24, r24
     70c:	88 0f       	add	r24, r24
     70e:	89 2b       	or	r24, r25
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	82 31       	cpi	r24, 0x12	; 18
     716:	91 05       	cpc	r25, r1
     718:	08 f0       	brcs	.+2      	; 0x71c <lcdCursorGoTo+0xa8>
     71a:	5d c0       	rjmp	.+186    	; 0x7d6 <lcdCursorGoTo+0x162>
     71c:	83 5b       	subi	r24, 0xB3	; 179
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	fc 01       	movw	r30, r24
     722:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
		case LCD_20X2:
		case LCD_24X2:
		case LCD_30X2:
		case LCD_32X2:
		case LCD_40X2:
			return LCD_UNSUPPORTED_PARAMETER;
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	08 95       	ret
		case LCD_12X4:
			address += (0x0C + column - 1);
     72a:	9b e0       	ldi	r25, 0x0B	; 11
     72c:	94 0f       	add	r25, r20
			break;
     72e:	28 c0       	rjmp	.+80     	; 0x780 <lcdCursorGoTo+0x10c>
		case LCD_16X4:
			address += (0x10 + column - 1);
     730:	9f e0       	ldi	r25, 0x0F	; 15
     732:	94 0f       	add	r25, r20
			break;
     734:	25 c0       	rjmp	.+74     	; 0x780 <lcdCursorGoTo+0x10c>
		case LCD_20X4:
			address += (0x14 + column - 1);
     736:	93 e1       	ldi	r25, 0x13	; 19
     738:	94 0f       	add	r25, r20
			break;
     73a:	22 c0       	rjmp	.+68     	; 0x780 <lcdCursorGoTo+0x10c>
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else {
		switch(lcd->size) {
     73c:	19 96       	adiw	r26, 0x09	; 9
     73e:	9c 91       	ld	r25, X
     740:	19 97       	sbiw	r26, 0x09	; 9
     742:	92 95       	swap	r25
     744:	96 95       	lsr	r25
     746:	96 95       	lsr	r25
     748:	93 70       	andi	r25, 0x03	; 3
     74a:	1a 96       	adiw	r26, 0x0a	; 10
     74c:	8c 91       	ld	r24, X
     74e:	1a 97       	sbiw	r26, 0x0a	; 10
     750:	87 70       	andi	r24, 0x07	; 7
     752:	88 0f       	add	r24, r24
     754:	88 0f       	add	r24, r24
     756:	89 2b       	or	r24, r25
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	82 31       	cpi	r24, 0x12	; 18
     75e:	91 05       	cpc	r25, r1
     760:	e0 f5       	brcc	.+120    	; 0x7da <lcdCursorGoTo+0x166>
     762:	81 5a       	subi	r24, 0xA1	; 161
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
		case LCD_20X2:
		case LCD_24X2:
		case LCD_30X2:
		case LCD_32X2:
		case LCD_40X2:
			return LCD_UNSUPPORTED_PARAMETER;
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	08 95       	ret
		case LCD_12X4:
			address += (0x4C + column - 1);
     770:	9b e4       	ldi	r25, 0x4B	; 75
     772:	94 0f       	add	r25, r20
			break;
     774:	05 c0       	rjmp	.+10     	; 0x780 <lcdCursorGoTo+0x10c>
		case LCD_16X4:
			address += (0x50 + column - 1);
     776:	9f e4       	ldi	r25, 0x4F	; 79
     778:	94 0f       	add	r25, r20
			break;
     77a:	02 c0       	rjmp	.+4      	; 0x780 <lcdCursorGoTo+0x10c>
		case LCD_20X4:
			address += (0x54 + column - 1);
     77c:	93 e5       	ldi	r25, 0x53	; 83
     77e:	94 0f       	add	r25, r20
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	}

	lcd->cursorLine = line - 1;
     780:	61 50       	subi	r22, 0x01	; 1
     782:	63 70       	andi	r22, 0x03	; 3
     784:	1b 96       	adiw	r26, 0x0b	; 11
     786:	8c 91       	ld	r24, X
     788:	1b 97       	sbiw	r26, 0x0b	; 11
     78a:	60 fb       	bst	r22, 0
     78c:	87 f9       	bld	r24, 7
     78e:	1b 96       	adiw	r26, 0x0b	; 11
     790:	8c 93       	st	X, r24
     792:	1b 97       	sbiw	r26, 0x0b	; 11
     794:	66 95       	lsr	r22
     796:	1c 96       	adiw	r26, 0x0c	; 12
     798:	8c 91       	ld	r24, X
     79a:	1c 97       	sbiw	r26, 0x0c	; 12
     79c:	8e 7f       	andi	r24, 0xFE	; 254
     79e:	86 2b       	or	r24, r22
     7a0:	1c 96       	adiw	r26, 0x0c	; 12
     7a2:	8c 93       	st	X, r24
     7a4:	1c 97       	sbiw	r26, 0x0c	; 12
	lcd->cursorColumn = column - 1;
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	84 0f       	add	r24, r20
     7aa:	8f 73       	andi	r24, 0x3F	; 63
     7ac:	88 0f       	add	r24, r24
     7ae:	1b 96       	adiw	r26, 0x0b	; 11
     7b0:	4c 91       	ld	r20, X
     7b2:	1b 97       	sbiw	r26, 0x0b	; 11
     7b4:	41 78       	andi	r20, 0x81	; 129
     7b6:	48 2b       	or	r20, r24
     7b8:	1b 96       	adiw	r26, 0x0b	; 11
     7ba:	4c 93       	st	X, r20
     7bc:	1b 97       	sbiw	r26, 0x0b	; 11

	return lcdWriteCommand(lcd, (LCD_DDRAM_ADRESS | address));
     7be:	69 2f       	mov	r22, r25
     7c0:	60 68       	ori	r22, 0x80	; 128
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>
     7c8:	08 95       	ret
lcdResult_t lcdCursorGoTo(volatile lcdConfiguration_t * lcd, uint8 line, uint8 column)
{
	uint8 address = 0x00;

	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	08 95       	ret
		case LCD_16X4:
		case LCD_20X4:
			address += (column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	08 95       	ret
		case LCD_16X4:
		case LCD_20X4:
			address += (0x40 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	08 95       	ret
			break;
		case LCD_20X4:
			address += (0x14 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	08 95       	ret
			break;
		case LCD_20X4:
			address += (0x54 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     7da:	83 e0       	ldi	r24, 0x03	; 3

	lcd->cursorLine = line - 1;
	lcd->cursorColumn = column - 1;

	return lcdWriteCommand(lcd, (LCD_DDRAM_ADRESS | address));
}
     7dc:	08 95       	ret

000007de <lcdCursorMoveNextLine>:

lcdResult_t lcdCursorMoveNextLine(volatile lcdConfiguration_t * lcd)
{
	uint8 line = 0;

	if(lcd->initialized == FALSE) {
     7de:	dc 01       	movw	r26, r24
     7e0:	1c 96       	adiw	r26, 0x0c	; 12
     7e2:	2c 91       	ld	r18, X
     7e4:	1c 97       	sbiw	r26, 0x0c	; 12
     7e6:	23 ff       	sbrs	r18, 3
     7e8:	50 c0       	rjmp	.+160    	; 0x88a <lcdCursorMoveNextLine+0xac>
		return LCD_NOT_INITIALIZED;
	}

	switch(lcd->size) {
     7ea:	19 96       	adiw	r26, 0x09	; 9
     7ec:	2c 91       	ld	r18, X
     7ee:	19 97       	sbiw	r26, 0x09	; 9
     7f0:	22 95       	swap	r18
     7f2:	26 95       	lsr	r18
     7f4:	26 95       	lsr	r18
     7f6:	23 70       	andi	r18, 0x03	; 3
     7f8:	1a 96       	adiw	r26, 0x0a	; 10
     7fa:	ec 91       	ld	r30, X
     7fc:	e7 70       	andi	r30, 0x07	; 7
     7fe:	ee 0f       	add	r30, r30
     800:	ee 0f       	add	r30, r30
     802:	e2 2b       	or	r30, r18
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	e2 31       	cpi	r30, 0x12	; 18
     80a:	f1 05       	cpc	r31, r1
     80c:	08 f0       	brcs	.+2      	; 0x810 <lcdCursorMoveNextLine+0x32>
     80e:	3f c0       	rjmp	.+126    	; 0x88e <lcdCursorMoveNextLine+0xb0>
     810:	ef 58       	subi	r30, 0x8F	; 143
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
	case LCD_16X1:
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		return lcdCursorGoTo(lcd, (line + 1), 1);
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	0e 94 3a 03 	call	0x674	; 0x674 <lcdCursorGoTo>
     820:	08 95       	ret
	case LCD_20X2:
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		line = (lcd->cursorLine == 1) ? 0 : 1;
     822:	fc 01       	movw	r30, r24
     824:	33 85       	ldd	r19, Z+11	; 0x0b
     826:	33 1f       	adc	r19, r19
     828:	33 27       	eor	r19, r19
     82a:	33 1f       	adc	r19, r19
     82c:	24 85       	ldd	r18, Z+12	; 0x0c
     82e:	21 70       	andi	r18, 0x01	; 1
     830:	22 0f       	add	r18, r18
     832:	23 2b       	or	r18, r19
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	21 30       	cpi	r18, 0x01	; 1
     838:	09 f4       	brne	.+2      	; 0x83c <lcdCursorMoveNextLine+0x5e>
     83a:	60 e0       	ldi	r22, 0x00	; 0
		return lcdCursorGoTo(lcd, (line + 1), 1);
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	0e 94 3a 03 	call	0x674	; 0x674 <lcdCursorGoTo>
     844:	08 95       	ret
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		line = (lcd->cursorLine == 3) ? 0 : (lcd->cursorLine + 1);
     846:	dc 01       	movw	r26, r24
     848:	1b 96       	adiw	r26, 0x0b	; 11
     84a:	3c 91       	ld	r19, X
     84c:	1b 97       	sbiw	r26, 0x0b	; 11
     84e:	33 1f       	adc	r19, r19
     850:	33 27       	eor	r19, r19
     852:	33 1f       	adc	r19, r19
     854:	1c 96       	adiw	r26, 0x0c	; 12
     856:	2c 91       	ld	r18, X
     858:	1c 97       	sbiw	r26, 0x0c	; 12
     85a:	21 70       	andi	r18, 0x01	; 1
     85c:	22 0f       	add	r18, r18
     85e:	23 2b       	or	r18, r19
     860:	23 30       	cpi	r18, 0x03	; 3
     862:	69 f0       	breq	.+26     	; 0x87e <lcdCursorMoveNextLine+0xa0>
     864:	1b 96       	adiw	r26, 0x0b	; 11
     866:	2c 91       	ld	r18, X
     868:	1b 97       	sbiw	r26, 0x0b	; 11
     86a:	22 1f       	adc	r18, r18
     86c:	22 27       	eor	r18, r18
     86e:	22 1f       	adc	r18, r18
     870:	1c 96       	adiw	r26, 0x0c	; 12
     872:	6c 91       	ld	r22, X
     874:	61 70       	andi	r22, 0x01	; 1
     876:	66 0f       	add	r22, r22
     878:	62 2b       	or	r22, r18
     87a:	6f 5f       	subi	r22, 0xFF	; 255
     87c:	01 c0       	rjmp	.+2      	; 0x880 <lcdCursorMoveNextLine+0xa2>
     87e:	60 e0       	ldi	r22, 0x00	; 0
		return lcdCursorGoTo(lcd, (line + 1), 1);
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	0e 94 3a 03 	call	0x674	; 0x674 <lcdCursorGoTo>
     888:	08 95       	ret
lcdResult_t lcdCursorMoveNextLine(volatile lcdConfiguration_t * lcd)
{
	uint8 line = 0;

	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     88a:	87 e0       	ldi	r24, 0x07	; 7
     88c:	08 95       	ret
	case LCD_16X4:
	case LCD_20X4:
		line = (lcd->cursorLine == 3) ? 0 : (lcd->cursorLine + 1);
		return lcdCursorGoTo(lcd, (line + 1), 1);
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
     88e:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     890:	08 95       	ret

00000892 <lcdFunctionSet8Bits>:
 *				command		Command to be sent to LCD
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdFunctionSet8Bits(volatile lcdConfiguration_t * lcd, uint8 command)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	fc 01       	movw	r30, r24
	clrBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
     898:	a7 81       	ldd	r26, Z+7	; 0x07
     89a:	b0 85       	ldd	r27, Z+8	; 0x08
     89c:	4c 91       	ld	r20, X
     89e:	21 85       	ldd	r18, Z+9	; 0x09
     8a0:	27 70       	andi	r18, 0x07	; 7
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	ec 01       	movw	r28, r24
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <lcdFunctionSet8Bits+0x1c>
     8aa:	cc 0f       	add	r28, r28
     8ac:	dd 1f       	adc	r29, r29
     8ae:	2a 95       	dec	r18
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <lcdFunctionSet8Bits+0x18>
     8b2:	9e 01       	movw	r18, r28
     8b4:	20 95       	com	r18
     8b6:	24 23       	and	r18, r20
     8b8:	2c 93       	st	X, r18
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
     8ba:	a7 81       	ldd	r26, Z+7	; 0x07
     8bc:	b0 85       	ldd	r27, Z+8	; 0x08
     8be:	4c 91       	ld	r20, X
     8c0:	21 85       	ldd	r18, Z+9	; 0x09
     8c2:	26 95       	lsr	r18
     8c4:	26 95       	lsr	r18
     8c6:	26 95       	lsr	r18
     8c8:	27 70       	andi	r18, 0x07	; 7
     8ca:	ec 01       	movw	r28, r24
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <lcdFunctionSet8Bits+0x40>
     8ce:	cc 0f       	add	r28, r28
     8d0:	dd 1f       	adc	r29, r29
     8d2:	2a 95       	dec	r18
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <lcdFunctionSet8Bits+0x3c>
     8d6:	9e 01       	movw	r18, r28
     8d8:	20 95       	com	r18
     8da:	24 23       	and	r18, r20
     8dc:	2c 93       	st	X, r18
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data
     8de:	a2 81       	ldd	r26, Z+2	; 0x02
     8e0:	b3 81       	ldd	r27, Z+3	; 0x03
     8e2:	7c 91       	ld	r23, X
     8e4:	24 81       	ldd	r18, Z+4	; 0x04
     8e6:	27 70       	andi	r18, 0x07	; 7
     8e8:	4f e0       	ldi	r20, 0x0F	; 15
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	ea 01       	movw	r28, r20
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <lcdFunctionSet8Bits+0x62>
     8f0:	cc 0f       	add	r28, r28
     8f2:	dd 1f       	adc	r29, r29
     8f4:	2a 95       	dec	r18
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <lcdFunctionSet8Bits+0x5e>
     8f8:	9e 01       	movw	r18, r28
     8fa:	20 95       	com	r18
     8fc:	27 23       	and	r18, r23
     8fe:	2c 93       	st	X, r18
	*(lcd->dataPORT) |= ((command >> 4) << lcd->dataFirst);
     900:	a2 81       	ldd	r26, Z+2	; 0x02
     902:	b3 81       	ldd	r27, Z+3	; 0x03
     904:	2c 91       	ld	r18, X
     906:	34 81       	ldd	r19, Z+4	; 0x04
     908:	37 70       	andi	r19, 0x07	; 7
     90a:	62 95       	swap	r22
     90c:	6f 70       	andi	r22, 0x0F	; 15
     90e:	01 c0       	rjmp	.+2      	; 0x912 <__stack+0x13>
     910:	66 0f       	add	r22, r22
     912:	3a 95       	dec	r19
     914:	ea f7       	brpl	.-6      	; 0x910 <__stack+0x11>
     916:	62 2b       	or	r22, r18
     918:	6c 93       	st	X, r22
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     91a:	a7 81       	ldd	r26, Z+7	; 0x07
     91c:	b0 85       	ldd	r27, Z+8	; 0x08
     91e:	3c 91       	ld	r19, X
     920:	21 85       	ldd	r18, Z+9	; 0x09
     922:	26 95       	lsr	r18
     924:	26 95       	lsr	r18
     926:	26 95       	lsr	r18
     928:	27 70       	andi	r18, 0x07	; 7
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	2a 95       	dec	r18
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0x2d>
     934:	83 2b       	or	r24, r19
     936:	8c 93       	st	X, r24
     938:	d5 e0       	ldi	r29, 0x05	; 5
     93a:	da 95       	dec	r29
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x3b>
     93e:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     940:	a7 81       	ldd	r26, Z+7	; 0x07
     942:	b0 85       	ldd	r27, Z+8	; 0x08
     944:	4c 91       	ld	r20, X
     946:	81 85       	ldd	r24, Z+9	; 0x09
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	86 95       	lsr	r24
     94e:	87 70       	andi	r24, 0x07	; 7
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	b9 01       	movw	r22, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	cb 01       	movw	r24, r22
     962:	80 95       	com	r24
     964:	84 23       	and	r24, r20
     966:	8c 93       	st	X, r24
     968:	75 ed       	ldi	r23, 0xD5	; 213
     96a:	7a 95       	dec	r23
     96c:	f1 f7       	brne	.-4      	; 0x96a <__stack+0x6b>
     96e:	00 00       	nop
	_delay_us(40);

	return LCD_OK;
}
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <lcdInit>:
 *				LCD_CONTROL_PORT_NOT_CONFIGURED
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdInit(volatile lcdConfiguration_t * lcd, lcdSize_t size, lcdFont_t font)
{
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ec 01       	movw	r28, r24
     980:	86 2f       	mov	r24, r22
	uint8 command = 0;
	uint8 lines = 0;

	// LCD font
	switch(font) {
     982:	44 23       	and	r20, r20
     984:	19 f0       	breq	.+6      	; 0x98c <lcdInit+0x14>
     986:	41 30       	cpi	r20, 0x01	; 1
     988:	29 f0       	breq	.+10     	; 0x994 <lcdInit+0x1c>
     98a:	11 c1       	rjmp	.+546    	; 0xbae <lcdInit+0x236>
	case LCD_FONT_5X8:
		lcd->functionFontSize = LCD_FONT_5X8;
     98c:	9a 85       	ldd	r25, Y+10	; 0x0a
     98e:	97 7f       	andi	r25, 0xF7	; 247
     990:	9a 87       	std	Y+10, r25	; 0x0a
		break;
     992:	03 c0       	rjmp	.+6      	; 0x99a <lcdInit+0x22>
	case LCD_FONT_5X10:
		lcd->functionFontSize = LCD_FONT_5X10;
     994:	9a 85       	ldd	r25, Y+10	; 0x0a
     996:	98 60       	ori	r25, 0x08	; 8
     998:	9a 87       	std	Y+10, r25	; 0x0a
	default:
		return LCD_UNSUPPORTED_FONT_SIZE;
	}

	// LCD size
	switch(size) {
     99a:	48 2f       	mov	r20, r24
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	fa 01       	movw	r30, r20
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	e2 31       	cpi	r30, 0x12	; 18
     9a4:	f1 05       	cpc	r31, r1
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <lcdInit+0x32>
     9a8:	04 c1       	rjmp	.+520    	; 0xbb2 <lcdInit+0x23a>
     9aa:	ed 57       	subi	r30, 0x7D	; 125
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		lines = 1;
		lcd->size = size;
     9b2:	98 2f       	mov	r25, r24
     9b4:	9f 71       	andi	r25, 0x1F	; 31
     9b6:	82 95       	swap	r24
     9b8:	88 0f       	add	r24, r24
     9ba:	88 0f       	add	r24, r24
     9bc:	80 7c       	andi	r24, 0xC0	; 192
     9be:	29 85       	ldd	r18, Y+9	; 0x09
     9c0:	2f 73       	andi	r18, 0x3F	; 63
     9c2:	82 2b       	or	r24, r18
     9c4:	89 87       	std	Y+9, r24	; 0x09
     9c6:	96 95       	lsr	r25
     9c8:	96 95       	lsr	r25
     9ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     9cc:	88 7f       	andi	r24, 0xF8	; 248
     9ce:	89 2b       	or	r24, r25
     9d0:	8a 87       	std	Y+10, r24	; 0x0a
	case LCD_8X1:
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		lines = 1;
     9d2:	11 e0       	ldi	r17, 0x01	; 1
		lcd->size = size;
		break;
     9d4:	23 c0       	rjmp	.+70     	; 0xa1c <lcdInit+0xa4>
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		lines = 2;
		lcd->size = size;
     9d6:	98 2f       	mov	r25, r24
     9d8:	9f 71       	andi	r25, 0x1F	; 31
     9da:	82 95       	swap	r24
     9dc:	88 0f       	add	r24, r24
     9de:	88 0f       	add	r24, r24
     9e0:	80 7c       	andi	r24, 0xC0	; 192
     9e2:	29 85       	ldd	r18, Y+9	; 0x09
     9e4:	2f 73       	andi	r18, 0x3F	; 63
     9e6:	82 2b       	or	r24, r18
     9e8:	89 87       	std	Y+9, r24	; 0x09
     9ea:	96 95       	lsr	r25
     9ec:	96 95       	lsr	r25
     9ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     9f0:	88 7f       	andi	r24, 0xF8	; 248
     9f2:	89 2b       	or	r24, r25
     9f4:	8a 87       	std	Y+10, r24	; 0x0a
	case LCD_20X2:
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		lines = 2;
     9f6:	12 e0       	ldi	r17, 0x02	; 2
		lcd->size = size;
		break;
     9f8:	11 c0       	rjmp	.+34     	; 0xa1c <lcdInit+0xa4>
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		lines = 4;
		lcd->size = size;
     9fa:	98 2f       	mov	r25, r24
     9fc:	9f 71       	andi	r25, 0x1F	; 31
     9fe:	82 95       	swap	r24
     a00:	88 0f       	add	r24, r24
     a02:	88 0f       	add	r24, r24
     a04:	80 7c       	andi	r24, 0xC0	; 192
     a06:	29 85       	ldd	r18, Y+9	; 0x09
     a08:	2f 73       	andi	r18, 0x3F	; 63
     a0a:	82 2b       	or	r24, r18
     a0c:	89 87       	std	Y+9, r24	; 0x09
     a0e:	96 95       	lsr	r25
     a10:	96 95       	lsr	r25
     a12:	8a 85       	ldd	r24, Y+10	; 0x0a
     a14:	88 7f       	andi	r24, 0xF8	; 248
     a16:	89 2b       	or	r24, r25
     a18:	8a 87       	std	Y+10, r24	; 0x0a
		lcd->size = size;
		break;
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		lines = 4;
     a1a:	14 e0       	ldi	r17, 0x04	; 4
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
	}

	// I/O initialization
	if(lcd->dataPortConfigured == FALSE) {
     a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a1e:	81 ff       	sbrs	r24, 1
     a20:	ca c0       	rjmp	.+404    	; 0xbb6 <lcdInit+0x23e>
		return LCD_DATA_PORT_NOT_CONFIGURED;
	}
	if(lcd->controlPortConfigured == FALSE) {
     a22:	8c 85       	ldd	r24, Y+12	; 0x0c
     a24:	82 ff       	sbrs	r24, 2
     a26:	c9 c0       	rjmp	.+402    	; 0xbba <lcdInit+0x242>
		return LCD_CONTROL_PORT_NOT_CONFIGURED;
	}
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);
     a28:	ea 81       	ldd	r30, Y+2	; 0x02
     a2a:	fb 81       	ldd	r31, Y+3	; 0x03
     a2c:	40 81       	ld	r20, Z
     a2e:	2c 81       	ldd	r18, Y+4	; 0x04
     a30:	27 70       	andi	r18, 0x07	; 7
     a32:	8f e0       	ldi	r24, 0x0F	; 15
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	bc 01       	movw	r22, r24
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <lcdInit+0xc6>
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	2a 95       	dec	r18
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <lcdInit+0xc2>
     a42:	9b 01       	movw	r18, r22
     a44:	20 95       	com	r18
     a46:	24 23       	and	r18, r20
     a48:	20 83       	st	Z, r18
	setMask(*(lcd->dataDDR), 0x0F, lcd->dataFirst);
     a4a:	e8 81       	ld	r30, Y
     a4c:	f9 81       	ldd	r31, Y+1	; 0x01
     a4e:	20 81       	ld	r18, Z
     a50:	3c 81       	ldd	r19, Y+4	; 0x04
     a52:	37 70       	andi	r19, 0x07	; 7
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <lcdInit+0xe2>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	3a 95       	dec	r19
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <lcdInit+0xde>
     a5e:	82 2b       	or	r24, r18
     a60:	80 83       	st	Z, r24
	clrBit(*(lcd->controlPORT), lcd->controlE);
     a62:	ef 81       	ldd	r30, Y+7	; 0x07
     a64:	f8 85       	ldd	r31, Y+8	; 0x08
     a66:	40 81       	ld	r20, Z
     a68:	29 85       	ldd	r18, Y+9	; 0x09
     a6a:	26 95       	lsr	r18
     a6c:	26 95       	lsr	r18
     a6e:	26 95       	lsr	r18
     a70:	27 70       	andi	r18, 0x07	; 7
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	bc 01       	movw	r22, r24
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <lcdInit+0x106>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	2a 95       	dec	r18
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <lcdInit+0x102>
     a82:	9b 01       	movw	r18, r22
     a84:	20 95       	com	r18
     a86:	24 23       	and	r18, r20
     a88:	20 83       	st	Z, r18
	setBit(*(lcd->controlDDR), lcd->controlE);
     a8a:	ed 81       	ldd	r30, Y+5	; 0x05
     a8c:	fe 81       	ldd	r31, Y+6	; 0x06
     a8e:	40 81       	ld	r20, Z
     a90:	39 85       	ldd	r19, Y+9	; 0x09
     a92:	36 95       	lsr	r19
     a94:	36 95       	lsr	r19
     a96:	36 95       	lsr	r19
     a98:	37 70       	andi	r19, 0x07	; 7
     a9a:	bc 01       	movw	r22, r24
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <lcdInit+0x12a>
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	3a 95       	dec	r19
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <lcdInit+0x126>
     aa6:	9b 01       	movw	r18, r22
     aa8:	24 2b       	or	r18, r20
     aaa:	20 83       	st	Z, r18
	clrBit(*(lcd->controlPORT), lcd->controlRS);
     aac:	ef 81       	ldd	r30, Y+7	; 0x07
     aae:	f8 85       	ldd	r31, Y+8	; 0x08
     ab0:	40 81       	ld	r20, Z
     ab2:	29 85       	ldd	r18, Y+9	; 0x09
     ab4:	27 70       	andi	r18, 0x07	; 7
     ab6:	bc 01       	movw	r22, r24
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <lcdInit+0x146>
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	2a 95       	dec	r18
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <lcdInit+0x142>
     ac2:	9b 01       	movw	r18, r22
     ac4:	20 95       	com	r18
     ac6:	24 23       	and	r18, r20
     ac8:	20 83       	st	Z, r18
	setBit(*(lcd->controlDDR), lcd->controlRS);
     aca:	ed 81       	ldd	r30, Y+5	; 0x05
     acc:	fe 81       	ldd	r31, Y+6	; 0x06
     ace:	20 81       	ld	r18, Z
     ad0:	39 85       	ldd	r19, Y+9	; 0x09
     ad2:	37 70       	andi	r19, 0x07	; 7
     ad4:	02 c0       	rjmp	.+4      	; 0xada <lcdInit+0x162>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	3a 95       	dec	r19
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <lcdInit+0x15e>
     ade:	82 2b       	or	r24, r18
     ae0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	8f e5       	ldi	r24, 0x5F	; 95
     ae4:	9a ee       	ldi	r25, 0xEA	; 234
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <lcdInit+0x16e>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <lcdInit+0x174>
     aec:	00 00       	nop

	// Reset the controller, must be sent 3 times
	_delay_ms(15);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
     aee:	60 e3       	ldi	r22, 0x30	; 48
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 49 04 	call	0x892	; 0x892 <lcdFunctionSet8Bits>
     af6:	8f e1       	ldi	r24, 0x1F	; 31
     af8:	9e e4       	ldi	r25, 0x4E	; 78
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcdInit+0x182>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <lcdInit+0x188>
     b00:	00 00       	nop
	_delay_ms(5);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
     b02:	60 e3       	ldi	r22, 0x30	; 48
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 49 04 	call	0x892	; 0x892 <lcdFunctionSet8Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0a:	8f ee       	ldi	r24, 0xEF	; 239
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <lcdInit+0x196>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <lcdInit+0x19c>
     b14:	00 00       	nop
	_delay_us(60);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
     b16:	60 e3       	ldi	r22, 0x30	; 48
     b18:	ce 01       	movw	r24, r28
     b1a:	0e 94 49 04 	call	0x892	; 0x892 <lcdFunctionSet8Bits>
     b1e:	8f ee       	ldi	r24, 0xEF	; 239
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <lcdInit+0x1aa>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <lcdInit+0x1b0>
     b28:	00 00       	nop
	_delay_us(60);

	// Configures the LCD to 4 bits interface
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_SET | LCD_FUNCTION_4_BITS);
     b2a:	60 e2       	ldi	r22, 0x20	; 32
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 49 04 	call	0x892	; 0x892 <lcdFunctionSet8Bits>

	// Function set
	command = LCD_FUNCTION_SET | LCD_FUNCTION_4_BITS;
	if(lcd->functionFontSize == LCD_FONT_5X8) {
     b32:	8a 85       	ldd	r24, Y+10	; 0x0a
		command |= LCD_FUNCTION_5x8_FONT;
	}
	if(lcd->functionFontSize == LCD_FONT_5X10) {
     b34:	8a 85       	ldd	r24, Y+10	; 0x0a
     b36:	83 fd       	sbrc	r24, 3
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <lcdInit+0x1c6>
     b3a:	60 e2       	ldi	r22, 0x20	; 32
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <lcdInit+0x1c8>
		command |= LCD_FUNCTION_5x10_FONT;
     b3e:	64 e2       	ldi	r22, 0x24	; 36
	}
	if(lines == 1) {
		command |= LCD_FUNCTION_1_LINE;
	}
	if((lines == 2) || (lines == 4)) {
     b40:	12 30       	cpi	r17, 0x02	; 2
     b42:	11 f0       	breq	.+4      	; 0xb48 <lcdInit+0x1d0>
     b44:	14 30       	cpi	r17, 0x04	; 4
     b46:	09 f4       	brne	.+2      	; 0xb4a <lcdInit+0x1d2>
		command |= LCD_FUNCTION_2_LINES;
     b48:	68 60       	ori	r22, 0x08	; 8
	}
	lcdWriteCommand(lcd, command);
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>

	// Turns display off
	lcdWriteCommand(lcd, LCD_DISPLAY_OFF);
     b50:	68 e0       	ldi	r22, 0x08	; 8
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>

	// Clears the screen
	lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>

	// Entry set
	command = LCD_ENTRY_SET;
	if(lcd->entryIncDec == LCD_INCREMENT) {
     b60:	8a 85       	ldd	r24, Y+10	; 0x0a
     b62:	84 ff       	sbrs	r24, 4
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <lcdInit+0x1f2>
		command |= LCD_ENTRY_INCREMENT;
     b66:	66 e0       	ldi	r22, 0x06	; 6
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <lcdInit+0x1f4>
	} else {
		command |= LCD_ENTRY_DECREMENT;
     b6a:	64 e0       	ldi	r22, 0x04	; 4
	}
	if(lcd->entryShiftDisplay == LCD_DISPLAY_SHIFT) {
     b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b6e:	85 fd       	sbrc	r24, 5
		command |= LCD_ENTRY_SHIFT;
     b70:	61 60       	ori	r22, 0x01	; 1
	} else {
		command |= LCD_ENTRY_OVERWRITE;
	}
	lcdWriteCommand(lcd, command);
     b72:	ce 01       	movw	r24, r28
     b74:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>

	// Turns display on
	lcdWriteCommand(lcd, LCD_DISPLAY_ON);
     b78:	6c e0       	ldi	r22, 0x0C	; 12
     b7a:	ce 01       	movw	r24, r28
     b7c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcdWriteCommand>

	// Updates the struct variables
	lcd->initialized = TRUE;
     b80:	8c 85       	ldd	r24, Y+12	; 0x0c
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 87       	std	Y+12, r24	; 0x0c
	lcd->displayOn = TRUE;
     b86:	8a 85       	ldd	r24, Y+10	; 0x0a
     b88:	80 64       	ori	r24, 0x40	; 64
     b8a:	8a 87       	std	Y+10, r24	; 0x0a
	lcd->cursorOn = FALSE;
     b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	8a 87       	std	Y+10, r24	; 0x0a
	lcd->cursorBlink = FALSE;
     b92:	8b 85       	ldd	r24, Y+11	; 0x0b
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	8b 87       	std	Y+11, r24	; 0x0b
	lcd->cursorLine = 0;
     b98:	8b 85       	ldd	r24, Y+11	; 0x0b
     b9a:	8f 77       	andi	r24, 0x7F	; 127
     b9c:	8b 87       	std	Y+11, r24	; 0x0b
     b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba0:	8e 7f       	andi	r24, 0xFE	; 254
     ba2:	8c 87       	std	Y+12, r24	; 0x0c
	lcd->cursorColumn = 0;
     ba4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ba6:	81 78       	andi	r24, 0x81	; 129
     ba8:	8b 87       	std	Y+11, r24	; 0x0b

	return LCD_OK;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	07 c0       	rjmp	.+14     	; 0xbbc <lcdInit+0x244>
		break;
	case LCD_FONT_5X10:
		lcd->functionFontSize = LCD_FONT_5X10;
		break;
	default:
		return LCD_UNSUPPORTED_FONT_SIZE;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <lcdInit+0x244>
	case LCD_20X4:
		lines = 4;
		lcd->size = size;
		break;
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <lcdInit+0x244>
	}

	// I/O initialization
	if(lcd->dataPortConfigured == FALSE) {
		return LCD_DATA_PORT_NOT_CONFIGURED;
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <lcdInit+0x244>
	}
	if(lcd->controlPortConfigured == FALSE) {
		return LCD_CONTROL_PORT_NOT_CONFIGURED;
     bba:	86 e0       	ldi	r24, 0x06	; 6
	lcd->cursorBlink = FALSE;
	lcd->cursorLine = 0;
	lcd->cursorColumn = 0;

	return LCD_OK;
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <lcdWriteCharacter>:
 * Returns:		LCD_NOT_INITIALIZED
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCharacter(volatile lcdConfiguration_t * lcd, uint8 character)
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	fc 01       	movw	r30, r24
	if(lcd->initialized == FALSE) {
     bca:	84 85       	ldd	r24, Z+12	; 0x0c
     bcc:	83 ff       	sbrs	r24, 3
     bce:	c8 c0       	rjmp	.+400    	; 0xd60 <lcdWriteCharacter+0x19c>
		return LCD_NOT_INITIALIZED;
	}

	if(lcd->cursorColumn < 40) {
     bd0:	83 85       	ldd	r24, Z+11	; 0x0b
     bd2:	86 95       	lsr	r24
     bd4:	8f 73       	andi	r24, 0x3F	; 63
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	88 97       	sbiw	r24, 0x28	; 40
     bda:	0c f0       	brlt	.+2      	; 0xbde <lcdWriteCharacter+0x1a>
     bdc:	c3 c0       	rjmp	.+390    	; 0xd64 <lcdWriteCharacter+0x1a0>
		setBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
     bde:	a7 81       	ldd	r26, Z+7	; 0x07
     be0:	b0 85       	ldd	r27, Z+8	; 0x08
     be2:	4c 91       	ld	r20, X
     be4:	21 85       	ldd	r18, Z+9	; 0x09
     be6:	27 70       	andi	r18, 0x07	; 7
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	ec 01       	movw	r28, r24
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <lcdWriteCharacter+0x30>
     bf0:	cc 0f       	add	r28, r28
     bf2:	dd 1f       	adc	r29, r29
     bf4:	2a 95       	dec	r18
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <lcdWriteCharacter+0x2c>
     bf8:	9e 01       	movw	r18, r28
     bfa:	24 2b       	or	r18, r20
     bfc:	2c 93       	st	X, r18
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
     bfe:	a7 81       	ldd	r26, Z+7	; 0x07
     c00:	b0 85       	ldd	r27, Z+8	; 0x08
     c02:	4c 91       	ld	r20, X
     c04:	21 85       	ldd	r18, Z+9	; 0x09
     c06:	26 95       	lsr	r18
     c08:	26 95       	lsr	r18
     c0a:	26 95       	lsr	r18
     c0c:	27 70       	andi	r18, 0x07	; 7
     c0e:	ec 01       	movw	r28, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <lcdWriteCharacter+0x52>
     c12:	cc 0f       	add	r28, r28
     c14:	dd 1f       	adc	r29, r29
     c16:	2a 95       	dec	r18
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <lcdWriteCharacter+0x4e>
     c1a:	9e 01       	movw	r18, r28
     c1c:	20 95       	com	r18
     c1e:	24 23       	and	r18, r20
     c20:	2c 93       	st	X, r18
		clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (higher nibble)
     c22:	a2 81       	ldd	r26, Z+2	; 0x02
     c24:	b3 81       	ldd	r27, Z+3	; 0x03
     c26:	7c 91       	ld	r23, X
     c28:	24 81       	ldd	r18, Z+4	; 0x04
     c2a:	27 70       	andi	r18, 0x07	; 7
     c2c:	4f e0       	ldi	r20, 0x0F	; 15
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	ea 01       	movw	r28, r20
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <lcdWriteCharacter+0x74>
     c34:	cc 0f       	add	r28, r28
     c36:	dd 1f       	adc	r29, r29
     c38:	2a 95       	dec	r18
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <lcdWriteCharacter+0x70>
     c3c:	9e 01       	movw	r18, r28
     c3e:	20 95       	com	r18
     c40:	27 23       	and	r18, r23
     c42:	2c 93       	st	X, r18
		*(lcd->dataPORT) |= ((character >> 4) << lcd->dataFirst);
     c44:	a2 81       	ldd	r26, Z+2	; 0x02
     c46:	b3 81       	ldd	r27, Z+3	; 0x03
     c48:	3c 91       	ld	r19, X
     c4a:	44 81       	ldd	r20, Z+4	; 0x04
     c4c:	47 70       	andi	r20, 0x07	; 7
     c4e:	26 2f       	mov	r18, r22
     c50:	22 95       	swap	r18
     c52:	2f 70       	andi	r18, 0x0F	; 15
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <lcdWriteCharacter+0x94>
     c56:	22 0f       	add	r18, r18
     c58:	4a 95       	dec	r20
     c5a:	ea f7       	brpl	.-6      	; 0xc56 <lcdWriteCharacter+0x92>
     c5c:	23 2b       	or	r18, r19
     c5e:	2c 93       	st	X, r18
		setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     c60:	a7 81       	ldd	r26, Z+7	; 0x07
     c62:	b0 85       	ldd	r27, Z+8	; 0x08
     c64:	3c 91       	ld	r19, X
     c66:	21 85       	ldd	r18, Z+9	; 0x09
     c68:	26 95       	lsr	r18
     c6a:	26 95       	lsr	r18
     c6c:	26 95       	lsr	r18
     c6e:	27 70       	andi	r18, 0x07	; 7
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <lcdWriteCharacter+0xb2>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	2a 95       	dec	r18
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <lcdWriteCharacter+0xae>
     c7a:	83 2b       	or	r24, r19
     c7c:	8c 93       	st	X, r24
     c7e:	d5 e0       	ldi	r29, 0x05	; 5
     c80:	da 95       	dec	r29
     c82:	f1 f7       	brne	.-4      	; 0xc80 <lcdWriteCharacter+0xbc>
     c84:	00 00       	nop
		_delay_us(1);
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     c86:	a7 81       	ldd	r26, Z+7	; 0x07
     c88:	b0 85       	ldd	r27, Z+8	; 0x08
     c8a:	4c 91       	ld	r20, X
     c8c:	81 85       	ldd	r24, Z+9	; 0x09
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	86 95       	lsr	r24
     c94:	87 70       	andi	r24, 0x07	; 7
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	e9 01       	movw	r28, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <lcdWriteCharacter+0xde>
     c9e:	cc 0f       	add	r28, r28
     ca0:	dd 1f       	adc	r29, r29
     ca2:	8a 95       	dec	r24
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <lcdWriteCharacter+0xda>
     ca6:	ce 01       	movw	r24, r28
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	d5 e0       	ldi	r29, 0x05	; 5
     cb0:	da 95       	dec	r29
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <lcdWriteCharacter+0xec>
     cb4:	00 00       	nop
		_delay_us(1);
		clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (lower nibble)
     cb6:	a2 81       	ldd	r26, Z+2	; 0x02
     cb8:	b3 81       	ldd	r27, Z+3	; 0x03
     cba:	4c 91       	ld	r20, X
     cbc:	84 81       	ldd	r24, Z+4	; 0x04
     cbe:	87 70       	andi	r24, 0x07	; 7
     cc0:	2f e0       	ldi	r18, 0x0F	; 15
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	e9 01       	movw	r28, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <lcdWriteCharacter+0x108>
     cc8:	cc 0f       	add	r28, r28
     cca:	dd 1f       	adc	r29, r29
     ccc:	8a 95       	dec	r24
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <lcdWriteCharacter+0x104>
     cd0:	ce 01       	movw	r24, r28
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
		*(lcd->dataPORT) |= ((character & 0x0F) << lcd->dataFirst);
     cd8:	a2 81       	ldd	r26, Z+2	; 0x02
     cda:	b3 81       	ldd	r27, Z+3	; 0x03
     cdc:	8c 91       	ld	r24, X
     cde:	94 81       	ldd	r25, Z+4	; 0x04
     ce0:	97 70       	andi	r25, 0x07	; 7
     ce2:	6f 70       	andi	r22, 0x0F	; 15
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <lcdWriteCharacter+0x124>
     ce6:	66 0f       	add	r22, r22
     ce8:	9a 95       	dec	r25
     cea:	ea f7       	brpl	.-6      	; 0xce6 <lcdWriteCharacter+0x122>
     cec:	68 2b       	or	r22, r24
     cee:	6c 93       	st	X, r22
		setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     cf0:	a7 81       	ldd	r26, Z+7	; 0x07
     cf2:	b0 85       	ldd	r27, Z+8	; 0x08
     cf4:	4c 91       	ld	r20, X
     cf6:	91 85       	ldd	r25, Z+9	; 0x09
     cf8:	96 95       	lsr	r25
     cfa:	96 95       	lsr	r25
     cfc:	96 95       	lsr	r25
     cfe:	97 70       	andi	r25, 0x07	; 7
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	b9 01       	movw	r22, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <lcdWriteCharacter+0x148>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	9a 95       	dec	r25
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <lcdWriteCharacter+0x144>
     d10:	cb 01       	movw	r24, r22
     d12:	84 2b       	or	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	75 e0       	ldi	r23, 0x05	; 5
     d18:	7a 95       	dec	r23
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <lcdWriteCharacter+0x154>
     d1c:	00 00       	nop
		_delay_us(1);
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     d1e:	a7 81       	ldd	r26, Z+7	; 0x07
     d20:	b0 85       	ldd	r27, Z+8	; 0x08
     d22:	4c 91       	ld	r20, X
     d24:	81 85       	ldd	r24, Z+9	; 0x09
     d26:	86 95       	lsr	r24
     d28:	86 95       	lsr	r24
     d2a:	86 95       	lsr	r24
     d2c:	87 70       	andi	r24, 0x07	; 7
     d2e:	e9 01       	movw	r28, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <lcdWriteCharacter+0x172>
     d32:	cc 0f       	add	r28, r28
     d34:	dd 1f       	adc	r29, r29
     d36:	8a 95       	dec	r24
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <lcdWriteCharacter+0x16e>
     d3a:	ce 01       	movw	r24, r28
     d3c:	80 95       	com	r24
     d3e:	84 23       	and	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	d5 ed       	ldi	r29, 0xD5	; 213
     d44:	da 95       	dec	r29
     d46:	f1 f7       	brne	.-4      	; 0xd44 <lcdWriteCharacter+0x180>
     d48:	00 00       	nop
		_delay_us(40);
		lcd->cursorColumn++;
     d4a:	93 85       	ldd	r25, Z+11	; 0x0b
     d4c:	96 95       	lsr	r25
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	9f 73       	andi	r25, 0x3F	; 63
     d52:	99 0f       	add	r25, r25
     d54:	83 85       	ldd	r24, Z+11	; 0x0b
     d56:	81 78       	andi	r24, 0x81	; 129
     d58:	89 2b       	or	r24, r25
     d5a:	83 87       	std	Z+11, r24	; 0x0b
	}

	return LCD_OK;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <lcdWriteCharacter+0x1a2>
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCharacter(volatile lcdConfiguration_t * lcd, uint8 character)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <lcdWriteCharacter+0x1a2>
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
		_delay_us(40);
		lcd->cursorColumn++;
	}

	return LCD_OK;
     d64:	80 e0       	ldi	r24, 0x00	; 0
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <lcdWriteStd>:
 * Returns:		0 (This function always returns 0)
 * Note:		This function must not be used outside this file
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
	uint8 columns = 0;
	uint8 i = 0;

	if(defaultDisplay->initialized == FALSE) {
     d74:	a0 91 2c 01 	lds	r26, 0x012C
     d78:	b0 91 2d 01 	lds	r27, 0x012D
     d7c:	1c 96       	adiw	r26, 0x0c	; 12
     d7e:	9c 91       	ld	r25, X
     d80:	1c 97       	sbiw	r26, 0x0c	; 12
     d82:	93 ff       	sbrs	r25, 3
     d84:	4d c0       	rjmp	.+154    	; 0xe20 <lcdWriteStd+0xb4>
		return FALSE;
	}

	switch(defaultDisplay->size) {
     d86:	19 96       	adiw	r26, 0x09	; 9
     d88:	9c 91       	ld	r25, X
     d8a:	19 97       	sbiw	r26, 0x09	; 9
     d8c:	92 95       	swap	r25
     d8e:	96 95       	lsr	r25
     d90:	96 95       	lsr	r25
     d92:	93 70       	andi	r25, 0x03	; 3
     d94:	1a 96       	adiw	r26, 0x0a	; 10
     d96:	2c 91       	ld	r18, X
     d98:	1a 97       	sbiw	r26, 0x0a	; 10
     d9a:	27 70       	andi	r18, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	22 0f       	add	r18, r18
     da0:	29 2b       	or	r18, r25
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	31 09       	sbc	r19, r1
     da8:	22 31       	cpi	r18, 0x12	; 18
     daa:	31 05       	cpc	r19, r1
     dac:	28 f4       	brcc	.+10     	; 0xdb8 <lcdWriteStd+0x4c>
     dae:	2b 56       	subi	r18, 0x6B	; 107
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	f9 01       	movw	r30, r18
     db4:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__tablejump2__>
 * Note:		This function must not be used outside this file
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
	uint8 columns = 0;
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	11 c0       	rjmp	.+34     	; 0xdde <lcdWriteStd+0x72>
	case LCD_8X1:
	case LCD_8X2:
		columns = 8;
		break;
	case LCD_10x2:
		columns = 10;
     dbc:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <lcdWriteStd+0x72>
	case LCD_12X2:
	case LCD_12X4:
		columns = 12;
     dc0:	1c e0       	ldi	r17, 0x0C	; 12
		break;
     dc2:	0d c0       	rjmp	.+26     	; 0xdde <lcdWriteStd+0x72>
	case LCD_16X1:
	case LCD_16X1b:
	case LCD_16X2:
	case LCD_16X4:
		columns = 16;
     dc4:	10 e1       	ldi	r17, 0x10	; 16
		break;
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <lcdWriteStd+0x72>
	case LCD_20X1:
	case LCD_20X2:
	case LCD_20X4:
		columns = 20;
     dc8:	14 e1       	ldi	r17, 0x14	; 20
		break;
     dca:	09 c0       	rjmp	.+18     	; 0xdde <lcdWriteStd+0x72>
	case LCD_24X1:
	case LCD_24X2:
		columns = 24;
     dcc:	18 e1       	ldi	r17, 0x18	; 24
		break;
     dce:	07 c0       	rjmp	.+14     	; 0xdde <lcdWriteStd+0x72>
	case LCD_30X2:
		columns = 30;
     dd0:	1e e1       	ldi	r17, 0x1E	; 30
		break;
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <lcdWriteStd+0x72>
	case LCD_32X2:
		columns = 32;
     dd4:	10 e2       	ldi	r17, 0x20	; 32
		break;
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <lcdWriteStd+0x72>
	case LCD_40X1:
	case LCD_40X2:
		columns = 40;
     dd8:	18 e2       	ldi	r17, 0x28	; 40
		break;
     dda:	01 c0       	rjmp	.+2      	; 0xdde <lcdWriteStd+0x72>
	}

	switch(defaultDisplay->size) {
	case LCD_8X1:
	case LCD_8X2:
		columns = 8;
     ddc:	18 e0       	ldi	r17, 0x08	; 8
	case LCD_40X2:
		columns = 40;
		break;
	}

	if(character == '\n') {
     dde:	8a 30       	cpi	r24, 0x0A	; 10
     de0:	d9 f4       	brne	.+54     	; 0xe18 <lcdWriteStd+0xac>
		for(i = defaultDisplay->cursorColumn; i < columns; i++) {
     de2:	1b 96       	adiw	r26, 0x0b	; 11
     de4:	0c 91       	ld	r16, X
     de6:	06 95       	lsr	r16
     de8:	0f 73       	andi	r16, 0x3F	; 63
     dea:	01 17       	cp	r16, r17
     dec:	70 f4       	brcc	.+28     	; 0xe0a <lcdWriteStd+0x9e>
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	d0 e0       	ldi	r29, 0x00	; 0
			lcdWriteCharacter(defaultDisplay, ' ');
     df2:	60 e2       	ldi	r22, 0x20	; 32
     df4:	80 91 2c 01 	lds	r24, 0x012C
     df8:	90 91 2d 01 	lds	r25, 0x012D
     dfc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <lcdWriteCharacter>
     e00:	21 96       	adiw	r28, 0x01	; 1
     e02:	8c 2f       	mov	r24, r28
     e04:	80 0f       	add	r24, r16
		columns = 40;
		break;
	}

	if(character == '\n') {
		for(i = defaultDisplay->cursorColumn; i < columns; i++) {
     e06:	81 17       	cp	r24, r17
     e08:	a0 f3       	brcs	.-24     	; 0xdf2 <lcdWriteStd+0x86>
			lcdWriteCharacter(defaultDisplay, ' ');
		}
		lcdCursorMoveNextLine(defaultDisplay);
     e0a:	80 91 2c 01 	lds	r24, 0x012C
     e0e:	90 91 2d 01 	lds	r25, 0x012D
     e12:	0e 94 ef 03 	call	0x7de	; 0x7de <lcdCursorMoveNextLine>
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <lcdWriteStd+0xb4>
	} else {
		lcdWriteCharacter(defaultDisplay, character);
     e18:	68 2f       	mov	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <lcdWriteCharacter>
	}

	return 0;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <__tablejump2__>:
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31

00000e32 <__tablejump__>:
     e32:	05 90       	lpm	r0, Z+
     e34:	f4 91       	lpm	r31, Z
     e36:	e0 2d       	mov	r30, r0
     e38:	09 94       	ijmp

00000e3a <printf>:
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e2       	ldi	r30, 0x23	; 35
     e40:	f7 e0       	ldi	r31, 0x07	; 7
     e42:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__prologue_saves__+0x20>
     e46:	fe 01       	movw	r30, r28
     e48:	35 96       	adiw	r30, 0x05	; 5
     e4a:	61 91       	ld	r22, Z+
     e4c:	71 91       	ld	r23, Z+
     e4e:	af 01       	movw	r20, r30
     e50:	80 91 33 01 	lds	r24, 0x0133
     e54:	90 91 34 01 	lds	r25, 0x0134
     e58:	0e 94 5e 07 	call	0xebc	; 0xebc <vfprintf>
     e5c:	e2 e0       	ldi	r30, 0x02	; 2
     e5e:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__epilogue_restores__+0x20>

00000e62 <puts>:
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	e0 91 33 01 	lds	r30, 0x0133
     e6e:	f0 91 34 01 	lds	r31, 0x0134
     e72:	23 81       	ldd	r18, Z+3	; 0x03
     e74:	21 ff       	sbrs	r18, 1
     e76:	1b c0       	rjmp	.+54     	; 0xeae <puts+0x4c>
     e78:	ec 01       	movw	r28, r24
     e7a:	00 e0       	ldi	r16, 0x00	; 0
     e7c:	10 e0       	ldi	r17, 0x00	; 0
     e7e:	89 91       	ld	r24, Y+
     e80:	60 91 33 01 	lds	r22, 0x0133
     e84:	70 91 34 01 	lds	r23, 0x0134
     e88:	db 01       	movw	r26, r22
     e8a:	18 96       	adiw	r26, 0x08	; 8
     e8c:	ed 91       	ld	r30, X+
     e8e:	fc 91       	ld	r31, X
     e90:	19 97       	sbiw	r26, 0x09	; 9
     e92:	88 23       	and	r24, r24
     e94:	31 f0       	breq	.+12     	; 0xea2 <puts+0x40>
     e96:	09 95       	icall
     e98:	89 2b       	or	r24, r25
     e9a:	89 f3       	breq	.-30     	; 0xe7e <puts+0x1c>
     e9c:	0f ef       	ldi	r16, 0xFF	; 255
     e9e:	1f ef       	ldi	r17, 0xFF	; 255
     ea0:	ee cf       	rjmp	.-36     	; 0xe7e <puts+0x1c>
     ea2:	8a e0       	ldi	r24, 0x0A	; 10
     ea4:	09 95       	icall
     ea6:	89 2b       	or	r24, r25
     ea8:	11 f4       	brne	.+4      	; 0xeae <puts+0x4c>
     eaa:	c8 01       	movw	r24, r16
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <puts+0x50>
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <vfprintf>:
     ebc:	ac e0       	ldi	r26, 0x0C	; 12
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e6       	ldi	r30, 0x64	; 100
     ec2:	f7 e0       	ldi	r31, 0x07	; 7
     ec4:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__prologue_saves__>
     ec8:	7c 01       	movw	r14, r24
     eca:	6b 01       	movw	r12, r22
     ecc:	8a 01       	movw	r16, r20
     ece:	fc 01       	movw	r30, r24
     ed0:	17 82       	std	Z+7, r1	; 0x07
     ed2:	16 82       	std	Z+6, r1	; 0x06
     ed4:	83 81       	ldd	r24, Z+3	; 0x03
     ed6:	81 ff       	sbrs	r24, 1
     ed8:	bd c1       	rjmp	.+890    	; 0x1254 <vfprintf+0x398>
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	4c 01       	movw	r8, r24
     ee0:	f7 01       	movw	r30, r14
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	f6 01       	movw	r30, r12
     ee6:	93 fd       	sbrc	r25, 3
     ee8:	85 91       	lpm	r24, Z+
     eea:	93 ff       	sbrs	r25, 3
     eec:	81 91       	ld	r24, Z+
     eee:	6f 01       	movw	r12, r30
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <vfprintf+0x3a>
     ef4:	ab c1       	rjmp	.+854    	; 0x124c <vfprintf+0x390>
     ef6:	85 32       	cpi	r24, 0x25	; 37
     ef8:	39 f4       	brne	.+14     	; 0xf08 <vfprintf+0x4c>
     efa:	93 fd       	sbrc	r25, 3
     efc:	85 91       	lpm	r24, Z+
     efe:	93 ff       	sbrs	r25, 3
     f00:	81 91       	ld	r24, Z+
     f02:	6f 01       	movw	r12, r30
     f04:	85 32       	cpi	r24, 0x25	; 37
     f06:	29 f4       	brne	.+10     	; 0xf12 <vfprintf+0x56>
     f08:	b7 01       	movw	r22, r14
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
     f10:	e7 cf       	rjmp	.-50     	; 0xee0 <vfprintf+0x24>
     f12:	51 2c       	mov	r5, r1
     f14:	31 2c       	mov	r3, r1
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	20 32       	cpi	r18, 0x20	; 32
     f1a:	a0 f4       	brcc	.+40     	; 0xf44 <vfprintf+0x88>
     f1c:	8b 32       	cpi	r24, 0x2B	; 43
     f1e:	69 f0       	breq	.+26     	; 0xf3a <vfprintf+0x7e>
     f20:	30 f4       	brcc	.+12     	; 0xf2e <vfprintf+0x72>
     f22:	80 32       	cpi	r24, 0x20	; 32
     f24:	59 f0       	breq	.+22     	; 0xf3c <vfprintf+0x80>
     f26:	83 32       	cpi	r24, 0x23	; 35
     f28:	69 f4       	brne	.+26     	; 0xf44 <vfprintf+0x88>
     f2a:	20 61       	ori	r18, 0x10	; 16
     f2c:	2c c0       	rjmp	.+88     	; 0xf86 <vfprintf+0xca>
     f2e:	8d 32       	cpi	r24, 0x2D	; 45
     f30:	39 f0       	breq	.+14     	; 0xf40 <vfprintf+0x84>
     f32:	80 33       	cpi	r24, 0x30	; 48
     f34:	39 f4       	brne	.+14     	; 0xf44 <vfprintf+0x88>
     f36:	21 60       	ori	r18, 0x01	; 1
     f38:	26 c0       	rjmp	.+76     	; 0xf86 <vfprintf+0xca>
     f3a:	22 60       	ori	r18, 0x02	; 2
     f3c:	24 60       	ori	r18, 0x04	; 4
     f3e:	23 c0       	rjmp	.+70     	; 0xf86 <vfprintf+0xca>
     f40:	28 60       	ori	r18, 0x08	; 8
     f42:	21 c0       	rjmp	.+66     	; 0xf86 <vfprintf+0xca>
     f44:	27 fd       	sbrc	r18, 7
     f46:	27 c0       	rjmp	.+78     	; 0xf96 <vfprintf+0xda>
     f48:	30 ed       	ldi	r19, 0xD0	; 208
     f4a:	38 0f       	add	r19, r24
     f4c:	3a 30       	cpi	r19, 0x0A	; 10
     f4e:	78 f4       	brcc	.+30     	; 0xf6e <vfprintf+0xb2>
     f50:	26 ff       	sbrs	r18, 6
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0xa4>
     f54:	fa e0       	ldi	r31, 0x0A	; 10
     f56:	5f 9e       	mul	r5, r31
     f58:	30 0d       	add	r19, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	53 2e       	mov	r5, r19
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <vfprintf+0xca>
     f60:	8a e0       	ldi	r24, 0x0A	; 10
     f62:	38 9e       	mul	r3, r24
     f64:	30 0d       	add	r19, r0
     f66:	11 24       	eor	r1, r1
     f68:	33 2e       	mov	r3, r19
     f6a:	20 62       	ori	r18, 0x20	; 32
     f6c:	0c c0       	rjmp	.+24     	; 0xf86 <vfprintf+0xca>
     f6e:	8e 32       	cpi	r24, 0x2E	; 46
     f70:	21 f4       	brne	.+8      	; 0xf7a <vfprintf+0xbe>
     f72:	26 fd       	sbrc	r18, 6
     f74:	6b c1       	rjmp	.+726    	; 0x124c <vfprintf+0x390>
     f76:	20 64       	ori	r18, 0x40	; 64
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <vfprintf+0xca>
     f7a:	8c 36       	cpi	r24, 0x6C	; 108
     f7c:	11 f4       	brne	.+4      	; 0xf82 <vfprintf+0xc6>
     f7e:	20 68       	ori	r18, 0x80	; 128
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <vfprintf+0xca>
     f82:	88 36       	cpi	r24, 0x68	; 104
     f84:	41 f4       	brne	.+16     	; 0xf96 <vfprintf+0xda>
     f86:	f6 01       	movw	r30, r12
     f88:	93 fd       	sbrc	r25, 3
     f8a:	85 91       	lpm	r24, Z+
     f8c:	93 ff       	sbrs	r25, 3
     f8e:	81 91       	ld	r24, Z+
     f90:	6f 01       	movw	r12, r30
     f92:	81 11       	cpse	r24, r1
     f94:	c1 cf       	rjmp	.-126    	; 0xf18 <vfprintf+0x5c>
     f96:	98 2f       	mov	r25, r24
     f98:	9f 7d       	andi	r25, 0xDF	; 223
     f9a:	95 54       	subi	r25, 0x45	; 69
     f9c:	93 30       	cpi	r25, 0x03	; 3
     f9e:	28 f4       	brcc	.+10     	; 0xfaa <vfprintf+0xee>
     fa0:	0c 5f       	subi	r16, 0xFC	; 252
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	ff e3       	ldi	r31, 0x3F	; 63
     fa6:	f9 83       	std	Y+1, r31	; 0x01
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <vfprintf+0x108>
     faa:	83 36       	cpi	r24, 0x63	; 99
     fac:	31 f0       	breq	.+12     	; 0xfba <vfprintf+0xfe>
     fae:	83 37       	cpi	r24, 0x73	; 115
     fb0:	71 f0       	breq	.+28     	; 0xfce <vfprintf+0x112>
     fb2:	83 35       	cpi	r24, 0x53	; 83
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <vfprintf+0xfc>
     fb6:	5b c0       	rjmp	.+182    	; 0x106e <vfprintf+0x1b2>
     fb8:	22 c0       	rjmp	.+68     	; 0xffe <vfprintf+0x142>
     fba:	f8 01       	movw	r30, r16
     fbc:	80 81       	ld	r24, Z
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	0e 5f       	subi	r16, 0xFE	; 254
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	44 24       	eor	r4, r4
     fc6:	43 94       	inc	r4
     fc8:	51 2c       	mov	r5, r1
     fca:	54 01       	movw	r10, r8
     fcc:	15 c0       	rjmp	.+42     	; 0xff8 <vfprintf+0x13c>
     fce:	38 01       	movw	r6, r16
     fd0:	f2 e0       	ldi	r31, 0x02	; 2
     fd2:	6f 0e       	add	r6, r31
     fd4:	71 1c       	adc	r7, r1
     fd6:	f8 01       	movw	r30, r16
     fd8:	a0 80       	ld	r10, Z
     fda:	b1 80       	ldd	r11, Z+1	; 0x01
     fdc:	26 ff       	sbrs	r18, 6
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <vfprintf+0x12a>
     fe0:	65 2d       	mov	r22, r5
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x12e>
     fe6:	6f ef       	ldi	r22, 0xFF	; 255
     fe8:	7f ef       	ldi	r23, 0xFF	; 255
     fea:	c5 01       	movw	r24, r10
     fec:	2c 87       	std	Y+12, r18	; 0x0c
     fee:	0e 94 3b 09 	call	0x1276	; 0x1276 <strnlen>
     ff2:	2c 01       	movw	r4, r24
     ff4:	83 01       	movw	r16, r6
     ff6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff8:	2f 77       	andi	r18, 0x7F	; 127
     ffa:	22 2e       	mov	r2, r18
     ffc:	17 c0       	rjmp	.+46     	; 0x102c <vfprintf+0x170>
     ffe:	38 01       	movw	r6, r16
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	6f 0e       	add	r6, r31
    1004:	71 1c       	adc	r7, r1
    1006:	f8 01       	movw	r30, r16
    1008:	a0 80       	ld	r10, Z
    100a:	b1 80       	ldd	r11, Z+1	; 0x01
    100c:	26 ff       	sbrs	r18, 6
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x15a>
    1010:	65 2d       	mov	r22, r5
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x15e>
    1016:	6f ef       	ldi	r22, 0xFF	; 255
    1018:	7f ef       	ldi	r23, 0xFF	; 255
    101a:	c5 01       	movw	r24, r10
    101c:	2c 87       	std	Y+12, r18	; 0x0c
    101e:	0e 94 30 09 	call	0x1260	; 0x1260 <strnlen_P>
    1022:	2c 01       	movw	r4, r24
    1024:	2c 85       	ldd	r18, Y+12	; 0x0c
    1026:	20 68       	ori	r18, 0x80	; 128
    1028:	22 2e       	mov	r2, r18
    102a:	83 01       	movw	r16, r6
    102c:	23 fc       	sbrc	r2, 3
    102e:	1b c0       	rjmp	.+54     	; 0x1066 <vfprintf+0x1aa>
    1030:	83 2d       	mov	r24, r3
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	48 16       	cp	r4, r24
    1036:	59 06       	cpc	r5, r25
    1038:	b0 f4       	brcc	.+44     	; 0x1066 <vfprintf+0x1aa>
    103a:	b7 01       	movw	r22, r14
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    1044:	3a 94       	dec	r3
    1046:	f4 cf       	rjmp	.-24     	; 0x1030 <vfprintf+0x174>
    1048:	f5 01       	movw	r30, r10
    104a:	27 fc       	sbrc	r2, 7
    104c:	85 91       	lpm	r24, Z+
    104e:	27 fe       	sbrs	r2, 7
    1050:	81 91       	ld	r24, Z+
    1052:	5f 01       	movw	r10, r30
    1054:	b7 01       	movw	r22, r14
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    105c:	31 10       	cpse	r3, r1
    105e:	3a 94       	dec	r3
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	4f 1a       	sub	r4, r31
    1064:	51 08       	sbc	r5, r1
    1066:	41 14       	cp	r4, r1
    1068:	51 04       	cpc	r5, r1
    106a:	71 f7       	brne	.-36     	; 0x1048 <vfprintf+0x18c>
    106c:	e5 c0       	rjmp	.+458    	; 0x1238 <vfprintf+0x37c>
    106e:	84 36       	cpi	r24, 0x64	; 100
    1070:	11 f0       	breq	.+4      	; 0x1076 <vfprintf+0x1ba>
    1072:	89 36       	cpi	r24, 0x69	; 105
    1074:	39 f5       	brne	.+78     	; 0x10c4 <vfprintf+0x208>
    1076:	f8 01       	movw	r30, r16
    1078:	27 ff       	sbrs	r18, 7
    107a:	07 c0       	rjmp	.+14     	; 0x108a <vfprintf+0x1ce>
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	0c 5f       	subi	r16, 0xFC	; 252
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	08 c0       	rjmp	.+16     	; 0x109a <vfprintf+0x1de>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	88 27       	eor	r24, r24
    1090:	77 fd       	sbrc	r23, 7
    1092:	80 95       	com	r24
    1094:	98 2f       	mov	r25, r24
    1096:	0e 5f       	subi	r16, 0xFE	; 254
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	2f 76       	andi	r18, 0x6F	; 111
    109c:	b2 2e       	mov	r11, r18
    109e:	97 ff       	sbrs	r25, 7
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <vfprintf+0x1f8>
    10a2:	90 95       	com	r25
    10a4:	80 95       	com	r24
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	20 68       	ori	r18, 0x80	; 128
    10b2:	b2 2e       	mov	r11, r18
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	a4 01       	movw	r20, r8
    10ba:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    10be:	a8 2e       	mov	r10, r24
    10c0:	a8 18       	sub	r10, r8
    10c2:	44 c0       	rjmp	.+136    	; 0x114c <vfprintf+0x290>
    10c4:	85 37       	cpi	r24, 0x75	; 117
    10c6:	29 f4       	brne	.+10     	; 0x10d2 <vfprintf+0x216>
    10c8:	2f 7e       	andi	r18, 0xEF	; 239
    10ca:	b2 2e       	mov	r11, r18
    10cc:	2a e0       	ldi	r18, 0x0A	; 10
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	25 c0       	rjmp	.+74     	; 0x111c <vfprintf+0x260>
    10d2:	f2 2f       	mov	r31, r18
    10d4:	f9 7f       	andi	r31, 0xF9	; 249
    10d6:	bf 2e       	mov	r11, r31
    10d8:	8f 36       	cpi	r24, 0x6F	; 111
    10da:	c1 f0       	breq	.+48     	; 0x110c <vfprintf+0x250>
    10dc:	18 f4       	brcc	.+6      	; 0x10e4 <vfprintf+0x228>
    10de:	88 35       	cpi	r24, 0x58	; 88
    10e0:	79 f0       	breq	.+30     	; 0x1100 <vfprintf+0x244>
    10e2:	b4 c0       	rjmp	.+360    	; 0x124c <vfprintf+0x390>
    10e4:	80 37       	cpi	r24, 0x70	; 112
    10e6:	19 f0       	breq	.+6      	; 0x10ee <vfprintf+0x232>
    10e8:	88 37       	cpi	r24, 0x78	; 120
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <vfprintf+0x238>
    10ec:	af c0       	rjmp	.+350    	; 0x124c <vfprintf+0x390>
    10ee:	2f 2f       	mov	r18, r31
    10f0:	20 61       	ori	r18, 0x10	; 16
    10f2:	b2 2e       	mov	r11, r18
    10f4:	b4 fe       	sbrs	r11, 4
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <vfprintf+0x256>
    10f8:	8b 2d       	mov	r24, r11
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	b8 2e       	mov	r11, r24
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <vfprintf+0x256>
    1100:	24 ff       	sbrs	r18, 4
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <vfprintf+0x25c>
    1104:	9f 2f       	mov	r25, r31
    1106:	96 60       	ori	r25, 0x06	; 6
    1108:	b9 2e       	mov	r11, r25
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x25c>
    110c:	28 e0       	ldi	r18, 0x08	; 8
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	05 c0       	rjmp	.+10     	; 0x111c <vfprintf+0x260>
    1112:	20 e1       	ldi	r18, 0x10	; 16
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	02 c0       	rjmp	.+4      	; 0x111c <vfprintf+0x260>
    1118:	20 e1       	ldi	r18, 0x10	; 16
    111a:	32 e0       	ldi	r19, 0x02	; 2
    111c:	f8 01       	movw	r30, r16
    111e:	b7 fe       	sbrs	r11, 7
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <vfprintf+0x274>
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	0c 5f       	subi	r16, 0xFC	; 252
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	06 c0       	rjmp	.+12     	; 0x113c <vfprintf+0x280>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 5f       	subi	r16, 0xFE	; 254
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	a4 01       	movw	r20, r8
    113e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    1142:	a8 2e       	mov	r10, r24
    1144:	a8 18       	sub	r10, r8
    1146:	fb 2d       	mov	r31, r11
    1148:	ff 77       	andi	r31, 0x7F	; 127
    114a:	bf 2e       	mov	r11, r31
    114c:	b6 fe       	sbrs	r11, 6
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <vfprintf+0x2aa>
    1150:	2b 2d       	mov	r18, r11
    1152:	2e 7f       	andi	r18, 0xFE	; 254
    1154:	a5 14       	cp	r10, r5
    1156:	50 f4       	brcc	.+20     	; 0x116c <vfprintf+0x2b0>
    1158:	b4 fe       	sbrs	r11, 4
    115a:	0a c0       	rjmp	.+20     	; 0x1170 <vfprintf+0x2b4>
    115c:	b2 fc       	sbrc	r11, 2
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <vfprintf+0x2b4>
    1160:	2b 2d       	mov	r18, r11
    1162:	2e 7e       	andi	r18, 0xEE	; 238
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <vfprintf+0x2b4>
    1166:	7a 2c       	mov	r7, r10
    1168:	2b 2d       	mov	r18, r11
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <vfprintf+0x2b6>
    116c:	7a 2c       	mov	r7, r10
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <vfprintf+0x2b6>
    1170:	75 2c       	mov	r7, r5
    1172:	24 ff       	sbrs	r18, 4
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <vfprintf+0x2d4>
    1176:	fe 01       	movw	r30, r28
    1178:	ea 0d       	add	r30, r10
    117a:	f1 1d       	adc	r31, r1
    117c:	80 81       	ld	r24, Z
    117e:	80 33       	cpi	r24, 0x30	; 48
    1180:	11 f4       	brne	.+4      	; 0x1186 <vfprintf+0x2ca>
    1182:	29 7e       	andi	r18, 0xE9	; 233
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <vfprintf+0x2dc>
    1186:	22 ff       	sbrs	r18, 2
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x2da>
    118a:	73 94       	inc	r7
    118c:	73 94       	inc	r7
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <vfprintf+0x2dc>
    1190:	82 2f       	mov	r24, r18
    1192:	86 78       	andi	r24, 0x86	; 134
    1194:	09 f0       	breq	.+2      	; 0x1198 <vfprintf+0x2dc>
    1196:	73 94       	inc	r7
    1198:	23 fd       	sbrc	r18, 3
    119a:	13 c0       	rjmp	.+38     	; 0x11c2 <vfprintf+0x306>
    119c:	20 ff       	sbrs	r18, 0
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x2f0>
    11a0:	5a 2c       	mov	r5, r10
    11a2:	73 14       	cp	r7, r3
    11a4:	18 f4       	brcc	.+6      	; 0x11ac <vfprintf+0x2f0>
    11a6:	53 0c       	add	r5, r3
    11a8:	57 18       	sub	r5, r7
    11aa:	73 2c       	mov	r7, r3
    11ac:	73 14       	cp	r7, r3
    11ae:	68 f4       	brcc	.+26     	; 0x11ca <vfprintf+0x30e>
    11b0:	b7 01       	movw	r22, r14
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2c 87       	std	Y+12, r18	; 0x0c
    11b8:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    11bc:	73 94       	inc	r7
    11be:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c0:	f5 cf       	rjmp	.-22     	; 0x11ac <vfprintf+0x2f0>
    11c2:	73 14       	cp	r7, r3
    11c4:	10 f4       	brcc	.+4      	; 0x11ca <vfprintf+0x30e>
    11c6:	37 18       	sub	r3, r7
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <vfprintf+0x310>
    11ca:	31 2c       	mov	r3, r1
    11cc:	24 ff       	sbrs	r18, 4
    11ce:	12 c0       	rjmp	.+36     	; 0x11f4 <vfprintf+0x338>
    11d0:	b7 01       	movw	r22, r14
    11d2:	80 e3       	ldi	r24, 0x30	; 48
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2c 87       	std	Y+12, r18	; 0x0c
    11d8:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    11dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    11de:	22 ff       	sbrs	r18, 2
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <vfprintf+0x354>
    11e2:	21 ff       	sbrs	r18, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x330>
    11e6:	88 e5       	ldi	r24, 0x58	; 88
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x334>
    11ec:	88 e7       	ldi	r24, 0x78	; 120
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b7 01       	movw	r22, r14
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <vfprintf+0x350>
    11f4:	82 2f       	mov	r24, r18
    11f6:	86 78       	andi	r24, 0x86	; 134
    11f8:	59 f0       	breq	.+22     	; 0x1210 <vfprintf+0x354>
    11fa:	21 fd       	sbrc	r18, 1
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x346>
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <vfprintf+0x348>
    1202:	8b e2       	ldi	r24, 0x2B	; 43
    1204:	27 fd       	sbrc	r18, 7
    1206:	8d e2       	ldi	r24, 0x2D	; 45
    1208:	b7 01       	movw	r22, r14
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    1210:	a5 14       	cp	r10, r5
    1212:	38 f4       	brcc	.+14     	; 0x1222 <vfprintf+0x366>
    1214:	b7 01       	movw	r22, r14
    1216:	80 e3       	ldi	r24, 0x30	; 48
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    121e:	5a 94       	dec	r5
    1220:	f7 cf       	rjmp	.-18     	; 0x1210 <vfprintf+0x354>
    1222:	aa 94       	dec	r10
    1224:	f4 01       	movw	r30, r8
    1226:	ea 0d       	add	r30, r10
    1228:	f1 1d       	adc	r31, r1
    122a:	80 81       	ld	r24, Z
    122c:	b7 01       	movw	r22, r14
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    1234:	a1 10       	cpse	r10, r1
    1236:	f5 cf       	rjmp	.-22     	; 0x1222 <vfprintf+0x366>
    1238:	33 20       	and	r3, r3
    123a:	09 f4       	brne	.+2      	; 0x123e <vfprintf+0x382>
    123c:	51 ce       	rjmp	.-862    	; 0xee0 <vfprintf+0x24>
    123e:	b7 01       	movw	r22, r14
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 46 09 	call	0x128c	; 0x128c <fputc>
    1248:	3a 94       	dec	r3
    124a:	f6 cf       	rjmp	.-20     	; 0x1238 <vfprintf+0x37c>
    124c:	f7 01       	movw	r30, r14
    124e:	86 81       	ldd	r24, Z+6	; 0x06
    1250:	97 81       	ldd	r25, Z+7	; 0x07
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x39c>
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	2c 96       	adiw	r28, 0x0c	; 12
    125a:	e2 e1       	ldi	r30, 0x12	; 18
    125c:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__epilogue_restores__>

00001260 <strnlen_P>:
    1260:	fc 01       	movw	r30, r24
    1262:	05 90       	lpm	r0, Z+
    1264:	61 50       	subi	r22, 0x01	; 1
    1266:	70 40       	sbci	r23, 0x00	; 0
    1268:	01 10       	cpse	r0, r1
    126a:	d8 f7       	brcc	.-10     	; 0x1262 <strnlen_P+0x2>
    126c:	80 95       	com	r24
    126e:	90 95       	com	r25
    1270:	8e 0f       	add	r24, r30
    1272:	9f 1f       	adc	r25, r31
    1274:	08 95       	ret

00001276 <strnlen>:
    1276:	fc 01       	movw	r30, r24
    1278:	61 50       	subi	r22, 0x01	; 1
    127a:	70 40       	sbci	r23, 0x00	; 0
    127c:	01 90       	ld	r0, Z+
    127e:	01 10       	cpse	r0, r1
    1280:	d8 f7       	brcc	.-10     	; 0x1278 <strnlen+0x2>
    1282:	80 95       	com	r24
    1284:	90 95       	com	r25
    1286:	8e 0f       	add	r24, r30
    1288:	9f 1f       	adc	r25, r31
    128a:	08 95       	ret

0000128c <fputc>:
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	18 2f       	mov	r17, r24
    1296:	09 2f       	mov	r16, r25
    1298:	eb 01       	movw	r28, r22
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 fd       	sbrc	r24, 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <fputc+0x1a>
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
    12a4:	20 c0       	rjmp	.+64     	; 0x12e6 <fputc+0x5a>
    12a6:	82 ff       	sbrs	r24, 2
    12a8:	10 c0       	rjmp	.+32     	; 0x12ca <fputc+0x3e>
    12aa:	4e 81       	ldd	r20, Y+6	; 0x06
    12ac:	5f 81       	ldd	r21, Y+7	; 0x07
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	42 17       	cp	r20, r18
    12b4:	53 07       	cpc	r21, r19
    12b6:	7c f4       	brge	.+30     	; 0x12d6 <fputc+0x4a>
    12b8:	e8 81       	ld	r30, Y
    12ba:	f9 81       	ldd	r31, Y+1	; 0x01
    12bc:	9f 01       	movw	r18, r30
    12be:	2f 5f       	subi	r18, 0xFF	; 255
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	39 83       	std	Y+1, r19	; 0x01
    12c4:	28 83       	st	Y, r18
    12c6:	10 83       	st	Z, r17
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <fputc+0x4a>
    12ca:	e8 85       	ldd	r30, Y+8	; 0x08
    12cc:	f9 85       	ldd	r31, Y+9	; 0x09
    12ce:	81 2f       	mov	r24, r17
    12d0:	09 95       	icall
    12d2:	89 2b       	or	r24, r25
    12d4:	29 f7       	brne	.-54     	; 0x12a0 <fputc+0x14>
    12d6:	2e 81       	ldd	r18, Y+6	; 0x06
    12d8:	3f 81       	ldd	r19, Y+7	; 0x07
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	3f 83       	std	Y+7, r19	; 0x07
    12e0:	2e 83       	std	Y+6, r18	; 0x06
    12e2:	81 2f       	mov	r24, r17
    12e4:	90 2f       	mov	r25, r16
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <__ultoa_invert>:
    12f0:	fa 01       	movw	r30, r20
    12f2:	aa 27       	eor	r26, r26
    12f4:	28 30       	cpi	r18, 0x08	; 8
    12f6:	51 f1       	breq	.+84     	; 0x134c <__ultoa_invert+0x5c>
    12f8:	20 31       	cpi	r18, 0x10	; 16
    12fa:	81 f1       	breq	.+96     	; 0x135c <__ultoa_invert+0x6c>
    12fc:	e8 94       	clt
    12fe:	6f 93       	push	r22
    1300:	6e 7f       	andi	r22, 0xFE	; 254
    1302:	6e 5f       	subi	r22, 0xFE	; 254
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	af 4f       	sbci	r26, 0xFF	; 255
    130c:	b1 e0       	ldi	r27, 0x01	; 1
    130e:	3e d0       	rcall	.+124    	; 0x138c <__ultoa_invert+0x9c>
    1310:	b4 e0       	ldi	r27, 0x04	; 4
    1312:	3c d0       	rcall	.+120    	; 0x138c <__ultoa_invert+0x9c>
    1314:	67 0f       	add	r22, r23
    1316:	78 1f       	adc	r23, r24
    1318:	89 1f       	adc	r24, r25
    131a:	9a 1f       	adc	r25, r26
    131c:	a1 1d       	adc	r26, r1
    131e:	68 0f       	add	r22, r24
    1320:	79 1f       	adc	r23, r25
    1322:	8a 1f       	adc	r24, r26
    1324:	91 1d       	adc	r25, r1
    1326:	a1 1d       	adc	r26, r1
    1328:	6a 0f       	add	r22, r26
    132a:	71 1d       	adc	r23, r1
    132c:	81 1d       	adc	r24, r1
    132e:	91 1d       	adc	r25, r1
    1330:	a1 1d       	adc	r26, r1
    1332:	20 d0       	rcall	.+64     	; 0x1374 <__ultoa_invert+0x84>
    1334:	09 f4       	brne	.+2      	; 0x1338 <__ultoa_invert+0x48>
    1336:	68 94       	set
    1338:	3f 91       	pop	r19
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	26 9f       	mul	r18, r22
    133e:	11 24       	eor	r1, r1
    1340:	30 19       	sub	r19, r0
    1342:	30 5d       	subi	r19, 0xD0	; 208
    1344:	31 93       	st	Z+, r19
    1346:	de f6       	brtc	.-74     	; 0x12fe <__ultoa_invert+0xe>
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret
    134c:	46 2f       	mov	r20, r22
    134e:	47 70       	andi	r20, 0x07	; 7
    1350:	40 5d       	subi	r20, 0xD0	; 208
    1352:	41 93       	st	Z+, r20
    1354:	b3 e0       	ldi	r27, 0x03	; 3
    1356:	0f d0       	rcall	.+30     	; 0x1376 <__ultoa_invert+0x86>
    1358:	c9 f7       	brne	.-14     	; 0x134c <__ultoa_invert+0x5c>
    135a:	f6 cf       	rjmp	.-20     	; 0x1348 <__ultoa_invert+0x58>
    135c:	46 2f       	mov	r20, r22
    135e:	4f 70       	andi	r20, 0x0F	; 15
    1360:	40 5d       	subi	r20, 0xD0	; 208
    1362:	4a 33       	cpi	r20, 0x3A	; 58
    1364:	18 f0       	brcs	.+6      	; 0x136c <__ultoa_invert+0x7c>
    1366:	49 5d       	subi	r20, 0xD9	; 217
    1368:	31 fd       	sbrc	r19, 1
    136a:	40 52       	subi	r20, 0x20	; 32
    136c:	41 93       	st	Z+, r20
    136e:	02 d0       	rcall	.+4      	; 0x1374 <__ultoa_invert+0x84>
    1370:	a9 f7       	brne	.-22     	; 0x135c <__ultoa_invert+0x6c>
    1372:	ea cf       	rjmp	.-44     	; 0x1348 <__ultoa_invert+0x58>
    1374:	b4 e0       	ldi	r27, 0x04	; 4
    1376:	a6 95       	lsr	r26
    1378:	97 95       	ror	r25
    137a:	87 95       	ror	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__ultoa_invert+0x86>
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 05       	cpc	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	08 95       	ret
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	0a 2e       	mov	r0, r26
    1392:	06 94       	lsr	r0
    1394:	57 95       	ror	r21
    1396:	47 95       	ror	r20
    1398:	37 95       	ror	r19
    139a:	27 95       	ror	r18
    139c:	ba 95       	dec	r27
    139e:	c9 f7       	brne	.-14     	; 0x1392 <__ultoa_invert+0xa2>
    13a0:	62 0f       	add	r22, r18
    13a2:	73 1f       	adc	r23, r19
    13a4:	84 1f       	adc	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	a0 1d       	adc	r26, r0
    13aa:	08 95       	ret

000013ac <__prologue_saves__>:
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ca 1b       	sub	r28, r26
    13d6:	db 0b       	sbc	r29, r27
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	09 94       	ijmp

000013e4 <__epilogue_restores__>:
    13e4:	2a 88       	ldd	r2, Y+18	; 0x12
    13e6:	39 88       	ldd	r3, Y+17	; 0x11
    13e8:	48 88       	ldd	r4, Y+16	; 0x10
    13ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    13ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    13f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    13f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f6:	b9 84       	ldd	r11, Y+9	; 0x09
    13f8:	c8 84       	ldd	r12, Y+8	; 0x08
    13fa:	df 80       	ldd	r13, Y+7	; 0x07
    13fc:	ee 80       	ldd	r14, Y+6	; 0x06
    13fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1400:	0c 81       	ldd	r16, Y+4	; 0x04
    1402:	1b 81       	ldd	r17, Y+3	; 0x03
    1404:	aa 81       	ldd	r26, Y+2	; 0x02
    1406:	b9 81       	ldd	r27, Y+1	; 0x01
    1408:	ce 0f       	add	r28, r30
    140a:	d1 1d       	adc	r29, r1
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	ed 01       	movw	r28, r26
    1418:	08 95       	ret

0000141a <_exit>:
    141a:	f8 94       	cli

0000141c <__stop_program>:
    141c:	ff cf       	rjmp	.-2      	; 0x141c <__stop_program>
