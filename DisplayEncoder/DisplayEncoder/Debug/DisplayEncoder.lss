
DisplayEncoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004a4  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e7  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  00000765  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d0  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e5  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000233  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_4>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	3c 01       	movw	r6, r24
  6a:	50 01       	movw	r10, r0
  6c:	3e 01       	movw	r6, r28
  6e:	40 01       	movw	r8, r0
  70:	42 01       	movw	r8, r4
  72:	44 01       	movw	r8, r8
  74:	46 01       	movw	r8, r12
  76:	48 01       	movw	r8, r16
  78:	4a 01       	movw	r8, r20
  7a:	4c 01       	movw	r8, r24

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ea       	ldi	r30, 0xA4	; 164
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  a2:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <__vector_4>:
	}
	return 0;
}

ISR(PCINT1_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	if(testBitSet(PINC, PC0) && testBitClr(PINC, PC1)) {
  ba:	30 9b       	sbis	0x06, 0	; 6
  bc:	2e c0       	rjmp	.+92     	; 0x11a <__vector_4+0x70>
  be:	31 99       	sbic	0x06, 1	; 6
  c0:	2c c0       	rjmp	.+88     	; 0x11a <__vector_4+0x70>
		atual = 0b10;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 03 01 	sts	0x0103, r25
  ca:	80 93 02 01 	sts	0x0102, r24
		if(anterior == 0b00) {
  ce:	80 91 00 01 	lds	r24, 0x0100
  d2:	90 91 01 01 	lds	r25, 0x0101
  d6:	89 2b       	or	r24, r25
  d8:	49 f4       	brne	.+18     	; 0xec <__vector_4+0x42>
			number++;
  da:	80 91 04 01 	lds	r24, 0x0104
  de:	90 91 05 01 	lds	r25, 0x0105
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 05 01 	sts	0x0105, r25
  e8:	80 93 04 01 	sts	0x0104, r24
		}
		if(anterior == 0b11) {
  ec:	80 91 00 01 	lds	r24, 0x0100
  f0:	90 91 01 01 	lds	r25, 0x0101
  f4:	03 97       	sbiw	r24, 0x03	; 3
  f6:	49 f4       	brne	.+18     	; 0x10a <__vector_4+0x60>
			number--;
  f8:	80 91 04 01 	lds	r24, 0x0104
  fc:	90 91 05 01 	lds	r25, 0x0105
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	90 93 05 01 	sts	0x0105, r25
 106:	80 93 04 01 	sts	0x0104, r24
		}
		anterior = atual;
 10a:	80 91 02 01 	lds	r24, 0x0102
 10e:	90 91 03 01 	lds	r25, 0x0103
 112:	90 93 01 01 	sts	0x0101, r25
 116:	80 93 00 01 	sts	0x0100, r24
	}

	if(testBitClr(PINC, PC0) && testBitClr(PINC, PC1)) {
 11a:	30 99       	sbic	0x06, 0	; 6
 11c:	2c c0       	rjmp	.+88     	; 0x176 <__vector_4+0xcc>
 11e:	31 99       	sbic	0x06, 1	; 6
 120:	2a c0       	rjmp	.+84     	; 0x176 <__vector_4+0xcc>
		atual = 0b00;
 122:	10 92 03 01 	sts	0x0103, r1
 126:	10 92 02 01 	sts	0x0102, r1
		if(anterior == 0b01) {
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	49 f4       	brne	.+18     	; 0x148 <__vector_4+0x9e>
			number++;
 136:	80 91 04 01 	lds	r24, 0x0104
 13a:	90 91 05 01 	lds	r25, 0x0105
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 05 01 	sts	0x0105, r25
 144:	80 93 04 01 	sts	0x0104, r24
		}
		if(anterior == 0b10) {
 148:	80 91 00 01 	lds	r24, 0x0100
 14c:	90 91 01 01 	lds	r25, 0x0101
 150:	02 97       	sbiw	r24, 0x02	; 2
 152:	49 f4       	brne	.+18     	; 0x166 <__vector_4+0xbc>
			number--;
 154:	80 91 04 01 	lds	r24, 0x0104
 158:	90 91 05 01 	lds	r25, 0x0105
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	90 93 05 01 	sts	0x0105, r25
 162:	80 93 04 01 	sts	0x0104, r24
		}
		anterior = atual;
 166:	80 91 02 01 	lds	r24, 0x0102
 16a:	90 91 03 01 	lds	r25, 0x0103
 16e:	90 93 01 01 	sts	0x0101, r25
 172:	80 93 00 01 	sts	0x0100, r24
	}

	if(testBitClr(PINC, PC0) && testBitSet(PINC, PC1)) {
 176:	30 99       	sbic	0x06, 0	; 6
 178:	2e c0       	rjmp	.+92     	; 0x1d6 <__vector_4+0x12c>
 17a:	31 9b       	sbis	0x06, 1	; 6
 17c:	2c c0       	rjmp	.+88     	; 0x1d6 <__vector_4+0x12c>
		atual = 0b01;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 03 01 	sts	0x0103, r25
 186:	80 93 02 01 	sts	0x0102, r24
		if(anterior == 0b11) {
 18a:	80 91 00 01 	lds	r24, 0x0100
 18e:	90 91 01 01 	lds	r25, 0x0101
 192:	03 97       	sbiw	r24, 0x03	; 3
 194:	49 f4       	brne	.+18     	; 0x1a8 <__vector_4+0xfe>
			number++;
 196:	80 91 04 01 	lds	r24, 0x0104
 19a:	90 91 05 01 	lds	r25, 0x0105
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 05 01 	sts	0x0105, r25
 1a4:	80 93 04 01 	sts	0x0104, r24
		}
		if(anterior == 0b00) {
 1a8:	80 91 00 01 	lds	r24, 0x0100
 1ac:	90 91 01 01 	lds	r25, 0x0101
 1b0:	89 2b       	or	r24, r25
 1b2:	49 f4       	brne	.+18     	; 0x1c6 <__vector_4+0x11c>
			number--;
 1b4:	80 91 04 01 	lds	r24, 0x0104
 1b8:	90 91 05 01 	lds	r25, 0x0105
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	90 93 05 01 	sts	0x0105, r25
 1c2:	80 93 04 01 	sts	0x0104, r24
		}
		anterior = atual;
 1c6:	80 91 02 01 	lds	r24, 0x0102
 1ca:	90 91 03 01 	lds	r25, 0x0103
 1ce:	90 93 01 01 	sts	0x0101, r25
 1d2:	80 93 00 01 	sts	0x0100, r24
	}
	if(testBitSet(PINC, PC0) && testBitSet(PINC, PC1)) {
 1d6:	30 9b       	sbis	0x06, 0	; 6
 1d8:	2e c0       	rjmp	.+92     	; 0x236 <__vector_4+0x18c>
 1da:	31 9b       	sbis	0x06, 1	; 6
 1dc:	2c c0       	rjmp	.+88     	; 0x236 <__vector_4+0x18c>
		atual = 0b11;
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 03 01 	sts	0x0103, r25
 1e6:	80 93 02 01 	sts	0x0102, r24
		if(anterior == 0b10) {
 1ea:	80 91 00 01 	lds	r24, 0x0100
 1ee:	90 91 01 01 	lds	r25, 0x0101
 1f2:	02 97       	sbiw	r24, 0x02	; 2
 1f4:	49 f4       	brne	.+18     	; 0x208 <__vector_4+0x15e>
			number++;
 1f6:	80 91 04 01 	lds	r24, 0x0104
 1fa:	90 91 05 01 	lds	r25, 0x0105
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 05 01 	sts	0x0105, r25
 204:	80 93 04 01 	sts	0x0104, r24
		}
		if(anterior == 0b01) {
 208:	80 91 00 01 	lds	r24, 0x0100
 20c:	90 91 01 01 	lds	r25, 0x0101
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	49 f4       	brne	.+18     	; 0x226 <__vector_4+0x17c>
			number--;
 214:	80 91 04 01 	lds	r24, 0x0104
 218:	90 91 05 01 	lds	r25, 0x0105
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	90 93 05 01 	sts	0x0105, r25
 222:	80 93 04 01 	sts	0x0104, r24
		}
		anterior = atual;
 226:	80 91 02 01 	lds	r24, 0x0102
 22a:	90 91 03 01 	lds	r25, 0x0103
 22e:	90 93 01 01 	sts	0x0101, r25
 232:	80 93 00 01 	sts	0x0100, r24
	}
	////////////////////////////////////////////////////////////////////////////////
	// Realce de código – estouro cíclico do contador //////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	if(number > 10000) {
 236:	80 91 04 01 	lds	r24, 0x0104
 23a:	90 91 05 01 	lds	r25, 0x0105
 23e:	81 31       	cpi	r24, 0x11	; 17
 240:	97 42       	sbci	r25, 0x27	; 39
 242:	50 f0       	brcs	.+20     	; 0x258 <__vector_4+0x1ae>
		number -= 10000;
 244:	80 91 04 01 	lds	r24, 0x0104
 248:	90 91 05 01 	lds	r25, 0x0105
 24c:	80 51       	subi	r24, 0x10	; 16
 24e:	97 42       	sbci	r25, 0x27	; 39
 250:	90 93 05 01 	sts	0x0105, r25
 254:	80 93 04 01 	sts	0x0104, r24
	}
	////////////////////////////////////////////////////////////////////////////////
	// Fim do Realce ///////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
}
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <decode>:

unsigned char decode(unsigned int cont)
{
	switch(cont) {
 268:	8a 30       	cpi	r24, 0x0A	; 10
 26a:	91 05       	cpc	r25, r1
 26c:	b8 f4       	brcc	.+46     	; 0x29c <decode+0x34>
 26e:	fc 01       	movw	r30, r24
 270:	ec 5c       	subi	r30, 0xCC	; 204
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	0c 94 3b 02 	jmp	0x476	; 0x476 <__tablejump2__>
	case 0:
		return 0xC0;
 278:	80 ec       	ldi	r24, 0xC0	; 192
 27a:	08 95       	ret
	case 1:
		return 0xF9;
	case 2:
		return 0XA4;
 27c:	84 ea       	ldi	r24, 0xA4	; 164
 27e:	08 95       	ret
	case 3:
		return 0XB0;
 280:	80 eb       	ldi	r24, 0xB0	; 176
 282:	08 95       	ret
	case 4:
		return 0X99;
 284:	89 e9       	ldi	r24, 0x99	; 153
 286:	08 95       	ret
	case 5:
		return 0X92;
 288:	82 e9       	ldi	r24, 0x92	; 146
 28a:	08 95       	ret
	case 6:
		return 0X83;
 28c:	83 e8       	ldi	r24, 0x83	; 131
 28e:	08 95       	ret
	case 7:
		return 0XF8;
 290:	88 ef       	ldi	r24, 0xF8	; 248
 292:	08 95       	ret
	case 8:
		return 0X80;
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	08 95       	ret
	case 9:
		return 0X98;
 298:	88 e9       	ldi	r24, 0x98	; 152
 29a:	08 95       	ret
	default:
		return 0;
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
{
	switch(cont) {
	case 0:
		return 0xC0;
	case 1:
		return 0xF9;
 2a0:	89 ef       	ldi	r24, 0xF9	; 249
		return 0X98;
	default:
		return 0;

	}
 2a2:	08 95       	ret

000002a4 <main>:
volatile unsigned int anterior = 22;

unsigned char decode(unsigned int cont);

int main(void)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <main+0x6>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <main+0x8>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	unsigned char segments[4];
	unsigned char i = 0;

	// Display configuration
	DDRD = 0xFF;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;
 2b4:	8f e0       	ldi	r24, 0x0F	; 15
 2b6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0F;
 2b8:	85 b9       	out	0x05, r24	; 5

	// PCINT configuration
	setBit(PORTC, PC0);
 2ba:	40 9a       	sbi	0x08, 0	; 8
	setBit(PORTC, PC1);
 2bc:	41 9a       	sbi	0x08, 1	; 8
	setBit(PCICR, PCIE1);
 2be:	e8 e6       	ldi	r30, 0x68	; 104
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	80 83       	st	Z, r24
	setBit(PCMSK1, PCINT8);
 2c8:	ec e6       	ldi	r30, 0x6C	; 108
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 83       	st	Z, r24
	setBit(PCMSK1, PCINT9);
 2d2:	80 81       	ld	r24, Z
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	80 83       	st	Z, r24

	// Enables global interrupts
	sei();
 2d8:	78 94       	sei

	while(1) {
		segments[0] = decode(number % 10);
		segments[1] = decode((number / 10) % 10);
		segments[2] = decode((number / 100) % 10);
		segments[3] = decode((number / 1000) % 10);
 2da:	d1 2c       	mov	r13, r1
 2dc:	e1 2c       	mov	r14, r1

		for(i = 0; i < 4; i++) {
			PORTB = 0x0F;
			PORTD = segments[i];
			clrBit(PORTB, (PB0 + i));
 2de:	01 e0       	ldi	r16, 0x01	; 1
 2e0:	10 e0       	ldi	r17, 0x00	; 0
		segments[1] = decode((number / 10) % 10);
		segments[2] = decode((number / 100) % 10);
		segments[3] = decode((number / 1000) % 10);

		for(i = 0; i < 4; i++) {
			PORTB = 0x0F;
 2e2:	0f 2e       	mov	r0, r31
 2e4:	ff e0       	ldi	r31, 0x0F	; 15
 2e6:	ff 2e       	mov	r15, r31
 2e8:	f0 2d       	mov	r31, r0

	// Enables global interrupts
	sei();

	while(1) {
		segments[0] = decode(number % 10);
 2ea:	40 91 04 01 	lds	r20, 0x0104
 2ee:	50 91 05 01 	lds	r21, 0x0105
 2f2:	9a 01       	movw	r18, r20
 2f4:	ad ec       	ldi	r26, 0xCD	; 205
 2f6:	bc ec       	ldi	r27, 0xCC	; 204
 2f8:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	9c 01       	movw	r18, r24
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
 31e:	9a 01       	movw	r18, r20
 320:	28 1b       	sub	r18, r24
 322:	39 0b       	sbc	r19, r25
 324:	c9 01       	movw	r24, r18
 326:	0e 94 34 01 	call	0x268	; 0x268 <decode>
 32a:	89 83       	std	Y+1, r24	; 0x01
		segments[1] = decode((number / 10) % 10);
 32c:	20 91 04 01 	lds	r18, 0x0104
 330:	30 91 05 01 	lds	r19, 0x0105
 334:	ad ec       	ldi	r26, 0xCD	; 205
 336:	bc ec       	ldi	r27, 0xCC	; 204
 338:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 33c:	ac 01       	movw	r20, r24
 33e:	56 95       	lsr	r21
 340:	47 95       	ror	r20
 342:	56 95       	lsr	r21
 344:	47 95       	ror	r20
 346:	56 95       	lsr	r21
 348:	47 95       	ror	r20
 34a:	9a 01       	movw	r18, r20
 34c:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	9c 01       	movw	r18, r24
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	82 0f       	add	r24, r18
 370:	93 1f       	adc	r25, r19
 372:	da 01       	movw	r26, r20
 374:	a8 1b       	sub	r26, r24
 376:	b9 0b       	sbc	r27, r25
 378:	cd 01       	movw	r24, r26
 37a:	0e 94 34 01 	call	0x268	; 0x268 <decode>
 37e:	8a 83       	std	Y+2, r24	; 0x02
		segments[2] = decode((number / 100) % 10);
 380:	20 91 04 01 	lds	r18, 0x0104
 384:	30 91 05 01 	lds	r19, 0x0105
 388:	36 95       	lsr	r19
 38a:	27 95       	ror	r18
 38c:	36 95       	lsr	r19
 38e:	27 95       	ror	r18
 390:	ab e7       	ldi	r26, 0x7B	; 123
 392:	b4 e1       	ldi	r27, 0x14	; 20
 394:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 398:	ac 01       	movw	r20, r24
 39a:	56 95       	lsr	r21
 39c:	47 95       	ror	r20
 39e:	9a 01       	movw	r18, r20
 3a0:	ad ec       	ldi	r26, 0xCD	; 205
 3a2:	bc ec       	ldi	r27, 0xCC	; 204
 3a4:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	9c 01       	movw	r18, r24
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	9a 01       	movw	r18, r20
 3cc:	28 1b       	sub	r18, r24
 3ce:	39 0b       	sbc	r19, r25
 3d0:	c9 01       	movw	r24, r18
 3d2:	0e 94 34 01 	call	0x268	; 0x268 <decode>
 3d6:	8b 83       	std	Y+3, r24	; 0x03
		segments[3] = decode((number / 1000) % 10);
 3d8:	20 91 04 01 	lds	r18, 0x0104
 3dc:	30 91 05 01 	lds	r19, 0x0105
 3e0:	36 95       	lsr	r19
 3e2:	27 95       	ror	r18
 3e4:	36 95       	lsr	r19
 3e6:	27 95       	ror	r18
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
 3ec:	a5 ec       	ldi	r26, 0xC5	; 197
 3ee:	b0 e2       	ldi	r27, 0x20	; 32
 3f0:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 3f4:	ac 01       	movw	r20, r24
 3f6:	52 95       	swap	r21
 3f8:	42 95       	swap	r20
 3fa:	4f 70       	andi	r20, 0x0F	; 15
 3fc:	45 27       	eor	r20, r21
 3fe:	5f 70       	andi	r21, 0x0F	; 15
 400:	45 27       	eor	r20, r21
 402:	9a 01       	movw	r18, r20
 404:	ad ec       	ldi	r26, 0xCD	; 205
 406:	bc ec       	ldi	r27, 0xCC	; 204
 408:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	9c 01       	movw	r18, r24
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	da 01       	movw	r26, r20
 430:	a8 1b       	sub	r26, r24
 432:	b9 0b       	sbc	r27, r25
 434:	cd 01       	movw	r24, r26
 436:	0e 94 34 01 	call	0x268	; 0x268 <decode>
 43a:	8c 83       	std	Y+4, r24	; 0x04
 43c:	fe 01       	movw	r30, r28
 43e:	31 96       	adiw	r30, 0x01	; 1
 440:	8d 2d       	mov	r24, r13
 442:	9e 2d       	mov	r25, r14

		for(i = 0; i < 4; i++) {
			PORTB = 0x0F;
 444:	f5 b8       	out	0x05, r15	; 5
			PORTD = segments[i];
 446:	21 91       	ld	r18, Z+
 448:	2b b9       	out	0x0b, r18	; 11
			clrBit(PORTB, (PB0 + i));
 44a:	45 b1       	in	r20, 0x05	; 5
 44c:	98 01       	movw	r18, r16
 44e:	08 2e       	mov	r0, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <main+0x1b2>
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <main+0x1ae>
 45a:	20 95       	com	r18
 45c:	24 23       	and	r18, r20
 45e:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	af e1       	ldi	r26, 0x1F	; 31
 462:	be e4       	ldi	r27, 0x4E	; 78
 464:	11 97       	sbiw	r26, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <main+0x1c0>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x1c6>
 46a:	00 00       	nop
 46c:	01 96       	adiw	r24, 0x01	; 1
		segments[0] = decode(number % 10);
		segments[1] = decode((number / 10) % 10);
		segments[2] = decode((number / 100) % 10);
		segments[3] = decode((number / 1000) % 10);

		for(i = 0; i < 4; i++) {
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	91 05       	cpc	r25, r1
 472:	41 f7       	brne	.-48     	; 0x444 <main+0x1a0>
 474:	3a cf       	rjmp	.-396    	; 0x2ea <main+0x46>

00000476 <__tablejump2__>:
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31

0000047a <__tablejump__>:
 47a:	05 90       	lpm	r0, Z+
 47c:	f4 91       	lpm	r31, Z
 47e:	e0 2d       	mov	r30, r0
 480:	09 94       	ijmp

00000482 <__umulhisi3>:
 482:	a2 9f       	mul	r26, r18
 484:	b0 01       	movw	r22, r0
 486:	b3 9f       	mul	r27, r19
 488:	c0 01       	movw	r24, r0
 48a:	a3 9f       	mul	r26, r19
 48c:	70 0d       	add	r23, r0
 48e:	81 1d       	adc	r24, r1
 490:	11 24       	eor	r1, r1
 492:	91 1d       	adc	r25, r1
 494:	b2 9f       	mul	r27, r18
 496:	70 0d       	add	r23, r0
 498:	81 1d       	adc	r24, r1
 49a:	11 24       	eor	r1, r1
 49c:	91 1d       	adc	r25, r1
 49e:	08 95       	ret

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>
