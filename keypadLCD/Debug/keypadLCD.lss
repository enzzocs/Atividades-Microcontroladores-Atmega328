
keypadLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001f4c  00001fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080015c  0080015c  0000203c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f4b  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000938  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  000050d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000950  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001798  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000074b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
       4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      28:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      68:	c1 04       	cpc	r12, r1
      6a:	d2 04       	cpc	r13, r2
      6c:	e4 04       	cpc	r14, r4
      6e:	f6 04       	cpc	r15, r6
      70:	08 05       	cpc	r16, r8
      72:	1a 05       	cpc	r17, r10
      74:	2c 05       	cpc	r18, r12
      76:	3e 05       	cpc	r19, r14
      78:	50 05       	cpc	r21, r0
      7a:	61 05       	cpc	r22, r1
      7c:	b2 04       	cpc	r11, r2
      7e:	b2 04       	cpc	r11, r2
      80:	b2 04       	cpc	r11, r2
      82:	b2 04       	cpc	r11, r2
      84:	72 05       	cpc	r23, r2
      86:	79 05       	cpc	r23, r9
      88:	10 07       	cpc	r17, r16
      8a:	12 07       	cpc	r17, r18
      8c:	12 07       	cpc	r17, r18
      8e:	12 07       	cpc	r17, r18
      90:	12 07       	cpc	r17, r18
      92:	10 07       	cpc	r17, r16
      94:	10 07       	cpc	r17, r16
      96:	12 07       	cpc	r17, r18
      98:	12 07       	cpc	r17, r18
      9a:	10 07       	cpc	r17, r16
      9c:	12 07       	cpc	r17, r18
      9e:	12 07       	cpc	r17, r18
      a0:	10 07       	cpc	r17, r16
      a2:	12 07       	cpc	r17, r18
      a4:	12 07       	cpc	r17, r18
      a6:	12 07       	cpc	r17, r18
      a8:	10 07       	cpc	r17, r16
      aa:	12 07       	cpc	r17, r18
      ac:	30 07       	cpc	r19, r16
      ae:	30 07       	cpc	r19, r16
      b0:	30 07       	cpc	r19, r16
      b2:	30 07       	cpc	r19, r16
      b4:	32 07       	cpc	r19, r18
      b6:	30 07       	cpc	r19, r16
      b8:	30 07       	cpc	r19, r16
      ba:	30 07       	cpc	r19, r16
      bc:	35 07       	cpc	r19, r21
      be:	30 07       	cpc	r19, r16
      c0:	30 07       	cpc	r19, r16
      c2:	38 07       	cpc	r19, r24
      c4:	30 07       	cpc	r19, r16
      c6:	30 07       	cpc	r19, r16
      c8:	30 07       	cpc	r19, r16
      ca:	30 07       	cpc	r19, r16
      cc:	30 07       	cpc	r19, r16
      ce:	30 07       	cpc	r19, r16
      d0:	53 07       	cpc	r21, r19
      d2:	53 07       	cpc	r21, r19
      d4:	53 07       	cpc	r21, r19
      d6:	53 07       	cpc	r21, r19
      d8:	55 07       	cpc	r21, r21
      da:	53 07       	cpc	r21, r19
      dc:	53 07       	cpc	r21, r19
      de:	53 07       	cpc	r21, r19
      e0:	58 07       	cpc	r21, r24
      e2:	53 07       	cpc	r21, r19
      e4:	53 07       	cpc	r21, r19
      e6:	5b 07       	cpc	r21, r27
      e8:	53 07       	cpc	r21, r19
      ea:	53 07       	cpc	r21, r19
      ec:	53 07       	cpc	r21, r19
      ee:	53 07       	cpc	r21, r19
      f0:	53 07       	cpc	r21, r19
      f2:	53 07       	cpc	r21, r19
      f4:	a9 07       	cpc	r26, r25
      f6:	ae 07       	cpc	r26, r30
      f8:	ae 07       	cpc	r26, r30
      fa:	ae 07       	cpc	r26, r30
      fc:	c0 07       	cpc	r28, r16
      fe:	a9 07       	cpc	r26, r25
     100:	a9 07       	cpc	r26, r25
     102:	ae 07       	cpc	r26, r30
     104:	c0 07       	cpc	r28, r16
     106:	a9 07       	cpc	r26, r25
     108:	ae 07       	cpc	r26, r30
     10a:	c0 07       	cpc	r28, r16
     10c:	a9 07       	cpc	r26, r25
     10e:	ae 07       	cpc	r26, r30
     110:	ae 07       	cpc	r26, r30
     112:	ae 07       	cpc	r26, r30
     114:	a9 07       	cpc	r26, r25
     116:	ae 07       	cpc	r26, r30
     118:	76 08       	sbc	r7, r6
     11a:	88 08       	sbc	r8, r8
     11c:	88 08       	sbc	r8, r8
     11e:	88 08       	sbc	r8, r8
     120:	9a 08       	sbc	r9, r10
     122:	88 08       	sbc	r8, r8
     124:	76 08       	sbc	r7, r6
     126:	88 08       	sbc	r8, r8
     128:	9a 08       	sbc	r9, r10
     12a:	76 08       	sbc	r7, r6
     12c:	88 08       	sbc	r8, r8
     12e:	9a 08       	sbc	r9, r10
     130:	76 08       	sbc	r7, r6
     132:	88 08       	sbc	r8, r8
     134:	88 08       	sbc	r8, r8
     136:	88 08       	sbc	r8, r8
     138:	76 08       	sbc	r7, r6
     13a:	88 08       	sbc	r8, r8
     13c:	8b 0a       	sbc	r8, r27
     13e:	8b 0a       	sbc	r8, r27
     140:	7b 0a       	sbc	r7, r27
     142:	7d 0a       	sbc	r7, r29
     144:	7d 0a       	sbc	r7, r29
     146:	7f 0a       	sbc	r7, r31
     148:	7f 0a       	sbc	r7, r31
     14a:	7f 0a       	sbc	r7, r31
     14c:	7f 0a       	sbc	r7, r31
     14e:	81 0a       	sbc	r8, r17
     150:	81 0a       	sbc	r8, r17
     152:	81 0a       	sbc	r8, r17
     154:	83 0a       	sbc	r8, r19
     156:	83 0a       	sbc	r8, r19
     158:	85 0a       	sbc	r8, r21
     15a:	87 0a       	sbc	r8, r23
     15c:	89 0a       	sbc	r8, r25
     15e:	89 0a       	sbc	r8, r25

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d8 e0       	ldi	r29, 0x08	; 8
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	ec e4       	ldi	r30, 0x4C	; 76
     174:	ff e1       	ldi	r31, 0x1F	; 31
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	ac 35       	cpi	r26, 0x5C	; 92
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	21 e0       	ldi	r18, 0x01	; 1
     184:	ac e5       	ldi	r26, 0x5C	; 92
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	a8 36       	cpi	r26, 0x68	; 104
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	0e 94 c7 03 	call	0x78e	; 0x78e <main>
     196:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <_exit>

0000019a <__bad_interrupt>:
     19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <keypadSetPort>:
 *				columnsLSB		Position of the first bit of the register
 * Returns:		KEYPAD_OK
 * -------------------------------------------------------------------------- */

keypadResult_t keypadSetPort(volatile keypadConfiguration_t * keypad, volatile uint8 * linesDDR, volatile uint8 * linesPORT, volatile uint8 * linesPIN, uint8 linesLSB, volatile uint8 * columnsDDR, volatile uint8 * columnsPORT, uint8 columnsLSB)
{
     19e:	af 92       	push	r10
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	fc 01       	movw	r30, r24
	keypad->linesDDR = linesDDR;
     1ac:	71 83       	std	Z+1, r23	; 0x01
     1ae:	60 83       	st	Z, r22
	keypad->linesPORT = linesPORT;
     1b0:	53 83       	std	Z+3, r21	; 0x03
     1b2:	42 83       	std	Z+2, r20	; 0x02
	keypad->linesPIN = linesPIN;
     1b4:	35 83       	std	Z+5, r19	; 0x05
     1b6:	24 83       	std	Z+4, r18	; 0x04
	keypad->linesLSB = linesLSB;
     1b8:	07 70       	andi	r16, 0x07	; 7
     1ba:	94 85       	ldd	r25, Z+12	; 0x0c
     1bc:	98 7f       	andi	r25, 0xF8	; 248
     1be:	09 2b       	or	r16, r25
     1c0:	04 87       	std	Z+12, r16	; 0x0c
	keypad->columnsDDR = columnsDDR;
     1c2:	f7 82       	std	Z+7, r15	; 0x07
     1c4:	e6 82       	std	Z+6, r14	; 0x06
	keypad->columnsPORT = columnsPORT;
     1c6:	d1 86       	std	Z+9, r13	; 0x09
     1c8:	c0 86       	std	Z+8, r12	; 0x08
	keypad->columnsLSB = columnsLSB;
     1ca:	8a 2d       	mov	r24, r10
     1cc:	87 70       	andi	r24, 0x07	; 7
     1ce:	88 0f       	add	r24, r24
     1d0:	88 0f       	add	r24, r24
     1d2:	88 0f       	add	r24, r24
     1d4:	94 85       	ldd	r25, Z+12	; 0x0c
     1d6:	97 7c       	andi	r25, 0xC7	; 199
     1d8:	a9 2e       	mov	r10, r25
     1da:	a8 2a       	or	r10, r24
     1dc:	a4 86       	std	Z+12, r10	; 0x0c
	keypad->portConfigured = TRUE;
     1de:	85 85       	ldd	r24, Z+13	; 0x0d
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	85 87       	std	Z+13, r24	; 0x0d

	return KEYPAD_OK;
}
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	df 90       	pop	r13
     1ee:	cf 90       	pop	r12
     1f0:	af 90       	pop	r10
     1f2:	08 95       	ret

000001f4 <keypadSetKeys>:
 *				KEYPAD_TYPE_NOT_ALLOWED
 *				KEYPAD_MEMORY_ALLOCATION_ERROR
 * -------------------------------------------------------------------------- */

keypadResult_t keypadSetKeys(volatile keypadConfiguration_t * keypad, keypadType_t type, ...)
{
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	09 89       	ldd	r16, Y+17	; 0x11
     216:	1a 89       	ldd	r17, Y+18	; 0x12
     218:	8b 89       	ldd	r24, Y+19	; 0x13
	uint8 i;
	uint8 j;
	va_list args;

	// Keypad type
	switch(type) {
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	f1 f0       	breq	.+60     	; 0x25a <keypadSetKeys+0x66>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	51 f1       	breq	.+84     	; 0x276 <keypadSetKeys+0x82>
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	09 f0       	breq	.+2      	; 0x228 <keypadSetKeys+0x34>
     226:	b1 c0       	rjmp	.+354    	; 0x38a <keypadSetKeys+0x196>
	case KEYPAD_4X4:
		keypad->type = KEYPAD_4X4;
     228:	d8 01       	movw	r26, r16
     22a:	1c 96       	adiw	r26, 0x0c	; 12
     22c:	8c 91       	ld	r24, X
     22e:	1c 97       	sbiw	r26, 0x0c	; 12
     230:	8f 73       	andi	r24, 0x3F	; 63
     232:	80 64       	ori	r24, 0x40	; 64
     234:	1c 96       	adiw	r26, 0x0c	; 12
     236:	8c 93       	st	X, r24
     238:	1c 97       	sbiw	r26, 0x0c	; 12
		keypad->lines = 4;
     23a:	1d 96       	adiw	r26, 0x0d	; 13
     23c:	8c 91       	ld	r24, X
     23e:	1d 97       	sbiw	r26, 0x0d	; 13
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	84 60       	ori	r24, 0x04	; 4
     244:	1d 96       	adiw	r26, 0x0d	; 13
     246:	8c 93       	st	X, r24
     248:	1d 97       	sbiw	r26, 0x0d	; 13
		keypad->columns = 4;
     24a:	1d 96       	adiw	r26, 0x0d	; 13
     24c:	8c 91       	ld	r24, X
     24e:	1d 97       	sbiw	r26, 0x0d	; 13
     250:	87 7c       	andi	r24, 0xC7	; 199
     252:	80 62       	ori	r24, 0x20	; 32
     254:	1d 96       	adiw	r26, 0x0d	; 13
     256:	8c 93       	st	X, r24
		break;
     258:	25 c0       	rjmp	.+74     	; 0x2a4 <keypadSetKeys+0xb0>
	case KEYPAD_4X3:
		keypad->type = KEYPAD_4X3;
     25a:	f8 01       	movw	r30, r16
     25c:	84 85       	ldd	r24, Z+12	; 0x0c
     25e:	8f 73       	andi	r24, 0x3F	; 63
     260:	80 68       	ori	r24, 0x80	; 128
     262:	84 87       	std	Z+12, r24	; 0x0c
		keypad->lines = 4;
     264:	85 85       	ldd	r24, Z+13	; 0x0d
     266:	88 7f       	andi	r24, 0xF8	; 248
     268:	84 60       	ori	r24, 0x04	; 4
     26a:	85 87       	std	Z+13, r24	; 0x0d
		keypad->columns = 3;
     26c:	85 85       	ldd	r24, Z+13	; 0x0d
     26e:	87 7c       	andi	r24, 0xC7	; 199
     270:	88 61       	ori	r24, 0x18	; 24
     272:	85 87       	std	Z+13, r24	; 0x0d
		break;
     274:	17 c0       	rjmp	.+46     	; 0x2a4 <keypadSetKeys+0xb0>
	case KEYPAD_5X3:
		keypad->type = KEYPAD_5X3;
     276:	d8 01       	movw	r26, r16
     278:	1c 96       	adiw	r26, 0x0c	; 12
     27a:	8c 91       	ld	r24, X
     27c:	1c 97       	sbiw	r26, 0x0c	; 12
     27e:	80 6c       	ori	r24, 0xC0	; 192
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	8c 93       	st	X, r24
     284:	1c 97       	sbiw	r26, 0x0c	; 12
		keypad->lines = 5;
     286:	1d 96       	adiw	r26, 0x0d	; 13
     288:	8c 91       	ld	r24, X
     28a:	1d 97       	sbiw	r26, 0x0d	; 13
     28c:	88 7f       	andi	r24, 0xF8	; 248
     28e:	85 60       	ori	r24, 0x05	; 5
     290:	1d 96       	adiw	r26, 0x0d	; 13
     292:	8c 93       	st	X, r24
     294:	1d 97       	sbiw	r26, 0x0d	; 13
		keypad->columns = 3;
     296:	1d 96       	adiw	r26, 0x0d	; 13
     298:	8c 91       	ld	r24, X
     29a:	1d 97       	sbiw	r26, 0x0d	; 13
     29c:	87 7c       	andi	r24, 0xC7	; 199
     29e:	88 61       	ori	r24, 0x18	; 24
     2a0:	1d 96       	adiw	r26, 0x0d	; 13
     2a2:	8c 93       	st	X, r24
	default:
		return KEYPAD_TYPE_NOT_ALLOWED;
	}

	// Memory allocation
	keypad->keys = (uint8 *)realloc(keypad->keys, keypad->lines * keypad->columns);
     2a4:	f8 01       	movw	r30, r16
     2a6:	35 85       	ldd	r19, Z+13	; 0x0d
     2a8:	37 70       	andi	r19, 0x07	; 7
     2aa:	25 85       	ldd	r18, Z+13	; 0x0d
     2ac:	26 95       	lsr	r18
     2ae:	26 95       	lsr	r18
     2b0:	26 95       	lsr	r18
     2b2:	27 70       	andi	r18, 0x07	; 7
     2b4:	82 85       	ldd	r24, Z+10	; 0x0a
     2b6:	93 85       	ldd	r25, Z+11	; 0x0b
     2b8:	32 9f       	mul	r19, r18
     2ba:	b0 01       	movw	r22, r0
     2bc:	11 24       	eor	r1, r1
     2be:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <realloc>
     2c2:	d8 01       	movw	r26, r16
     2c4:	1b 96       	adiw	r26, 0x0b	; 11
     2c6:	9c 93       	st	X, r25
     2c8:	8e 93       	st	-X, r24
     2ca:	1a 97       	sbiw	r26, 0x0a	; 10
	if(keypad->keys == NULL) {
     2cc:	1a 96       	adiw	r26, 0x0a	; 10
     2ce:	8d 91       	ld	r24, X+
     2d0:	9c 91       	ld	r25, X
     2d2:	1b 97       	sbiw	r26, 0x0b	; 11
     2d4:	89 2b       	or	r24, r25
     2d6:	09 f4       	brne	.+2      	; 0x2da <keypadSetKeys+0xe6>
     2d8:	5a c0       	rjmp	.+180    	; 0x38e <keypadSetKeys+0x19a>
		return KEYPAD_MEMORY_ALLOCATION_ERROR;
	}

	// Keypad keys
	va_start(args, type);
     2da:	ce 01       	movw	r24, r28
     2dc:	44 96       	adiw	r24, 0x14	; 20
	for(i = 0; i < keypad->lines; i++) {
     2de:	1d 96       	adiw	r26, 0x0d	; 13
     2e0:	2c 91       	ld	r18, X
     2e2:	27 70       	andi	r18, 0x07	; 7
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <keypadSetKeys+0xf4>
     2e6:	48 c0       	rjmp	.+144    	; 0x378 <keypadSetKeys+0x184>
     2e8:	98 2e       	mov	r9, r24
     2ea:	a9 2e       	mov	r10, r25
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	e1 2c       	mov	r14, r1
		for(j = 0; j < keypad->columns; j++) {
     2f2:	b1 2c       	mov	r11, r1
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	32 c0       	rjmp	.+100    	; 0x35e <keypadSetKeys+0x16a>
     2fa:	fc 01       	movw	r30, r24
			keypad->keys[(keypad->lines * i) + j] = (uint8)va_arg(args, int16);
     2fc:	d8 01       	movw	r26, r16
     2fe:	1a 96       	adiw	r26, 0x0a	; 10
     300:	6d 90       	ld	r6, X+
     302:	7c 90       	ld	r7, X
     304:	1b 97       	sbiw	r26, 0x0b	; 11
     306:	1d 96       	adiw	r26, 0x0d	; 13
     308:	8c 91       	ld	r24, X
     30a:	87 70       	andi	r24, 0x07	; 7
     30c:	88 2e       	mov	r8, r24
     30e:	cf 01       	movw	r24, r30
     310:	02 96       	adiw	r24, 0x02	; 2
     312:	98 2e       	mov	r9, r24
     314:	a9 2e       	mov	r10, r25
     316:	86 9e       	mul	r8, r22
     318:	a0 01       	movw	r20, r0
     31a:	87 9e       	mul	r8, r23
     31c:	50 0d       	add	r21, r0
     31e:	11 24       	eor	r1, r1
     320:	26 0d       	add	r18, r6
     322:	37 1d       	adc	r19, r7
     324:	d9 01       	movw	r26, r18
     326:	a4 0f       	add	r26, r20
     328:	b5 1f       	adc	r27, r21
     32a:	20 81       	ld	r18, Z
     32c:	2c 93       	st	X, r18
	}

	// Keypad keys
	va_start(args, type);
	for(i = 0; i < keypad->lines; i++) {
		for(j = 0; j < keypad->columns; j++) {
     32e:	f3 94       	inc	r15
     330:	2f 2d       	mov	r18, r15
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f8 01       	movw	r30, r16
     336:	45 85       	ldd	r20, Z+13	; 0x0d
     338:	46 95       	lsr	r20
     33a:	46 95       	lsr	r20
     33c:	46 95       	lsr	r20
     33e:	47 70       	andi	r20, 0x07	; 7
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	24 17       	cp	r18, r20
     344:	35 07       	cpc	r19, r21
     346:	cc f2       	brlt	.-78     	; 0x2fa <keypadSetKeys+0x106>
		return KEYPAD_MEMORY_ALLOCATION_ERROR;
	}

	// Keypad keys
	va_start(args, type);
	for(i = 0; i < keypad->lines; i++) {
     348:	e3 94       	inc	r14
     34a:	6e 2d       	mov	r22, r14
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	d8 01       	movw	r26, r16
     350:	1d 96       	adiw	r26, 0x0d	; 13
     352:	8c 91       	ld	r24, X
     354:	87 70       	andi	r24, 0x07	; 7
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	68 17       	cp	r22, r24
     35a:	79 07       	cpc	r23, r25
     35c:	6c f4       	brge	.+26     	; 0x378 <keypadSetKeys+0x184>
		for(j = 0; j < keypad->columns; j++) {
     35e:	f8 01       	movw	r30, r16
     360:	85 85       	ldd	r24, Z+13	; 0x0d
     362:	86 95       	lsr	r24
     364:	86 95       	lsr	r24
     366:	86 95       	lsr	r24
     368:	87 70       	andi	r24, 0x07	; 7
     36a:	71 f3       	breq	.-36     	; 0x348 <keypadSetKeys+0x154>
     36c:	e9 2d       	mov	r30, r9
     36e:	fa 2d       	mov	r31, r10
     370:	2b 2d       	mov	r18, r11
     372:	3c 2d       	mov	r19, r12
     374:	fd 2c       	mov	r15, r13
     376:	c2 cf       	rjmp	.-124    	; 0x2fc <keypadSetKeys+0x108>
			keypad->keys[(keypad->lines * i) + j] = (uint8)va_arg(args, int16);
		}
	}
	va_end(args);
	keypad->keysConfigured = TRUE;
     378:	d8 01       	movw	r26, r16
     37a:	1d 96       	adiw	r26, 0x0d	; 13
     37c:	8c 91       	ld	r24, X
     37e:	1d 97       	sbiw	r26, 0x0d	; 13
     380:	80 68       	ori	r24, 0x80	; 128
     382:	1d 96       	adiw	r26, 0x0d	; 13
     384:	8c 93       	st	X, r24

	return KEYPAD_OK;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	03 c0       	rjmp	.+6      	; 0x390 <keypadSetKeys+0x19c>
		keypad->type = KEYPAD_5X3;
		keypad->lines = 5;
		keypad->columns = 3;
		break;
	default:
		return KEYPAD_TYPE_NOT_ALLOWED;
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	01 c0       	rjmp	.+2      	; 0x390 <keypadSetKeys+0x19c>
	}

	// Memory allocation
	keypad->keys = (uint8 *)realloc(keypad->keys, keypad->lines * keypad->columns);
	if(keypad->keys == NULL) {
		return KEYPAD_MEMORY_ALLOCATION_ERROR;
     38e:	83 e0       	ldi	r24, 0x03	; 3
	}
	va_end(args);
	keypad->keysConfigured = TRUE;

	return KEYPAD_OK;
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	6f 90       	pop	r6
     3ac:	08 95       	ret

000003ae <keypadInit>:
 *				KEYPAD_TYPE_NOT_ALLOWED
 * -------------------------------------------------------------------------- */

keypadResult_t keypadInit(volatile keypadConfiguration_t * keypad, uint8 debounceTime)
{
	if(keypad->portConfigured == FALSE) {
     3ae:	dc 01       	movw	r26, r24
     3b0:	1d 96       	adiw	r26, 0x0d	; 13
     3b2:	2c 91       	ld	r18, X
     3b4:	1d 97       	sbiw	r26, 0x0d	; 13
     3b6:	26 ff       	sbrs	r18, 6
     3b8:	16 c1       	rjmp	.+556    	; 0x5e6 <keypadInit+0x238>
		return KEYPAD_PORTS_NOT_CONFIGURED;
	}

	if(keypad->keysConfigured == FALSE) {
     3ba:	1d 96       	adiw	r26, 0x0d	; 13
     3bc:	2c 91       	ld	r18, X
     3be:	1d 97       	sbiw	r26, 0x0d	; 13
     3c0:	22 23       	and	r18, r18
     3c2:	0c f0       	brlt	.+2      	; 0x3c6 <keypadInit+0x18>
     3c4:	12 c1       	rjmp	.+548    	; 0x5ea <keypadInit+0x23c>
		return KEYPAD_KEYS_NOT_CONFIGURED;
	}

	if(keypad->type == KEYPAD_TYPE_UNDEFINED) {
     3c6:	1c 96       	adiw	r26, 0x0c	; 12
     3c8:	2c 91       	ld	r18, X
     3ca:	1c 97       	sbiw	r26, 0x0c	; 12
     3cc:	20 7c       	andi	r18, 0xC0	; 192
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <keypadInit+0x24>
     3d0:	0e c1       	rjmp	.+540    	; 0x5ee <keypadInit+0x240>
		return KEYPAD_TYPE_NOT_ALLOWED;
	}

	switch(keypad->type) {
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	2c 91       	ld	r18, X
     3d6:	1c 97       	sbiw	r26, 0x0c	; 12
     3d8:	22 95       	swap	r18
     3da:	26 95       	lsr	r18
     3dc:	26 95       	lsr	r18
     3de:	23 70       	andi	r18, 0x03	; 3
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	22 30       	cpi	r18, 0x02	; 2
     3e4:	31 05       	cpc	r19, r1
     3e6:	09 f4       	brne	.+2      	; 0x3ea <keypadInit+0x3c>
     3e8:	56 c0       	rjmp	.+172    	; 0x496 <keypadInit+0xe8>
     3ea:	23 30       	cpi	r18, 0x03	; 3
     3ec:	31 05       	cpc	r19, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <keypadInit+0x44>
     3f0:	a1 c0       	rjmp	.+322    	; 0x534 <keypadInit+0x186>
     3f2:	21 30       	cpi	r18, 0x01	; 1
     3f4:	31 05       	cpc	r19, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <keypadInit+0x4c>
     3f8:	fc c0       	rjmp	.+504    	; 0x5f2 <keypadInit+0x244>
	case KEYPAD_4X4:
		clrMask(*(keypad->linesDDR), 0x0F, keypad->linesLSB);
     3fa:	ed 91       	ld	r30, X+
     3fc:	fc 91       	ld	r31, X
     3fe:	11 97       	sbiw	r26, 0x01	; 1
     400:	70 81       	ld	r23, Z
     402:	1c 96       	adiw	r26, 0x0c	; 12
     404:	4c 91       	ld	r20, X
     406:	47 70       	andi	r20, 0x07	; 7
     408:	2f e0       	ldi	r18, 0x0F	; 15
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	d9 01       	movw	r26, r18
     40e:	02 c0       	rjmp	.+4      	; 0x414 <keypadInit+0x66>
     410:	aa 0f       	add	r26, r26
     412:	bb 1f       	adc	r27, r27
     414:	4a 95       	dec	r20
     416:	e2 f7       	brpl	.-8      	; 0x410 <keypadInit+0x62>
     418:	ad 01       	movw	r20, r26
     41a:	40 95       	com	r20
     41c:	47 23       	and	r20, r23
     41e:	40 83       	st	Z, r20
		setMask(*(keypad->linesPORT), 0x0F, keypad->linesLSB);
     420:	dc 01       	movw	r26, r24
     422:	12 96       	adiw	r26, 0x02	; 2
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	13 97       	sbiw	r26, 0x03	; 3
     42a:	70 81       	ld	r23, Z
     42c:	1c 96       	adiw	r26, 0x0c	; 12
     42e:	4c 91       	ld	r20, X
     430:	47 70       	andi	r20, 0x07	; 7
     432:	d9 01       	movw	r26, r18
     434:	02 c0       	rjmp	.+4      	; 0x43a <keypadInit+0x8c>
     436:	aa 0f       	add	r26, r26
     438:	bb 1f       	adc	r27, r27
     43a:	4a 95       	dec	r20
     43c:	e2 f7       	brpl	.-8      	; 0x436 <keypadInit+0x88>
     43e:	ad 01       	movw	r20, r26
     440:	47 2b       	or	r20, r23
     442:	40 83       	st	Z, r20
		setMask(*(keypad->columnsDDR), 0x0F, keypad->columnsLSB);
     444:	dc 01       	movw	r26, r24
     446:	16 96       	adiw	r26, 0x06	; 6
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	17 97       	sbiw	r26, 0x07	; 7
     44e:	70 81       	ld	r23, Z
     450:	1c 96       	adiw	r26, 0x0c	; 12
     452:	5c 91       	ld	r21, X
     454:	56 95       	lsr	r21
     456:	56 95       	lsr	r21
     458:	56 95       	lsr	r21
     45a:	57 70       	andi	r21, 0x07	; 7
     45c:	d9 01       	movw	r26, r18
     45e:	02 c0       	rjmp	.+4      	; 0x464 <keypadInit+0xb6>
     460:	aa 0f       	add	r26, r26
     462:	bb 1f       	adc	r27, r27
     464:	5a 95       	dec	r21
     466:	e2 f7       	brpl	.-8      	; 0x460 <keypadInit+0xb2>
     468:	ad 01       	movw	r20, r26
     46a:	47 2b       	or	r20, r23
     46c:	40 83       	st	Z, r20
		setMask(*(keypad->columnsPORT), 0x0F, keypad->columnsLSB);
     46e:	dc 01       	movw	r26, r24
     470:	18 96       	adiw	r26, 0x08	; 8
     472:	ed 91       	ld	r30, X+
     474:	fc 91       	ld	r31, X
     476:	19 97       	sbiw	r26, 0x09	; 9
     478:	50 81       	ld	r21, Z
     47a:	1c 96       	adiw	r26, 0x0c	; 12
     47c:	4c 91       	ld	r20, X
     47e:	46 95       	lsr	r20
     480:	46 95       	lsr	r20
     482:	46 95       	lsr	r20
     484:	47 70       	andi	r20, 0x07	; 7
     486:	02 c0       	rjmp	.+4      	; 0x48c <keypadInit+0xde>
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	4a 95       	dec	r20
     48e:	e2 f7       	brpl	.-8      	; 0x488 <keypadInit+0xda>
     490:	25 2b       	or	r18, r21
     492:	20 83       	st	Z, r18
		break;
     494:	9d c0       	rjmp	.+314    	; 0x5d0 <keypadInit+0x222>
	case KEYPAD_4X3:
		clrMask(*(keypad->linesDDR), 0x0F, keypad->linesLSB);
     496:	dc 01       	movw	r26, r24
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
     49c:	11 97       	sbiw	r26, 0x01	; 1
     49e:	70 81       	ld	r23, Z
     4a0:	1c 96       	adiw	r26, 0x0c	; 12
     4a2:	4c 91       	ld	r20, X
     4a4:	47 70       	andi	r20, 0x07	; 7
     4a6:	2f e0       	ldi	r18, 0x0F	; 15
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	d9 01       	movw	r26, r18
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <keypadInit+0x104>
     4ae:	aa 0f       	add	r26, r26
     4b0:	bb 1f       	adc	r27, r27
     4b2:	4a 95       	dec	r20
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <keypadInit+0x100>
     4b6:	ad 01       	movw	r20, r26
     4b8:	40 95       	com	r20
     4ba:	47 23       	and	r20, r23
     4bc:	40 83       	st	Z, r20
		setMask(*(keypad->linesPORT), 0x0F, keypad->linesLSB);
     4be:	dc 01       	movw	r26, r24
     4c0:	12 96       	adiw	r26, 0x02	; 2
     4c2:	ed 91       	ld	r30, X+
     4c4:	fc 91       	ld	r31, X
     4c6:	13 97       	sbiw	r26, 0x03	; 3
     4c8:	40 81       	ld	r20, Z
     4ca:	1c 96       	adiw	r26, 0x0c	; 12
     4cc:	5c 91       	ld	r21, X
     4ce:	1c 97       	sbiw	r26, 0x0c	; 12
     4d0:	57 70       	andi	r21, 0x07	; 7
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <keypadInit+0x12a>
     4d4:	22 0f       	add	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	5a 95       	dec	r21
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <keypadInit+0x126>
     4dc:	24 2b       	or	r18, r20
     4de:	20 83       	st	Z, r18
		setMask(*(keypad->columnsDDR), 0x07, keypad->columnsLSB);
     4e0:	16 96       	adiw	r26, 0x06	; 6
     4e2:	ed 91       	ld	r30, X+
     4e4:	fc 91       	ld	r31, X
     4e6:	17 97       	sbiw	r26, 0x07	; 7
     4e8:	70 81       	ld	r23, Z
     4ea:	1c 96       	adiw	r26, 0x0c	; 12
     4ec:	5c 91       	ld	r21, X
     4ee:	56 95       	lsr	r21
     4f0:	56 95       	lsr	r21
     4f2:	56 95       	lsr	r21
     4f4:	57 70       	andi	r21, 0x07	; 7
     4f6:	27 e0       	ldi	r18, 0x07	; 7
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	d9 01       	movw	r26, r18
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <keypadInit+0x154>
     4fe:	aa 0f       	add	r26, r26
     500:	bb 1f       	adc	r27, r27
     502:	5a 95       	dec	r21
     504:	e2 f7       	brpl	.-8      	; 0x4fe <keypadInit+0x150>
     506:	ad 01       	movw	r20, r26
     508:	47 2b       	or	r20, r23
     50a:	40 83       	st	Z, r20
		setMask(*(keypad->columnsPORT), 0x07, keypad->columnsLSB);
     50c:	dc 01       	movw	r26, r24
     50e:	18 96       	adiw	r26, 0x08	; 8
     510:	ed 91       	ld	r30, X+
     512:	fc 91       	ld	r31, X
     514:	19 97       	sbiw	r26, 0x09	; 9
     516:	50 81       	ld	r21, Z
     518:	1c 96       	adiw	r26, 0x0c	; 12
     51a:	4c 91       	ld	r20, X
     51c:	46 95       	lsr	r20
     51e:	46 95       	lsr	r20
     520:	46 95       	lsr	r20
     522:	47 70       	andi	r20, 0x07	; 7
     524:	02 c0       	rjmp	.+4      	; 0x52a <keypadInit+0x17c>
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	4a 95       	dec	r20
     52c:	e2 f7       	brpl	.-8      	; 0x526 <keypadInit+0x178>
     52e:	25 2b       	or	r18, r21
     530:	20 83       	st	Z, r18
		break;
     532:	4e c0       	rjmp	.+156    	; 0x5d0 <keypadInit+0x222>
	case KEYPAD_5X3:
		clrMask(*(keypad->linesDDR), 0x1F, keypad->linesLSB);
     534:	dc 01       	movw	r26, r24
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	70 81       	ld	r23, Z
     53e:	1c 96       	adiw	r26, 0x0c	; 12
     540:	4c 91       	ld	r20, X
     542:	47 70       	andi	r20, 0x07	; 7
     544:	2f e1       	ldi	r18, 0x1F	; 31
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	d9 01       	movw	r26, r18
     54a:	02 c0       	rjmp	.+4      	; 0x550 <keypadInit+0x1a2>
     54c:	aa 0f       	add	r26, r26
     54e:	bb 1f       	adc	r27, r27
     550:	4a 95       	dec	r20
     552:	e2 f7       	brpl	.-8      	; 0x54c <keypadInit+0x19e>
     554:	ad 01       	movw	r20, r26
     556:	40 95       	com	r20
     558:	47 23       	and	r20, r23
     55a:	40 83       	st	Z, r20
		setMask(*(keypad->linesPORT), 0x1F, keypad->linesLSB);
     55c:	dc 01       	movw	r26, r24
     55e:	12 96       	adiw	r26, 0x02	; 2
     560:	ed 91       	ld	r30, X+
     562:	fc 91       	ld	r31, X
     564:	13 97       	sbiw	r26, 0x03	; 3
     566:	40 81       	ld	r20, Z
     568:	1c 96       	adiw	r26, 0x0c	; 12
     56a:	5c 91       	ld	r21, X
     56c:	1c 97       	sbiw	r26, 0x0c	; 12
     56e:	57 70       	andi	r21, 0x07	; 7
     570:	02 c0       	rjmp	.+4      	; 0x576 <keypadInit+0x1c8>
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	5a 95       	dec	r21
     578:	e2 f7       	brpl	.-8      	; 0x572 <keypadInit+0x1c4>
     57a:	24 2b       	or	r18, r20
     57c:	20 83       	st	Z, r18
		setMask(*(keypad->columnsDDR), 0x07, keypad->columnsLSB);
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	ed 91       	ld	r30, X+
     582:	fc 91       	ld	r31, X
     584:	17 97       	sbiw	r26, 0x07	; 7
     586:	70 81       	ld	r23, Z
     588:	1c 96       	adiw	r26, 0x0c	; 12
     58a:	5c 91       	ld	r21, X
     58c:	56 95       	lsr	r21
     58e:	56 95       	lsr	r21
     590:	56 95       	lsr	r21
     592:	57 70       	andi	r21, 0x07	; 7
     594:	27 e0       	ldi	r18, 0x07	; 7
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	d9 01       	movw	r26, r18
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <keypadInit+0x1f2>
     59c:	aa 0f       	add	r26, r26
     59e:	bb 1f       	adc	r27, r27
     5a0:	5a 95       	dec	r21
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <keypadInit+0x1ee>
     5a4:	ad 01       	movw	r20, r26
     5a6:	47 2b       	or	r20, r23
     5a8:	40 83       	st	Z, r20
		setMask(*(keypad->columnsPORT), 0x07, keypad->columnsLSB);
     5aa:	dc 01       	movw	r26, r24
     5ac:	18 96       	adiw	r26, 0x08	; 8
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	19 97       	sbiw	r26, 0x09	; 9
     5b4:	50 81       	ld	r21, Z
     5b6:	1c 96       	adiw	r26, 0x0c	; 12
     5b8:	4c 91       	ld	r20, X
     5ba:	46 95       	lsr	r20
     5bc:	46 95       	lsr	r20
     5be:	46 95       	lsr	r20
     5c0:	47 70       	andi	r20, 0x07	; 7
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <keypadInit+0x21a>
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	4a 95       	dec	r20
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <keypadInit+0x216>
     5cc:	25 2b       	or	r18, r21
     5ce:	20 83       	st	Z, r18
		break;
	default:
		return KEYPAD_TYPE_NOT_ALLOWED;
	}
	keypad->debounceTime = debounceTime;
     5d0:	66 0f       	add	r22, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	26 85       	ldd	r18, Z+14	; 0x0e
     5d6:	21 70       	andi	r18, 0x01	; 1
     5d8:	62 2b       	or	r22, r18
     5da:	66 87       	std	Z+14, r22	; 0x0e
	keypad->initialized = TRUE;
     5dc:	26 85       	ldd	r18, Z+14	; 0x0e
     5de:	21 60       	ori	r18, 0x01	; 1
     5e0:	26 87       	std	Z+14, r18	; 0x0e

	return KEYPAD_OK;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	08 95       	ret
 * -------------------------------------------------------------------------- */

keypadResult_t keypadInit(volatile keypadConfiguration_t * keypad, uint8 debounceTime)
{
	if(keypad->portConfigured == FALSE) {
		return KEYPAD_PORTS_NOT_CONFIGURED;
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	08 95       	ret
	}

	if(keypad->keysConfigured == FALSE) {
		return KEYPAD_KEYS_NOT_CONFIGURED;
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	08 95       	ret
	}

	if(keypad->type == KEYPAD_TYPE_UNDEFINED) {
		return KEYPAD_TYPE_NOT_ALLOWED;
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	08 95       	ret
		setMask(*(keypad->linesPORT), 0x1F, keypad->linesLSB);
		setMask(*(keypad->columnsDDR), 0x07, keypad->columnsLSB);
		setMask(*(keypad->columnsPORT), 0x07, keypad->columnsLSB);
		break;
	default:
		return KEYPAD_TYPE_NOT_ALLOWED;
     5f2:	82 e0       	ldi	r24, 0x02	; 2
	}
	keypad->debounceTime = debounceTime;
	keypad->initialized = TRUE;

	return KEYPAD_OK;
}
     5f4:	08 95       	ret

000005f6 <keypadRead>:
 * Arguments:	keypad			Pointer to the keypad struct
 * Returns:		Value stored in the keypad stuct, initialized with keypadSetKeys
 * -------------------------------------------------------------------------- */

uint8 keypadRead(volatile keypadConfiguration_t * keypad)
{
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	fc 01       	movw	r30, r24
	uint8 j;
	uint8 k;
	uint8 aux;
	uint8 key = 0xFF;

	for(i = 0; i < keypad->columns; i++) {					// For each column
     612:	85 85       	ldd	r24, Z+13	; 0x0d
     614:	86 95       	lsr	r24
     616:	86 95       	lsr	r24
     618:	86 95       	lsr	r24
     61a:	87 70       	andi	r24, 0x07	; 7
     61c:	09 f4       	brne	.+2      	; 0x620 <keypadRead+0x2a>
     61e:	a6 c0       	rjmp	.+332    	; 0x76c <keypadRead+0x176>
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i;
	uint8 j;
	uint8 k;
	uint8 aux;
	uint8 key = 0xFF;
     624:	ee 24       	eor	r14, r14
     626:	ea 94       	dec	r14

	for(i = 0; i < keypad->columns; i++) {					// For each column
     628:	c1 2c       	mov	r12, r1
		clrBit(*(keypad->columnsPORT), (i + keypad->columnsLSB));	// Clear one columns
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
		noOperation(5);												// Wait for syncronization
		aux = *(keypad->linesPIN) >> keypad->linesLSB;
		for(j = 0; j < keypad->lines; j++) {				// For each line
     62e:	a1 2c       	mov	r10, r1
     630:	91 2c       	mov	r9, r1
     632:	b1 2c       	mov	r11, r1
			if(isBitClr(aux, j)) {					// Tests if the key is pressed
				key = keypad->keys[(keypad->lines * j) + i];			// Decodes the key using the table
				for(k = 0; k < keypad->debounceTime; k++) {
     634:	db 2c       	mov	r13, r11
	uint8 k;
	uint8 aux;
	uint8 key = 0xFF;

	for(i = 0; i < keypad->columns; i++) {					// For each column
		clrBit(*(keypad->columnsPORT), (i + keypad->columnsLSB));	// Clear one columns
     636:	a0 85       	ldd	r26, Z+8	; 0x08
     638:	b1 85       	ldd	r27, Z+9	; 0x09
     63a:	4c 91       	ld	r20, X
     63c:	34 85       	ldd	r19, Z+12	; 0x0c
     63e:	36 95       	lsr	r19
     640:	36 95       	lsr	r19
     642:	36 95       	lsr	r19
     644:	37 70       	andi	r19, 0x07	; 7
     646:	b8 01       	movw	r22, r16
     648:	63 0f       	add	r22, r19
     64a:	71 1d       	adc	r23, r1
     64c:	ec 01       	movw	r28, r24
     64e:	06 2e       	mov	r0, r22
     650:	02 c0       	rjmp	.+4      	; 0x656 <keypadRead+0x60>
     652:	cc 0f       	add	r28, r28
     654:	dd 1f       	adc	r29, r29
     656:	0a 94       	dec	r0
     658:	e2 f7       	brpl	.-8      	; 0x652 <keypadRead+0x5c>
     65a:	9e 01       	movw	r18, r28
     65c:	20 95       	com	r18
     65e:	24 23       	and	r18, r20
     660:	2c 93       	st	X, r18
		noOperation(5);												// Wait for syncronization
     662:	00 c0       	rjmp	.+0      	; 0x664 <keypadRead+0x6e>
     664:	00 c0       	rjmp	.+0      	; 0x666 <keypadRead+0x70>
     666:	00 00       	nop
		aux = *(keypad->linesPIN) >> keypad->linesLSB;
     668:	a4 81       	ldd	r26, Z+4	; 0x04
     66a:	b5 81       	ldd	r27, Z+5	; 0x05
     66c:	2c 91       	ld	r18, X
     66e:	c4 85       	ldd	r28, Z+12	; 0x0c
     670:	c7 70       	andi	r28, 0x07	; 7
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	a9 01       	movw	r20, r18
     676:	02 c0       	rjmp	.+4      	; 0x67c <keypadRead+0x86>
     678:	55 95       	asr	r21
     67a:	47 95       	ror	r20
     67c:	ca 95       	dec	r28
     67e:	e2 f7       	brpl	.-8      	; 0x678 <keypadRead+0x82>
		for(j = 0; j < keypad->lines; j++) {				// For each line
     680:	25 85       	ldd	r18, Z+13	; 0x0d
     682:	27 70       	andi	r18, 0x07	; 7
     684:	09 f4       	brne	.+2      	; 0x688 <keypadRead+0x92>
     686:	52 c0       	rjmp	.+164    	; 0x72c <keypadRead+0x136>
     688:	6a 2d       	mov	r22, r10
     68a:	79 2d       	mov	r23, r9
     68c:	fb 2c       	mov	r15, r11
			if(isBitClr(aux, j)) {					// Tests if the key is pressed
     68e:	3a 01       	movw	r6, r20
     690:	77 24       	eor	r7, r7
     692:	93 01       	movw	r18, r6
     694:	06 2e       	mov	r0, r22
     696:	02 c0       	rjmp	.+4      	; 0x69c <keypadRead+0xa6>
     698:	35 95       	asr	r19
     69a:	27 95       	ror	r18
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <keypadRead+0xa2>
     6a0:	20 fd       	sbrc	r18, 0
     6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <keypadRead+0xf2>
				key = keypad->keys[(keypad->lines * j) + i];			// Decodes the key using the table
     6a4:	42 85       	ldd	r20, Z+10	; 0x0a
     6a6:	53 85       	ldd	r21, Z+11	; 0x0b
     6a8:	a5 85       	ldd	r26, Z+13	; 0x0d
     6aa:	a7 70       	andi	r26, 0x07	; 7
     6ac:	a6 9f       	mul	r26, r22
     6ae:	90 01       	movw	r18, r0
     6b0:	a7 9f       	mul	r26, r23
     6b2:	30 0d       	add	r19, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	40 0f       	add	r20, r16
     6b8:	51 1f       	adc	r21, r17
     6ba:	da 01       	movw	r26, r20
     6bc:	a2 0f       	add	r26, r18
     6be:	b3 1f       	adc	r27, r19
     6c0:	ec 90       	ld	r14, X
				for(k = 0; k < keypad->debounceTime; k++) {
     6c2:	26 85       	ldd	r18, Z+14	; 0x0e
     6c4:	26 95       	lsr	r18
     6c6:	81 f0       	breq	.+32     	; 0x6e8 <keypadRead+0xf2>
     6c8:	ad 2d       	mov	r26, r13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ca:	cf e9       	ldi	r28, 0x9F	; 159
     6cc:	df e0       	ldi	r29, 0x0F	; 15
     6ce:	21 97       	sbiw	r28, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <keypadRead+0xd8>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <keypadRead+0xde>
     6d4:	00 00       	nop
     6d6:	af 5f       	subi	r26, 0xFF	; 255
     6d8:	26 85       	ldd	r18, Z+14	; 0x0e
     6da:	26 95       	lsr	r18
     6dc:	4a 2f       	mov	r20, r26
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	42 17       	cp	r20, r18
     6e4:	53 07       	cpc	r21, r19
     6e6:	8c f3       	brlt	.-30     	; 0x6ca <keypadRead+0xd4>
     6e8:	9c 01       	movw	r18, r24
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <keypadRead+0xfa>
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	6a 95       	dec	r22
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <keypadRead+0xf6>
     6f4:	b9 01       	movw	r22, r18
					_delay_ms(1);    // Debounce time
				}
			}
			while(isBitClr(*(keypad->linesPIN) >> keypad->linesLSB, j)) {
     6f6:	a4 81       	ldd	r26, Z+4	; 0x04
     6f8:	b5 81       	ldd	r27, Z+5	; 0x05
     6fa:	4c 91       	ld	r20, X
     6fc:	24 85       	ldd	r18, Z+12	; 0x0c
     6fe:	27 70       	andi	r18, 0x07	; 7
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	da 01       	movw	r26, r20
     704:	02 c0       	rjmp	.+4      	; 0x70a <keypadRead+0x114>
     706:	b5 95       	asr	r27
     708:	a7 95       	ror	r26
     70a:	2a 95       	dec	r18
     70c:	e2 f7       	brpl	.-8      	; 0x706 <keypadRead+0x110>
     70e:	9d 01       	movw	r18, r26
     710:	26 23       	and	r18, r22
     712:	37 23       	and	r19, r23
     714:	23 2b       	or	r18, r19
     716:	79 f3       	breq	.-34     	; 0x6f6 <keypadRead+0x100>

	for(i = 0; i < keypad->columns; i++) {					// For each column
		clrBit(*(keypad->columnsPORT), (i + keypad->columnsLSB));	// Clear one columns
		noOperation(5);												// Wait for syncronization
		aux = *(keypad->linesPIN) >> keypad->linesLSB;
		for(j = 0; j < keypad->lines; j++) {				// For each line
     718:	f3 94       	inc	r15
     71a:	6f 2d       	mov	r22, r15
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	25 85       	ldd	r18, Z+13	; 0x0d
     720:	27 70       	andi	r18, 0x07	; 7
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	62 17       	cp	r22, r18
     726:	73 07       	cpc	r23, r19
     728:	0c f4       	brge	.+2      	; 0x72c <keypadRead+0x136>
     72a:	b3 cf       	rjmp	.-154    	; 0x692 <keypadRead+0x9c>
			}
			while(isBitClr(*(keypad->linesPIN) >> keypad->linesLSB, j)) {
			}
			;	// Wait until key is released
		}
		setBit(*(keypad->columnsPORT), (i + keypad->columnsLSB));	// Restore column value
     72c:	a0 85       	ldd	r26, Z+8	; 0x08
     72e:	b1 85       	ldd	r27, Z+9	; 0x09
     730:	4c 91       	ld	r20, X
     732:	34 85       	ldd	r19, Z+12	; 0x0c
     734:	36 95       	lsr	r19
     736:	36 95       	lsr	r19
     738:	36 95       	lsr	r19
     73a:	37 70       	andi	r19, 0x07	; 7
     73c:	03 0f       	add	r16, r19
     73e:	11 1d       	adc	r17, r1
     740:	9c 01       	movw	r18, r24
     742:	02 c0       	rjmp	.+4      	; 0x748 <keypadRead+0x152>
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	0a 95       	dec	r16
     74a:	e2 f7       	brpl	.-8      	; 0x744 <keypadRead+0x14e>
     74c:	24 2b       	or	r18, r20
     74e:	2c 93       	st	X, r18
	uint8 j;
	uint8 k;
	uint8 aux;
	uint8 key = 0xFF;

	for(i = 0; i < keypad->columns; i++) {					// For each column
     750:	c3 94       	inc	r12
     752:	0c 2d       	mov	r16, r12
     754:	10 e0       	ldi	r17, 0x00	; 0
     756:	25 85       	ldd	r18, Z+13	; 0x0d
     758:	26 95       	lsr	r18
     75a:	26 95       	lsr	r18
     75c:	26 95       	lsr	r18
     75e:	27 70       	andi	r18, 0x07	; 7
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	02 17       	cp	r16, r18
     764:	13 07       	cpc	r17, r19
     766:	0c f4       	brge	.+2      	; 0x76a <keypadRead+0x174>
     768:	66 cf       	rjmp	.-308    	; 0x636 <keypadRead+0x40>
     76a:	02 c0       	rjmp	.+4      	; 0x770 <keypadRead+0x17a>
{
	uint8 i;
	uint8 j;
	uint8 k;
	uint8 aux;
	uint8 key = 0xFF;
     76c:	ee 24       	eor	r14, r14
     76e:	ea 94       	dec	r14
		}
		setBit(*(keypad->columnsPORT), (i + keypad->columnsLSB));	// Restore column value
	}

	return key;
     770:	8e 2d       	mov	r24, r14
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	7f 90       	pop	r7
     78a:	6f 90       	pop	r6
     78c:	08 95       	ret

0000078e <main>:
#include "lcd4d.h"



int main(void)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	c0 54       	subi	r28, 0x40	; 64
     798:	d1 09       	sbc	r29, r1
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
	attachLcd(display);
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fd e0       	ldi	r31, 0x0D	; 13
     7a8:	6f 2e       	mov	r6, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	fe 01       	movw	r30, r28
     7ae:	70 96       	adiw	r30, 0x10	; 16
     7b0:	df 01       	movw	r26, r30
     7b2:	26 2d       	mov	r18, r6
     7b4:	1d 92       	st	X+, r1
     7b6:	2a 95       	dec	r18
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <main+0x26>
     7ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7bc:	80 61       	ori	r24, 0x10	; 16
     7be:	8a 8f       	std	Y+26, r24	; 0x1a
     7c0:	8d e0       	ldi	r24, 0x0D	; 13
     7c2:	de 01       	movw	r26, r28
     7c4:	5d 96       	adiw	r26, 0x1d	; 29
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x38>
	attachKeypad(keypad);
     7ce:	0f 2e       	mov	r0, r31
     7d0:	ff e0       	ldi	r31, 0x0F	; 15
     7d2:	4f 2e       	mov	r4, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	fe 01       	movw	r30, r28
     7d8:	31 96       	adiw	r30, 0x01	; 1
     7da:	df 01       	movw	r26, r30
     7dc:	24 2d       	mov	r18, r4
     7de:	1d 92       	st	X+, r1
     7e0:	2a 95       	dec	r18
     7e2:	e9 f7       	brne	.-6      	; 0x7de <main+0x50>
     7e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e6:	81 70       	andi	r24, 0x01	; 1
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	8f 87       	std	Y+15, r24	; 0x0f
     7ec:	8f e0       	ldi	r24, 0x0F	; 15
     7ee:	de 01       	movw	r26, r28
     7f0:	9a 96       	adiw	r26, 0x2a	; 42
     7f2:	01 90       	ld	r0, Z+
     7f4:	0d 92       	st	X+, r0
     7f6:	8a 95       	dec	r24
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <main+0x64>
	uint8 tecla;
	uint8 senha[4] = {1, 2, 3, 4};
     7fa:	11 e0       	ldi	r17, 0x01	; 1
     7fc:	19 af       	std	Y+57, r17	; 0x39
     7fe:	68 94       	set
     800:	77 24       	eor	r7, r7
     802:	71 f8       	bld	r7, 1
     804:	7a ae       	std	Y+58, r7	; 0x3a
     806:	0f 2e       	mov	r0, r31
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	5f 2e       	mov	r5, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	5b ae       	std	Y+59, r5	; 0x3b
     810:	68 94       	set
     812:	bb 24       	eor	r11, r11
     814:	b2 f8       	bld	r11, 2
     816:	bc ae       	std	Y+60, r11	; 0x3c
	uint8 senha2[4] = {0, 0, 0, 0};
     818:	21 96       	adiw	r28, 0x01	; 1
     81a:	1c ae       	std	Y+60, r1	; 0x3c
     81c:	1d ae       	std	Y+61, r1	; 0x3d
     81e:	1e ae       	std	Y+62, r1	; 0x3e
     820:	1f ae       	std	Y+63, r1	; 0x3f
     822:	21 97       	sbiw	r28, 0x01	; 1
	int i = 0;
	int d = 0;

	keypadSetPort(&keypad, &DDRD, &PORTD, &PIND, PD0, &DDRD, &PORTD, PD4);
     824:	4e 01       	movw	r8, r28
     826:	8a e2       	ldi	r24, 0x2A	; 42
     828:	88 0e       	add	r8, r24
     82a:	91 1c       	adc	r9, r1
     82c:	68 94       	set
     82e:	aa 24       	eor	r10, r10
     830:	a2 f8       	bld	r10, 2
     832:	0f 2e       	mov	r0, r31
     834:	fb e2       	ldi	r31, 0x2B	; 43
     836:	cf 2e       	mov	r12, r31
     838:	d1 2c       	mov	r13, r1
     83a:	f0 2d       	mov	r31, r0
     83c:	0f 2e       	mov	r0, r31
     83e:	fa e2       	ldi	r31, 0x2A	; 42
     840:	ef 2e       	mov	r14, r31
     842:	f1 2c       	mov	r15, r1
     844:	f0 2d       	mov	r31, r0
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	29 e2       	ldi	r18, 0x29	; 41
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	4b e2       	ldi	r20, 0x2B	; 43
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	6a e2       	ldi	r22, 0x2A	; 42
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	c4 01       	movw	r24, r8
     856:	0e 94 cf 00 	call	0x19e	; 0x19e <keypadSetPort>
	keypadSetKeys(&keypad, KEYPAD_4X4,
     85a:	1f 92       	push	r1
     85c:	6f 92       	push	r6
     85e:	1f 92       	push	r1
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	8f 93       	push	r24
     864:	1f 92       	push	r1
     866:	8b e0       	ldi	r24, 0x0B	; 11
     868:	8f 93       	push	r24
     86a:	1f 92       	push	r1
     86c:	8a e0       	ldi	r24, 0x0A	; 10
     86e:	8f 93       	push	r24
     870:	1f 92       	push	r1
     872:	4f 92       	push	r4
     874:	1f 92       	push	r1
     876:	5f 92       	push	r5
     878:	1f 92       	push	r1
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	8f 93       	push	r24
     87e:	1f 92       	push	r1
     880:	89 e0       	ldi	r24, 0x09	; 9
     882:	8f 93       	push	r24
     884:	1f 92       	push	r1
     886:	1f 92       	push	r1
     888:	1f 92       	push	r1
     88a:	7f 92       	push	r7
     88c:	1f 92       	push	r1
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	8f 93       	push	r24
     892:	1f 92       	push	r1
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	8f 93       	push	r24
     898:	1f 92       	push	r1
     89a:	8e e0       	ldi	r24, 0x0E	; 14
     89c:	8f 93       	push	r24
     89e:	1f 92       	push	r1
     8a0:	1f 93       	push	r17
     8a2:	1f 92       	push	r1
     8a4:	bf 92       	push	r11
     8a6:	1f 92       	push	r1
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	8f 93       	push	r24
     8ac:	1f 93       	push	r17
     8ae:	9f 92       	push	r9
     8b0:	8f 92       	push	r8
     8b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <keypadSetKeys>
	              0x07, 0x04, 0x01, 0x0E,
	              0x08, 0x05, 0x02, 0x00,
	              0x09, 0x06, 0x03, 0x0F,
	              0x0A, 0x0B, 0x0C, 0x0D);
	keypadInit(&keypad, 10);
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	c4 01       	movw	r24, r8
     8c4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <keypadInit>

	lcdSetControlPort(&display, &DDRC, &PORTC, PC2, PC0);
     8c8:	22 e0       	ldi	r18, 0x02	; 2
     8ca:	48 e2       	ldi	r20, 0x28	; 40
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	67 e2       	ldi	r22, 0x27	; 39
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	ce 01       	movw	r24, r28
     8d4:	4d 96       	adiw	r24, 0x1d	; 29
     8d6:	0e 94 c3 05 	call	0xb86	; 0xb86 <lcdSetControlPort>
	lcdSetDataPort(&display, &DDRB, &PORTB, PB0);
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	45 e2       	ldi	r20, 0x25	; 37
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	64 e2       	ldi	r22, 0x24	; 36
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	ce 01       	movw	r24, r28
     8e6:	4d 96       	adiw	r24, 0x1d	; 29
     8e8:	0e 94 b3 05 	call	0xb66	; 0xb66 <lcdSetDataPort>
	lcdInit(&display, LCD_16X2, LCD_FONT_5X8);
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	68 e0       	ldi	r22, 0x08	; 8
     8f0:	ce 01       	movw	r24, r28
     8f2:	4d 96       	adiw	r24, 0x1d	; 29
     8f4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <lcdInit>
	lcdStdio(&display);
     8f8:	ce 01       	movw	r24, r28
     8fa:	4d 96       	adiw	r24, 0x1d	; 29
     8fc:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdStdio>
	printf("   cofre ACME   \n1.0  04/09/2017");
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
     90c:	bf ef       	ldi	r27, 0xFF	; 255
     90e:	e3 ed       	ldi	r30, 0xD3	; 211
     910:	f0 e3       	ldi	r31, 0x30	; 48
     912:	b1 50       	subi	r27, 0x01	; 1
     914:	e0 40       	sbci	r30, 0x00	; 0
     916:	f0 40       	sbci	r31, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
     91c:	00 00       	nop
	_delay_ms(1000);
	lcdClearScreen(&display);
     91e:	ce 01       	movw	r24, r28
     920:	4d 96       	adiw	r24, 0x1d	; 29
     922:	0e 94 cd 06 	call	0xd9a	; 0xd9a <lcdClearScreen>
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
	attachLcd(display);
	attachKeypad(keypad);
	uint8 tecla;
	uint8 senha[4] = {1, 2, 3, 4};
	uint8 senha2[4] = {0, 0, 0, 0};
	int i = 0;
     92a:	e1 2c       	mov	r14, r1
     92c:	f1 2c       	mov	r15, r1
     92e:	0f 2e       	mov	r0, r31
     930:	fd e3       	ldi	r31, 0x3D	; 61
     932:	8f 2e       	mov	r8, r31
     934:	91 2c       	mov	r9, r1
     936:	f0 2d       	mov	r31, r0
     938:	8c 0e       	add	r8, r28
     93a:	9d 1e       	adc	r9, r29
     93c:	24 e0       	ldi	r18, 0x04	; 4
     93e:	82 0e       	add	r8, r18
     940:	91 1c       	adc	r9, r1
	while(1) {

		tecla = keypadRead(&keypad);

		if(tecla != 0xFF) {
			switch(tecla) {
     942:	41 2c       	mov	r4, r1
     944:	51 2c       	mov	r5, r1
				while(i < 4) {
					if(senha2[i] == senha[i]) {
						d++;
					}

					printf("%u", senha2[i]);
     946:	0f 2e       	mov	r0, r31
     948:	f8 e3       	ldi	r31, 0x38	; 56
     94a:	6f 2e       	mov	r6, r31
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	7f 2e       	mov	r7, r31
     950:	f0 2d       	mov	r31, r0
				printf("* ");
				senha2[i] = 8;
				i++;
				break;
			case 9:
				printf("* ");
     952:	05 e3       	ldi	r16, 0x35	; 53
     954:	11 e0       	ldi	r17, 0x01	; 1
				senha2[i] = 9;
     956:	0f 2e       	mov	r0, r31
     958:	f9 e0       	ldi	r31, 0x09	; 9
     95a:	3f 2e       	mov	r3, r31
     95c:	f0 2d       	mov	r31, r0
				senha2[i] = 7;
				i++;
				break;
			case 8:
				printf("* ");
				senha2[i] = 8;
     95e:	68 94       	set
     960:	22 24       	eor	r2, r2
     962:	23 f8       	bld	r2, 3
	_delay_ms(1000);
	lcdClearScreen(&display);

	while(1) {

		tecla = keypadRead(&keypad);
     964:	ce 01       	movw	r24, r28
     966:	8a 96       	adiw	r24, 0x2a	; 42
     968:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <keypadRead>

		if(tecla != 0xFF) {
     96c:	8f 3f       	cpi	r24, 0xFF	; 255
     96e:	d1 f3       	breq	.-12     	; 0x964 <__stack+0x65>
			switch(tecla) {
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	80 31       	cpi	r24, 0x10	; 16
     974:	91 05       	cpc	r25, r1
     976:	b0 f7       	brcc	.-20     	; 0x964 <__stack+0x65>
     978:	fc 01       	movw	r30, r24
     97a:	ec 5c       	subi	r30, 0xCC	; 204
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
			case 0:
				printf("* ");
     982:	1f 93       	push	r17
     984:	0f 93       	push	r16
     986:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 0;
     98a:	ed e3       	ldi	r30, 0x3D	; 61
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ec 0f       	add	r30, r28
     990:	fd 1f       	adc	r31, r29
     992:	ee 0d       	add	r30, r14
     994:	ff 1d       	adc	r31, r15
     996:	10 82       	st	Z, r1
				i++;
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	e8 1a       	sub	r14, r24
     99c:	f8 0a       	sbc	r15, r24
				break;
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	e0 cf       	rjmp	.-64     	; 0x964 <__stack+0x65>
			case 1:
				printf("* ");
     9a4:	1f 93       	push	r17
     9a6:	0f 93       	push	r16
     9a8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 1;
     9ac:	ed e3       	ldi	r30, 0x3D	; 61
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	ec 0f       	add	r30, r28
     9b2:	fd 1f       	adc	r31, r29
     9b4:	ee 0d       	add	r30, r14
     9b6:	ff 1d       	adc	r31, r15
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 83       	st	Z, r24
				i++;
     9bc:	9f ef       	ldi	r25, 0xFF	; 255
     9be:	e9 1a       	sub	r14, r25
     9c0:	f9 0a       	sbc	r15, r25
				break;
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	ce cf       	rjmp	.-100    	; 0x964 <__stack+0x65>
			case 2:
				printf("* ");
     9c8:	1f 93       	push	r17
     9ca:	0f 93       	push	r16
     9cc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 2;
     9d0:	ed e3       	ldi	r30, 0x3D	; 61
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ec 0f       	add	r30, r28
     9d6:	fd 1f       	adc	r31, r29
     9d8:	ee 0d       	add	r30, r14
     9da:	ff 1d       	adc	r31, r15
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	80 83       	st	Z, r24
				i++;
     9e0:	af ef       	ldi	r26, 0xFF	; 255
     9e2:	ea 1a       	sub	r14, r26
     9e4:	fa 0a       	sbc	r15, r26
				break;
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	bc cf       	rjmp	.-136    	; 0x964 <__stack+0x65>
			case 3:
				printf("* ");
     9ec:	1f 93       	push	r17
     9ee:	0f 93       	push	r16
     9f0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 3;
     9f4:	ed e3       	ldi	r30, 0x3D	; 61
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	ec 0f       	add	r30, r28
     9fa:	fd 1f       	adc	r31, r29
     9fc:	ee 0d       	add	r30, r14
     9fe:	ff 1d       	adc	r31, r15
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	80 83       	st	Z, r24
				i++;
     a04:	bf ef       	ldi	r27, 0xFF	; 255
     a06:	eb 1a       	sub	r14, r27
     a08:	fb 0a       	sbc	r15, r27
				break;
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	aa cf       	rjmp	.-172    	; 0x964 <__stack+0x65>
			case 4:
				printf("* ");
     a10:	1f 93       	push	r17
     a12:	0f 93       	push	r16
     a14:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 4;
     a18:	ed e3       	ldi	r30, 0x3D	; 61
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 0f       	add	r30, r28
     a1e:	fd 1f       	adc	r31, r29
     a20:	ee 0d       	add	r30, r14
     a22:	ff 1d       	adc	r31, r15
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 83       	st	Z, r24
				i++;
     a28:	ef ef       	ldi	r30, 0xFF	; 255
     a2a:	ee 1a       	sub	r14, r30
     a2c:	fe 0a       	sbc	r15, r30
				break;
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	98 cf       	rjmp	.-208    	; 0x964 <__stack+0x65>
			case 5:
				printf("* ");
     a34:	1f 93       	push	r17
     a36:	0f 93       	push	r16
     a38:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 5;
     a3c:	ed e3       	ldi	r30, 0x3D	; 61
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	ec 0f       	add	r30, r28
     a42:	fd 1f       	adc	r31, r29
     a44:	ee 0d       	add	r30, r14
     a46:	ff 1d       	adc	r31, r15
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	80 83       	st	Z, r24
				i++;
     a4c:	ff ef       	ldi	r31, 0xFF	; 255
     a4e:	ef 1a       	sub	r14, r31
     a50:	ff 0a       	sbc	r15, r31
				break;
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	86 cf       	rjmp	.-244    	; 0x964 <__stack+0x65>
			case 6:
				printf("* ");
     a58:	1f 93       	push	r17
     a5a:	0f 93       	push	r16
     a5c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 6;
     a60:	ed e3       	ldi	r30, 0x3D	; 61
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ec 0f       	add	r30, r28
     a66:	fd 1f       	adc	r31, r29
     a68:	ee 0d       	add	r30, r14
     a6a:	ff 1d       	adc	r31, r15
     a6c:	86 e0       	ldi	r24, 0x06	; 6
     a6e:	80 83       	st	Z, r24
				i++;
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	e2 1a       	sub	r14, r18
     a74:	f2 0a       	sbc	r15, r18
				break;
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	74 cf       	rjmp	.-280    	; 0x964 <__stack+0x65>
			case 7:
				printf("* ");
     a7c:	1f 93       	push	r17
     a7e:	0f 93       	push	r16
     a80:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 7;
     a84:	ed e3       	ldi	r30, 0x3D	; 61
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	ec 0f       	add	r30, r28
     a8a:	fd 1f       	adc	r31, r29
     a8c:	ee 0d       	add	r30, r14
     a8e:	ff 1d       	adc	r31, r15
     a90:	87 e0       	ldi	r24, 0x07	; 7
     a92:	80 83       	st	Z, r24
				i++;
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	e8 1a       	sub	r14, r24
     a98:	f8 0a       	sbc	r15, r24
				break;
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	62 cf       	rjmp	.-316    	; 0x964 <__stack+0x65>
			case 8:
				printf("* ");
     aa0:	1f 93       	push	r17
     aa2:	0f 93       	push	r16
     aa4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 8;
     aa8:	ed e3       	ldi	r30, 0x3D	; 61
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ec 0f       	add	r30, r28
     aae:	fd 1f       	adc	r31, r29
     ab0:	ee 0d       	add	r30, r14
     ab2:	ff 1d       	adc	r31, r15
     ab4:	20 82       	st	Z, r2
				i++;
     ab6:	9f ef       	ldi	r25, 0xFF	; 255
     ab8:	e9 1a       	sub	r14, r25
     aba:	f9 0a       	sbc	r15, r25
				break;
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	51 cf       	rjmp	.-350    	; 0x964 <__stack+0x65>
			case 9:
				printf("* ");
     ac2:	1f 93       	push	r17
     ac4:	0f 93       	push	r16
     ac6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				senha2[i] = 9;
     aca:	ed e3       	ldi	r30, 0x3D	; 61
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	ec 0f       	add	r30, r28
     ad0:	fd 1f       	adc	r31, r29
     ad2:	ee 0d       	add	r30, r14
     ad4:	ff 1d       	adc	r31, r15
     ad6:	30 82       	st	Z, r3
				i++;
     ad8:	af ef       	ldi	r26, 0xFF	; 255
     ada:	ea 1a       	sub	r14, r26
     adc:	fa 0a       	sbc	r15, r26
				break;
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	40 cf       	rjmp	.-384    	; 0x964 <__stack+0x65>
			case 0x0E:
				lcdClearScreen(&display);
     ae4:	ce 01       	movw	r24, r28
     ae6:	4d 96       	adiw	r24, 0x1d	; 29
     ae8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <lcdClearScreen>
				i = 0;
     aec:	e4 2c       	mov	r14, r4
     aee:	f5 2c       	mov	r15, r5
				d = 0;
				break;
     af0:	39 cf       	rjmp	.-398    	; 0x964 <__stack+0x65>
     af2:	fe 01       	movw	r30, r28
     af4:	fd 96       	adiw	r30, 0x3d	; 61
     af6:	7f 01       	movw	r14, r30
     af8:	ce 01       	movw	r24, r28
     afa:	c9 96       	adiw	r24, 0x39	; 57
     afc:	6c 01       	movw	r12, r24
	while(1) {

		tecla = keypadRead(&keypad);

		if(tecla != 0xFF) {
			switch(tecla) {
     afe:	a4 2c       	mov	r10, r4
     b00:	b5 2c       	mov	r11, r5
				d = 0;
				break;
			case 0x0F:
				i = 0;
				while(i < 4) {
					if(senha2[i] == senha[i]) {
     b02:	d7 01       	movw	r26, r14
     b04:	8d 91       	ld	r24, X+
     b06:	7d 01       	movw	r14, r26
     b08:	f6 01       	movw	r30, r12
     b0a:	91 91       	ld	r25, Z+
     b0c:	6f 01       	movw	r12, r30
     b0e:	89 13       	cpse	r24, r25
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <__stack+0x219>
						d++;
     b12:	ff ef       	ldi	r31, 0xFF	; 255
     b14:	af 1a       	sub	r10, r31
     b16:	bf 0a       	sbc	r11, r31
					}

					printf("%u", senha2[i]);
     b18:	1f 92       	push	r1
     b1a:	8f 93       	push	r24
     b1c:	7f 92       	push	r7
     b1e:	6f 92       	push	r6
     b20:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
				i = 0;
				d = 0;
				break;
			case 0x0F:
				i = 0;
				while(i < 4) {
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	e8 14       	cp	r14, r8
     b2e:	f9 04       	cpc	r15, r9
     b30:	41 f7       	brne	.-48     	; 0xb02 <__stack+0x203>
					printf("%u", senha2[i]);
					i++;
					//printf("%i", d);
				}

				if(d == 4) {
     b32:	24 e0       	ldi	r18, 0x04	; 4
     b34:	a2 16       	cp	r10, r18
     b36:	b1 04       	cpc	r11, r1
     b38:	69 f4       	brne	.+26     	; 0xb54 <__stack+0x255>
					printf("\nSenha Correta");
     b3a:	ab e3       	ldi	r26, 0x3B	; 59
     b3c:	b1 e0       	ldi	r27, 0x01	; 1
     b3e:	bf 93       	push	r27
     b40:	af 93       	push	r26
     b42:	0e 94 b4 0c 	call	0x1968	; 0x1968 <printf>
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
					if(senha2[i] == senha[i]) {
						d++;
					}

					printf("%u", senha2[i]);
					i++;
     b4a:	68 94       	set
     b4c:	ee 24       	eor	r14, r14
     b4e:	e2 f8       	bld	r14, 2
     b50:	f1 2c       	mov	r15, r1
     b52:	08 cf       	rjmp	.-496    	; 0x964 <__stack+0x65>
				if(d == 4) {
					printf("\nSenha Correta");

				}
				if(d != 4) {
					printf("\nSenha Incorreta\n");
     b54:	8a e4       	ldi	r24, 0x4A	; 74
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 c8 0c 	call	0x1990	; 0x1990 <puts>
					if(senha2[i] == senha[i]) {
						d++;
					}

					printf("%u", senha2[i]);
					i++;
     b5c:	68 94       	set
     b5e:	ee 24       	eor	r14, r14
     b60:	e2 f8       	bld	r14, 2
     b62:	f1 2c       	mov	r15, r1
     b64:	ff ce       	rjmp	.-514    	; 0x964 <__stack+0x65>

00000b66 <lcdSetDataPort>:
 *				dataFirst	Position of the first bit of the LCD data nibble
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdSetDataPort(volatile lcdConfiguration_t * lcd, volatile uint8 * dataDDR, volatile uint8 * dataPORT, uint8 dataFirst)
{
     b66:	fc 01       	movw	r30, r24
	lcd->dataDDR = dataDDR;
     b68:	71 83       	std	Z+1, r23	; 0x01
     b6a:	60 83       	st	Z, r22
	lcd->dataPORT = dataPORT;
     b6c:	53 83       	std	Z+3, r21	; 0x03
     b6e:	42 83       	std	Z+2, r20	; 0x02
	lcd->dataFirst = dataFirst;
     b70:	82 2f       	mov	r24, r18
     b72:	87 70       	andi	r24, 0x07	; 7
     b74:	24 81       	ldd	r18, Z+4	; 0x04
     b76:	28 7f       	andi	r18, 0xF8	; 248
     b78:	28 2b       	or	r18, r24
     b7a:	24 83       	std	Z+4, r18	; 0x04
	lcd->dataPortConfigured = TRUE;
     b7c:	84 85       	ldd	r24, Z+12	; 0x0c
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	84 87       	std	Z+12, r24	; 0x0c

	return LCD_OK;
}
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret

00000b86 <lcdSetControlPort>:
 *				controlRS	Position of pin RS at the control register
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdSetControlPort(volatile lcdConfiguration_t * lcd, volatile uint8 * controlDDR, volatile uint8 * controlPORT, uint8 controlE, uint8 controlRS)
{
     b86:	0f 93       	push	r16
     b88:	fc 01       	movw	r30, r24
	lcd->controlDDR = controlDDR;
     b8a:	76 83       	std	Z+6, r23	; 0x06
     b8c:	65 83       	std	Z+5, r22	; 0x05
	lcd->controlPORT = controlPORT;
     b8e:	50 87       	std	Z+8, r21	; 0x08
     b90:	47 83       	std	Z+7, r20	; 0x07
	lcd->controlE = controlE;
     b92:	27 70       	andi	r18, 0x07	; 7
     b94:	22 0f       	add	r18, r18
     b96:	22 0f       	add	r18, r18
     b98:	22 0f       	add	r18, r18
     b9a:	81 85       	ldd	r24, Z+9	; 0x09
     b9c:	87 7c       	andi	r24, 0xC7	; 199
     b9e:	28 2b       	or	r18, r24
     ba0:	21 87       	std	Z+9, r18	; 0x09
	lcd->controlRS = controlRS;
     ba2:	80 2f       	mov	r24, r16
     ba4:	87 70       	andi	r24, 0x07	; 7
     ba6:	01 85       	ldd	r16, Z+9	; 0x09
     ba8:	08 7f       	andi	r16, 0xF8	; 248
     baa:	08 2b       	or	r16, r24
     bac:	01 87       	std	Z+9, r16	; 0x09
	lcd->controlPortConfigured = TRUE;
     bae:	84 85       	ldd	r24, Z+12	; 0x0c
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	84 87       	std	Z+12, r24	; 0x0c

	return LCD_OK;
}
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <lcdStdio>:
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdStdio(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
     bba:	fc 01       	movw	r30, r24
     bbc:	24 85       	ldd	r18, Z+12	; 0x0c
     bbe:	23 ff       	sbrs	r18, 3
     bc0:	14 c0       	rjmp	.+40     	; 0xbea <lcdStdio+0x30>
		return LCD_NOT_INITIALIZED;
	}

	stdin = stdout = stderr = &lcdStream;
     bc2:	26 e0       	ldi	r18, 0x06	; 6
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	30 93 67 01 	sts	0x0167, r19
     bca:	20 93 66 01 	sts	0x0166, r18
     bce:	30 93 65 01 	sts	0x0165, r19
     bd2:	20 93 64 01 	sts	0x0164, r18
     bd6:	30 93 63 01 	sts	0x0163, r19
     bda:	20 93 62 01 	sts	0x0162, r18
	defaultDisplay = lcd;
     bde:	90 93 5d 01 	sts	0x015D, r25
     be2:	80 93 5c 01 	sts	0x015C, r24

	return LCD_OK;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
 * -------------------------------------------------------------------------- */

lcdResult_t lcdStdio(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     bea:	87 e0       	ldi	r24, 0x07	; 7

	stdin = stdout = stderr = &lcdStream;
	defaultDisplay = lcd;

	return LCD_OK;
}
     bec:	08 95       	ret

00000bee <lcdWriteCommand>:
 *				command		Command to be sent to LCD
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCommand(volatile lcdConfiguration_t * lcd, uint8 command)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	fc 01       	movw	r30, r24
	clrBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
     bf4:	a7 81       	ldd	r26, Z+7	; 0x07
     bf6:	b0 85       	ldd	r27, Z+8	; 0x08
     bf8:	4c 91       	ld	r20, X
     bfa:	21 85       	ldd	r18, Z+9	; 0x09
     bfc:	27 70       	andi	r18, 0x07	; 7
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	ec 01       	movw	r28, r24
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <lcdWriteCommand+0x1c>
     c06:	cc 0f       	add	r28, r28
     c08:	dd 1f       	adc	r29, r29
     c0a:	2a 95       	dec	r18
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <lcdWriteCommand+0x18>
     c0e:	9e 01       	movw	r18, r28
     c10:	20 95       	com	r18
     c12:	24 23       	and	r18, r20
     c14:	2c 93       	st	X, r18
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
     c16:	a7 81       	ldd	r26, Z+7	; 0x07
     c18:	b0 85       	ldd	r27, Z+8	; 0x08
     c1a:	4c 91       	ld	r20, X
     c1c:	21 85       	ldd	r18, Z+9	; 0x09
     c1e:	26 95       	lsr	r18
     c20:	26 95       	lsr	r18
     c22:	26 95       	lsr	r18
     c24:	27 70       	andi	r18, 0x07	; 7
     c26:	ec 01       	movw	r28, r24
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <lcdWriteCommand+0x40>
     c2a:	cc 0f       	add	r28, r28
     c2c:	dd 1f       	adc	r29, r29
     c2e:	2a 95       	dec	r18
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <lcdWriteCommand+0x3c>
     c32:	9e 01       	movw	r18, r28
     c34:	20 95       	com	r18
     c36:	24 23       	and	r18, r20
     c38:	2c 93       	st	X, r18
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (higher nibble)
     c3a:	a2 81       	ldd	r26, Z+2	; 0x02
     c3c:	b3 81       	ldd	r27, Z+3	; 0x03
     c3e:	7c 91       	ld	r23, X
     c40:	24 81       	ldd	r18, Z+4	; 0x04
     c42:	27 70       	andi	r18, 0x07	; 7
     c44:	4f e0       	ldi	r20, 0x0F	; 15
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	ea 01       	movw	r28, r20
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <lcdWriteCommand+0x62>
     c4c:	cc 0f       	add	r28, r28
     c4e:	dd 1f       	adc	r29, r29
     c50:	2a 95       	dec	r18
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <lcdWriteCommand+0x5e>
     c54:	9e 01       	movw	r18, r28
     c56:	20 95       	com	r18
     c58:	27 23       	and	r18, r23
     c5a:	2c 93       	st	X, r18
	*(lcd->dataPORT) |= ((command >> 4) << lcd->dataFirst);
     c5c:	a2 81       	ldd	r26, Z+2	; 0x02
     c5e:	b3 81       	ldd	r27, Z+3	; 0x03
     c60:	3c 91       	ld	r19, X
     c62:	44 81       	ldd	r20, Z+4	; 0x04
     c64:	47 70       	andi	r20, 0x07	; 7
     c66:	26 2f       	mov	r18, r22
     c68:	22 95       	swap	r18
     c6a:	2f 70       	andi	r18, 0x0F	; 15
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <lcdWriteCommand+0x82>
     c6e:	22 0f       	add	r18, r18
     c70:	4a 95       	dec	r20
     c72:	ea f7       	brpl	.-6      	; 0xc6e <lcdWriteCommand+0x80>
     c74:	23 2b       	or	r18, r19
     c76:	2c 93       	st	X, r18
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     c78:	a7 81       	ldd	r26, Z+7	; 0x07
     c7a:	b0 85       	ldd	r27, Z+8	; 0x08
     c7c:	3c 91       	ld	r19, X
     c7e:	21 85       	ldd	r18, Z+9	; 0x09
     c80:	26 95       	lsr	r18
     c82:	26 95       	lsr	r18
     c84:	26 95       	lsr	r18
     c86:	27 70       	andi	r18, 0x07	; 7
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <lcdWriteCommand+0xa0>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	2a 95       	dec	r18
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <lcdWriteCommand+0x9c>
     c92:	83 2b       	or	r24, r19
     c94:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c96:	d5 e0       	ldi	r29, 0x05	; 5
     c98:	da 95       	dec	r29
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <lcdWriteCommand+0xaa>
     c9c:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     c9e:	a7 81       	ldd	r26, Z+7	; 0x07
     ca0:	b0 85       	ldd	r27, Z+8	; 0x08
     ca2:	4c 91       	ld	r20, X
     ca4:	81 85       	ldd	r24, Z+9	; 0x09
     ca6:	86 95       	lsr	r24
     ca8:	86 95       	lsr	r24
     caa:	86 95       	lsr	r24
     cac:	87 70       	andi	r24, 0x07	; 7
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	e9 01       	movw	r28, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <lcdWriteCommand+0xcc>
     cb6:	cc 0f       	add	r28, r28
     cb8:	dd 1f       	adc	r29, r29
     cba:	8a 95       	dec	r24
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <lcdWriteCommand+0xc8>
     cbe:	ce 01       	movw	r24, r28
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	d5 e0       	ldi	r29, 0x05	; 5
     cc8:	da 95       	dec	r29
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <lcdWriteCommand+0xda>
     ccc:	00 00       	nop
	_delay_us(1);
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (lower nibble)
     cce:	a2 81       	ldd	r26, Z+2	; 0x02
     cd0:	b3 81       	ldd	r27, Z+3	; 0x03
     cd2:	4c 91       	ld	r20, X
     cd4:	84 81       	ldd	r24, Z+4	; 0x04
     cd6:	87 70       	andi	r24, 0x07	; 7
     cd8:	2f e0       	ldi	r18, 0x0F	; 15
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	e9 01       	movw	r28, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <lcdWriteCommand+0xf6>
     ce0:	cc 0f       	add	r28, r28
     ce2:	dd 1f       	adc	r29, r29
     ce4:	8a 95       	dec	r24
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <lcdWriteCommand+0xf2>
     ce8:	ce 01       	movw	r24, r28
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
	*(lcd->dataPORT) |= ((command & 0x0F) << lcd->dataFirst);
     cf0:	a2 81       	ldd	r26, Z+2	; 0x02
     cf2:	b3 81       	ldd	r27, Z+3	; 0x03
     cf4:	9c 91       	ld	r25, X
     cf6:	24 81       	ldd	r18, Z+4	; 0x04
     cf8:	27 70       	andi	r18, 0x07	; 7
     cfa:	86 2f       	mov	r24, r22
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <lcdWriteCommand+0x114>
     d00:	88 0f       	add	r24, r24
     d02:	2a 95       	dec	r18
     d04:	ea f7       	brpl	.-6      	; 0xd00 <lcdWriteCommand+0x112>
     d06:	89 2b       	or	r24, r25
     d08:	8c 93       	st	X, r24
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
     d0a:	a7 81       	ldd	r26, Z+7	; 0x07
     d0c:	b0 85       	ldd	r27, Z+8	; 0x08
     d0e:	4c 91       	ld	r20, X
     d10:	91 85       	ldd	r25, Z+9	; 0x09
     d12:	96 95       	lsr	r25
     d14:	96 95       	lsr	r25
     d16:	96 95       	lsr	r25
     d18:	97 70       	andi	r25, 0x07	; 7
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	e9 01       	movw	r28, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <lcdWriteCommand+0x138>
     d22:	cc 0f       	add	r28, r28
     d24:	dd 1f       	adc	r29, r29
     d26:	9a 95       	dec	r25
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <lcdWriteCommand+0x134>
     d2a:	ce 01       	movw	r24, r28
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	d5 e0       	ldi	r29, 0x05	; 5
     d32:	da 95       	dec	r29
     d34:	f1 f7       	brne	.-4      	; 0xd32 <lcdWriteCommand+0x144>
     d36:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
     d38:	a7 81       	ldd	r26, Z+7	; 0x07
     d3a:	b0 85       	ldd	r27, Z+8	; 0x08
     d3c:	4c 91       	ld	r20, X
     d3e:	81 85       	ldd	r24, Z+9	; 0x09
     d40:	86 95       	lsr	r24
     d42:	86 95       	lsr	r24
     d44:	86 95       	lsr	r24
     d46:	87 70       	andi	r24, 0x07	; 7
     d48:	e9 01       	movw	r28, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <lcdWriteCommand+0x162>
     d4c:	cc 0f       	add	r28, r28
     d4e:	dd 1f       	adc	r29, r29
     d50:	8a 95       	dec	r24
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <lcdWriteCommand+0x15e>
     d54:	ce 01       	movw	r24, r28
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	d5 e0       	ldi	r29, 0x05	; 5
     d5e:	da 95       	dec	r29
     d60:	f1 f7       	brne	.-4      	; 0xd5e <lcdWriteCommand+0x170>
     d62:	00 00       	nop
	_delay_us(1);
	if((command == LCD_CLEAR_SCREEN) || (command == LCD_CURSOR_HOME)) {
     d64:	61 50       	subi	r22, 0x01	; 1
     d66:	62 30       	cpi	r22, 0x02	; 2
     d68:	80 f4       	brcc	.+32     	; 0xd8a <lcdWriteCommand+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d6a:	8f e3       	ldi	r24, 0x3F	; 63
     d6c:	9f e1       	ldi	r25, 0x1F	; 31
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <lcdWriteCommand+0x180>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <lcdWriteCommand+0x186>
     d74:	00 00       	nop
		_delay_ms(2);
		lcd->cursorLine = 0;
     d76:	83 85       	ldd	r24, Z+11	; 0x0b
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	83 87       	std	Z+11, r24	; 0x0b
     d7c:	84 85       	ldd	r24, Z+12	; 0x0c
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	84 87       	std	Z+12, r24	; 0x0c
		lcd->cursorColumn = 0;
     d82:	83 85       	ldd	r24, Z+11	; 0x0b
     d84:	81 78       	andi	r24, 0x81	; 129
     d86:	83 87       	std	Z+11, r24	; 0x0b
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <lcdWriteCommand+0x1a4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d8a:	95 ed       	ldi	r25, 0xD5	; 213
     d8c:	9a 95       	dec	r25
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcdWriteCommand+0x19e>
     d90:	00 00       	nop
	} else {
		_delay_us(40);
	}

	return LCD_OK;
}
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <lcdClearScreen>:
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdClearScreen(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
     d9a:	fc 01       	movw	r30, r24
     d9c:	24 85       	ldd	r18, Z+12	; 0x0c
     d9e:	23 ff       	sbrs	r18, 3
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <lcdClearScreen+0x10>
		return LCD_NOT_INITIALIZED;
	}

	return lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>
     da8:	08 95       	ret
 * -------------------------------------------------------------------------- */

lcdResult_t lcdClearScreen(volatile lcdConfiguration_t * lcd)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     daa:	87 e0       	ldi	r24, 0x07	; 7
	}

	return lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
}
     dac:	08 95       	ret

00000dae <lcdCursorGoTo>:
 *				LCD_UNSUPPORTED_PARAMETER
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdCursorGoTo(volatile lcdConfiguration_t * lcd, uint8 line, uint8 column)
{
     dae:	dc 01       	movw	r26, r24
	uint8 address = 0x00;

	if(lcd->initialized == FALSE) {
     db0:	1c 96       	adiw	r26, 0x0c	; 12
     db2:	8c 91       	ld	r24, X
     db4:	1c 97       	sbiw	r26, 0x0c	; 12
     db6:	83 ff       	sbrs	r24, 3
     db8:	a5 c0       	rjmp	.+330    	; 0xf04 <lcdCursorGoTo+0x156>
		return LCD_NOT_INITIALIZED;
	}

	if(line == 1) {
     dba:	61 30       	cpi	r22, 0x01	; 1
     dbc:	b1 f4       	brne	.+44     	; 0xdea <lcdCursorGoTo+0x3c>
		switch(lcd->size) {
     dbe:	19 96       	adiw	r26, 0x09	; 9
     dc0:	9c 91       	ld	r25, X
     dc2:	19 97       	sbiw	r26, 0x09	; 9
     dc4:	92 95       	swap	r25
     dc6:	96 95       	lsr	r25
     dc8:	96 95       	lsr	r25
     dca:	93 70       	andi	r25, 0x03	; 3
     dcc:	1a 96       	adiw	r26, 0x0a	; 10
     dce:	8c 91       	ld	r24, X
     dd0:	1a 97       	sbiw	r26, 0x0a	; 10
     dd2:	87 70       	andi	r24, 0x07	; 7
     dd4:	88 0f       	add	r24, r24
     dd6:	88 0f       	add	r24, r24
     dd8:	89 2b       	or	r24, r25
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	42 97       	sbiw	r24, 0x12	; 18
     de0:	08 f0       	brcs	.+2      	; 0xde4 <lcdCursorGoTo+0x36>
     de2:	92 c0       	rjmp	.+292    	; 0xf08 <lcdCursorGoTo+0x15a>
		case LCD_32X2:
		case LCD_40X2:
		case LCD_12X4:
		case LCD_16X4:
		case LCD_20X4:
			address += (column - 1);
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	94 0f       	add	r25, r20
     de8:	68 c0       	rjmp	.+208    	; 0xeba <lcdCursorGoTo+0x10c>
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else if(line == 2) {
     dea:	62 30       	cpi	r22, 0x02	; 2
     dec:	f1 f4       	brne	.+60     	; 0xe2a <lcdCursorGoTo+0x7c>
		switch(lcd->size) {
     dee:	19 96       	adiw	r26, 0x09	; 9
     df0:	9c 91       	ld	r25, X
     df2:	19 97       	sbiw	r26, 0x09	; 9
     df4:	92 95       	swap	r25
     df6:	96 95       	lsr	r25
     df8:	96 95       	lsr	r25
     dfa:	93 70       	andi	r25, 0x03	; 3
     dfc:	1a 96       	adiw	r26, 0x0a	; 10
     dfe:	8c 91       	ld	r24, X
     e00:	1a 97       	sbiw	r26, 0x0a	; 10
     e02:	87 70       	andi	r24, 0x07	; 7
     e04:	88 0f       	add	r24, r24
     e06:	88 0f       	add	r24, r24
     e08:	89 2b       	or	r24, r25
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	82 31       	cpi	r24, 0x12	; 18
     e10:	91 05       	cpc	r25, r1
     e12:	08 f0       	brcs	.+2      	; 0xe16 <lcdCursorGoTo+0x68>
     e14:	7b c0       	rjmp	.+246    	; 0xf0c <lcdCursorGoTo+0x15e>
     e16:	8c 5b       	subi	r24, 0xBC	; 188
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	fc 01       	movw	r30, r24
     e1c:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
		case LCD_16X1:
		case LCD_16X1b:
		case LCD_20X1:
		case LCD_24X1:
		case LCD_40X1:
			return LCD_UNSUPPORTED_PARAMETER;
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	08 95       	ret
		case LCD_32X2:
		case LCD_40X2:
		case LCD_12X4:
		case LCD_16X4:
		case LCD_20X4:
			address += (0x40 + column - 1);
     e24:	9f e3       	ldi	r25, 0x3F	; 63
     e26:	94 0f       	add	r25, r20
     e28:	48 c0       	rjmp	.+144    	; 0xeba <lcdCursorGoTo+0x10c>
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else if(line == 3) {
     e2a:	63 30       	cpi	r22, 0x03	; 3
     e2c:	21 f5       	brne	.+72     	; 0xe76 <lcdCursorGoTo+0xc8>
		switch(lcd->size) {
     e2e:	19 96       	adiw	r26, 0x09	; 9
     e30:	9c 91       	ld	r25, X
     e32:	19 97       	sbiw	r26, 0x09	; 9
     e34:	92 95       	swap	r25
     e36:	96 95       	lsr	r25
     e38:	96 95       	lsr	r25
     e3a:	93 70       	andi	r25, 0x03	; 3
     e3c:	1a 96       	adiw	r26, 0x0a	; 10
     e3e:	8c 91       	ld	r24, X
     e40:	1a 97       	sbiw	r26, 0x0a	; 10
     e42:	87 70       	andi	r24, 0x07	; 7
     e44:	88 0f       	add	r24, r24
     e46:	88 0f       	add	r24, r24
     e48:	89 2b       	or	r24, r25
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	82 31       	cpi	r24, 0x12	; 18
     e50:	91 05       	cpc	r25, r1
     e52:	08 f0       	brcs	.+2      	; 0xe56 <lcdCursorGoTo+0xa8>
     e54:	5d c0       	rjmp	.+186    	; 0xf10 <lcdCursorGoTo+0x162>
     e56:	8a 5a       	subi	r24, 0xAA	; 170
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	fc 01       	movw	r30, r24
     e5c:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
		case LCD_20X2:
		case LCD_24X2:
		case LCD_30X2:
		case LCD_32X2:
		case LCD_40X2:
			return LCD_UNSUPPORTED_PARAMETER;
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	08 95       	ret
		case LCD_12X4:
			address += (0x0C + column - 1);
     e64:	9b e0       	ldi	r25, 0x0B	; 11
     e66:	94 0f       	add	r25, r20
			break;
     e68:	28 c0       	rjmp	.+80     	; 0xeba <lcdCursorGoTo+0x10c>
		case LCD_16X4:
			address += (0x10 + column - 1);
     e6a:	9f e0       	ldi	r25, 0x0F	; 15
     e6c:	94 0f       	add	r25, r20
			break;
     e6e:	25 c0       	rjmp	.+74     	; 0xeba <lcdCursorGoTo+0x10c>
		case LCD_20X4:
			address += (0x14 + column - 1);
     e70:	93 e1       	ldi	r25, 0x13	; 19
     e72:	94 0f       	add	r25, r20
			break;
     e74:	22 c0       	rjmp	.+68     	; 0xeba <lcdCursorGoTo+0x10c>
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	} else {
		switch(lcd->size) {
     e76:	19 96       	adiw	r26, 0x09	; 9
     e78:	9c 91       	ld	r25, X
     e7a:	19 97       	sbiw	r26, 0x09	; 9
     e7c:	92 95       	swap	r25
     e7e:	96 95       	lsr	r25
     e80:	96 95       	lsr	r25
     e82:	93 70       	andi	r25, 0x03	; 3
     e84:	1a 96       	adiw	r26, 0x0a	; 10
     e86:	8c 91       	ld	r24, X
     e88:	1a 97       	sbiw	r26, 0x0a	; 10
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	88 0f       	add	r24, r24
     e8e:	88 0f       	add	r24, r24
     e90:	89 2b       	or	r24, r25
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	82 31       	cpi	r24, 0x12	; 18
     e98:	91 05       	cpc	r25, r1
     e9a:	e0 f5       	brcc	.+120    	; 0xf14 <lcdCursorGoTo+0x166>
     e9c:	88 59       	subi	r24, 0x98	; 152
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	fc 01       	movw	r30, r24
     ea2:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
		case LCD_20X2:
		case LCD_24X2:
		case LCD_30X2:
		case LCD_32X2:
		case LCD_40X2:
			return LCD_UNSUPPORTED_PARAMETER;
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	08 95       	ret
		case LCD_12X4:
			address += (0x4C + column - 1);
     eaa:	9b e4       	ldi	r25, 0x4B	; 75
     eac:	94 0f       	add	r25, r20
			break;
     eae:	05 c0       	rjmp	.+10     	; 0xeba <lcdCursorGoTo+0x10c>
		case LCD_16X4:
			address += (0x50 + column - 1);
     eb0:	9f e4       	ldi	r25, 0x4F	; 79
     eb2:	94 0f       	add	r25, r20
			break;
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <lcdCursorGoTo+0x10c>
		case LCD_20X4:
			address += (0x54 + column - 1);
     eb6:	93 e5       	ldi	r25, 0x53	; 83
     eb8:	94 0f       	add	r25, r20
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
		}
	}

	lcd->cursorLine = line - 1;
     eba:	61 50       	subi	r22, 0x01	; 1
     ebc:	63 70       	andi	r22, 0x03	; 3
     ebe:	1b 96       	adiw	r26, 0x0b	; 11
     ec0:	8c 91       	ld	r24, X
     ec2:	1b 97       	sbiw	r26, 0x0b	; 11
     ec4:	60 fb       	bst	r22, 0
     ec6:	87 f9       	bld	r24, 7
     ec8:	1b 96       	adiw	r26, 0x0b	; 11
     eca:	8c 93       	st	X, r24
     ecc:	1b 97       	sbiw	r26, 0x0b	; 11
     ece:	66 95       	lsr	r22
     ed0:	1c 96       	adiw	r26, 0x0c	; 12
     ed2:	8c 91       	ld	r24, X
     ed4:	1c 97       	sbiw	r26, 0x0c	; 12
     ed6:	8e 7f       	andi	r24, 0xFE	; 254
     ed8:	86 2b       	or	r24, r22
     eda:	1c 96       	adiw	r26, 0x0c	; 12
     edc:	8c 93       	st	X, r24
     ede:	1c 97       	sbiw	r26, 0x0c	; 12
	lcd->cursorColumn = column - 1;
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	84 0f       	add	r24, r20
     ee4:	8f 73       	andi	r24, 0x3F	; 63
     ee6:	88 0f       	add	r24, r24
     ee8:	1b 96       	adiw	r26, 0x0b	; 11
     eea:	4c 91       	ld	r20, X
     eec:	1b 97       	sbiw	r26, 0x0b	; 11
     eee:	41 78       	andi	r20, 0x81	; 129
     ef0:	48 2b       	or	r20, r24
     ef2:	1b 96       	adiw	r26, 0x0b	; 11
     ef4:	4c 93       	st	X, r20
     ef6:	1b 97       	sbiw	r26, 0x0b	; 11

	return lcdWriteCommand(lcd, (LCD_DDRAM_ADRESS | address));
     ef8:	69 2f       	mov	r22, r25
     efa:	60 68       	ori	r22, 0x80	; 128
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>
     f02:	08 95       	ret
lcdResult_t lcdCursorGoTo(volatile lcdConfiguration_t * lcd, uint8 line, uint8 column)
{
	uint8 address = 0x00;

	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     f04:	87 e0       	ldi	r24, 0x07	; 7
     f06:	08 95       	ret
		case LCD_16X4:
		case LCD_20X4:
			address += (column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	08 95       	ret
		case LCD_16X4:
		case LCD_20X4:
			address += (0x40 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	08 95       	ret
			break;
		case LCD_20X4:
			address += (0x14 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	08 95       	ret
			break;
		case LCD_20X4:
			address += (0x54 + column - 1);
			break;
		default:
			return LCD_UNSUPPORTED_DISPLAY_SIZE;
     f14:	83 e0       	ldi	r24, 0x03	; 3

	lcd->cursorLine = line - 1;
	lcd->cursorColumn = column - 1;

	return lcdWriteCommand(lcd, (LCD_DDRAM_ADRESS | address));
}
     f16:	08 95       	ret

00000f18 <lcdCursorMoveNextLine>:

lcdResult_t lcdCursorMoveNextLine(volatile lcdConfiguration_t * lcd)
{
	uint8 line = 0;

	if(lcd->initialized == FALSE) {
     f18:	dc 01       	movw	r26, r24
     f1a:	1c 96       	adiw	r26, 0x0c	; 12
     f1c:	2c 91       	ld	r18, X
     f1e:	1c 97       	sbiw	r26, 0x0c	; 12
     f20:	23 ff       	sbrs	r18, 3
     f22:	50 c0       	rjmp	.+160    	; 0xfc4 <lcdCursorMoveNextLine+0xac>
		return LCD_NOT_INITIALIZED;
	}

	switch(lcd->size) {
     f24:	19 96       	adiw	r26, 0x09	; 9
     f26:	2c 91       	ld	r18, X
     f28:	19 97       	sbiw	r26, 0x09	; 9
     f2a:	22 95       	swap	r18
     f2c:	26 95       	lsr	r18
     f2e:	26 95       	lsr	r18
     f30:	23 70       	andi	r18, 0x03	; 3
     f32:	1a 96       	adiw	r26, 0x0a	; 10
     f34:	ec 91       	ld	r30, X
     f36:	e7 70       	andi	r30, 0x07	; 7
     f38:	ee 0f       	add	r30, r30
     f3a:	ee 0f       	add	r30, r30
     f3c:	e2 2b       	or	r30, r18
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	e2 31       	cpi	r30, 0x12	; 18
     f44:	f1 05       	cpc	r31, r1
     f46:	08 f0       	brcs	.+2      	; 0xf4a <lcdCursorMoveNextLine+0x32>
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <lcdCursorMoveNextLine+0xb0>
     f4a:	e6 58       	subi	r30, 0x86	; 134
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
	case LCD_16X1:
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		return lcdCursorGoTo(lcd, (line + 1), 1);
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	0e 94 d7 06 	call	0xdae	; 0xdae <lcdCursorGoTo>
     f5a:	08 95       	ret
	case LCD_20X2:
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		line = (lcd->cursorLine == 1) ? 0 : 1;
     f5c:	fc 01       	movw	r30, r24
     f5e:	33 85       	ldd	r19, Z+11	; 0x0b
     f60:	33 1f       	adc	r19, r19
     f62:	33 27       	eor	r19, r19
     f64:	33 1f       	adc	r19, r19
     f66:	24 85       	ldd	r18, Z+12	; 0x0c
     f68:	21 70       	andi	r18, 0x01	; 1
     f6a:	22 0f       	add	r18, r18
     f6c:	23 2b       	or	r18, r19
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	21 30       	cpi	r18, 0x01	; 1
     f72:	09 f4       	brne	.+2      	; 0xf76 <lcdCursorMoveNextLine+0x5e>
     f74:	60 e0       	ldi	r22, 0x00	; 0
		return lcdCursorGoTo(lcd, (line + 1), 1);
     f76:	6f 5f       	subi	r22, 0xFF	; 255
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 d7 06 	call	0xdae	; 0xdae <lcdCursorGoTo>
     f7e:	08 95       	ret
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		line = (lcd->cursorLine == 3) ? 0 : (lcd->cursorLine + 1);
     f80:	dc 01       	movw	r26, r24
     f82:	1b 96       	adiw	r26, 0x0b	; 11
     f84:	3c 91       	ld	r19, X
     f86:	1b 97       	sbiw	r26, 0x0b	; 11
     f88:	33 1f       	adc	r19, r19
     f8a:	33 27       	eor	r19, r19
     f8c:	33 1f       	adc	r19, r19
     f8e:	1c 96       	adiw	r26, 0x0c	; 12
     f90:	2c 91       	ld	r18, X
     f92:	1c 97       	sbiw	r26, 0x0c	; 12
     f94:	21 70       	andi	r18, 0x01	; 1
     f96:	22 0f       	add	r18, r18
     f98:	23 2b       	or	r18, r19
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <lcdCursorMoveNextLine+0xa0>
     f9e:	1b 96       	adiw	r26, 0x0b	; 11
     fa0:	2c 91       	ld	r18, X
     fa2:	1b 97       	sbiw	r26, 0x0b	; 11
     fa4:	22 1f       	adc	r18, r18
     fa6:	22 27       	eor	r18, r18
     fa8:	22 1f       	adc	r18, r18
     faa:	1c 96       	adiw	r26, 0x0c	; 12
     fac:	6c 91       	ld	r22, X
     fae:	61 70       	andi	r22, 0x01	; 1
     fb0:	66 0f       	add	r22, r22
     fb2:	62 2b       	or	r22, r18
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <lcdCursorMoveNextLine+0xa2>
     fb8:	60 e0       	ldi	r22, 0x00	; 0
		return lcdCursorGoTo(lcd, (line + 1), 1);
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	0e 94 d7 06 	call	0xdae	; 0xdae <lcdCursorGoTo>
     fc2:	08 95       	ret
lcdResult_t lcdCursorMoveNextLine(volatile lcdConfiguration_t * lcd)
{
	uint8 line = 0;

	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	08 95       	ret
	case LCD_16X4:
	case LCD_20X4:
		line = (lcd->cursorLine == 3) ? 0 : (lcd->cursorLine + 1);
		return lcdCursorGoTo(lcd, (line + 1), 1);
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
     fc8:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     fca:	08 95       	ret

00000fcc <lcdFunctionSet8Bits>:
 *				command		Command to be sent to LCD
 * Returns:		LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdFunctionSet8Bits(volatile lcdConfiguration_t * lcd, uint8 command)
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	fc 01       	movw	r30, r24
	clrBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
     fd2:	a7 81       	ldd	r26, Z+7	; 0x07
     fd4:	b0 85       	ldd	r27, Z+8	; 0x08
     fd6:	4c 91       	ld	r20, X
     fd8:	21 85       	ldd	r18, Z+9	; 0x09
     fda:	27 70       	andi	r18, 0x07	; 7
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	ec 01       	movw	r28, r24
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <lcdFunctionSet8Bits+0x1c>
     fe4:	cc 0f       	add	r28, r28
     fe6:	dd 1f       	adc	r29, r29
     fe8:	2a 95       	dec	r18
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <lcdFunctionSet8Bits+0x18>
     fec:	9e 01       	movw	r18, r28
     fee:	20 95       	com	r18
     ff0:	24 23       	and	r18, r20
     ff2:	2c 93       	st	X, r18
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
     ff4:	a7 81       	ldd	r26, Z+7	; 0x07
     ff6:	b0 85       	ldd	r27, Z+8	; 0x08
     ff8:	4c 91       	ld	r20, X
     ffa:	21 85       	ldd	r18, Z+9	; 0x09
     ffc:	26 95       	lsr	r18
     ffe:	26 95       	lsr	r18
    1000:	26 95       	lsr	r18
    1002:	27 70       	andi	r18, 0x07	; 7
    1004:	ec 01       	movw	r28, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <lcdFunctionSet8Bits+0x40>
    1008:	cc 0f       	add	r28, r28
    100a:	dd 1f       	adc	r29, r29
    100c:	2a 95       	dec	r18
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <lcdFunctionSet8Bits+0x3c>
    1010:	9e 01       	movw	r18, r28
    1012:	20 95       	com	r18
    1014:	24 23       	and	r18, r20
    1016:	2c 93       	st	X, r18
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data
    1018:	a2 81       	ldd	r26, Z+2	; 0x02
    101a:	b3 81       	ldd	r27, Z+3	; 0x03
    101c:	7c 91       	ld	r23, X
    101e:	24 81       	ldd	r18, Z+4	; 0x04
    1020:	27 70       	andi	r18, 0x07	; 7
    1022:	4f e0       	ldi	r20, 0x0F	; 15
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	ea 01       	movw	r28, r20
    1028:	02 c0       	rjmp	.+4      	; 0x102e <lcdFunctionSet8Bits+0x62>
    102a:	cc 0f       	add	r28, r28
    102c:	dd 1f       	adc	r29, r29
    102e:	2a 95       	dec	r18
    1030:	e2 f7       	brpl	.-8      	; 0x102a <lcdFunctionSet8Bits+0x5e>
    1032:	9e 01       	movw	r18, r28
    1034:	20 95       	com	r18
    1036:	27 23       	and	r18, r23
    1038:	2c 93       	st	X, r18
	*(lcd->dataPORT) |= ((command >> 4) << lcd->dataFirst);
    103a:	a2 81       	ldd	r26, Z+2	; 0x02
    103c:	b3 81       	ldd	r27, Z+3	; 0x03
    103e:	2c 91       	ld	r18, X
    1040:	34 81       	ldd	r19, Z+4	; 0x04
    1042:	37 70       	andi	r19, 0x07	; 7
    1044:	62 95       	swap	r22
    1046:	6f 70       	andi	r22, 0x0F	; 15
    1048:	01 c0       	rjmp	.+2      	; 0x104c <lcdFunctionSet8Bits+0x80>
    104a:	66 0f       	add	r22, r22
    104c:	3a 95       	dec	r19
    104e:	ea f7       	brpl	.-6      	; 0x104a <lcdFunctionSet8Bits+0x7e>
    1050:	62 2b       	or	r22, r18
    1052:	6c 93       	st	X, r22
	setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
    1054:	a7 81       	ldd	r26, Z+7	; 0x07
    1056:	b0 85       	ldd	r27, Z+8	; 0x08
    1058:	3c 91       	ld	r19, X
    105a:	21 85       	ldd	r18, Z+9	; 0x09
    105c:	26 95       	lsr	r18
    105e:	26 95       	lsr	r18
    1060:	26 95       	lsr	r18
    1062:	27 70       	andi	r18, 0x07	; 7
    1064:	02 c0       	rjmp	.+4      	; 0x106a <lcdFunctionSet8Bits+0x9e>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <lcdFunctionSet8Bits+0x9a>
    106e:	83 2b       	or	r24, r19
    1070:	8c 93       	st	X, r24
    1072:	d5 e0       	ldi	r29, 0x05	; 5
    1074:	da 95       	dec	r29
    1076:	f1 f7       	brne	.-4      	; 0x1074 <lcdFunctionSet8Bits+0xa8>
    1078:	00 00       	nop
	_delay_us(1);
	clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
    107a:	a7 81       	ldd	r26, Z+7	; 0x07
    107c:	b0 85       	ldd	r27, Z+8	; 0x08
    107e:	4c 91       	ld	r20, X
    1080:	81 85       	ldd	r24, Z+9	; 0x09
    1082:	86 95       	lsr	r24
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	87 70       	andi	r24, 0x07	; 7
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	b9 01       	movw	r22, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <lcdFunctionSet8Bits+0xca>
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <lcdFunctionSet8Bits+0xc6>
    109a:	cb 01       	movw	r24, r22
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	75 ed       	ldi	r23, 0xD5	; 213
    10a4:	7a 95       	dec	r23
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <lcdFunctionSet8Bits+0xd8>
    10a8:	00 00       	nop
	_delay_us(40);

	return LCD_OK;
}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <lcdInit>:
 *				LCD_CONTROL_PORT_NOT_CONFIGURED
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdInit(volatile lcdConfiguration_t * lcd, lcdSize_t size, lcdFont_t font)
{
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	ec 01       	movw	r28, r24
    10ba:	86 2f       	mov	r24, r22
	uint8 command = 0;
	uint8 lines = 0;

	// LCD font
	switch(font) {
    10bc:	44 23       	and	r20, r20
    10be:	19 f0       	breq	.+6      	; 0x10c6 <lcdInit+0x14>
    10c0:	41 30       	cpi	r20, 0x01	; 1
    10c2:	29 f0       	breq	.+10     	; 0x10ce <lcdInit+0x1c>
    10c4:	11 c1       	rjmp	.+546    	; 0x12e8 <lcdInit+0x236>
	case LCD_FONT_5X8:
		lcd->functionFontSize = LCD_FONT_5X8;
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	97 7f       	andi	r25, 0xF7	; 247
    10ca:	9a 87       	std	Y+10, r25	; 0x0a
		break;
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <lcdInit+0x22>
	case LCD_FONT_5X10:
		lcd->functionFontSize = LCD_FONT_5X10;
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	98 60       	ori	r25, 0x08	; 8
    10d2:	9a 87       	std	Y+10, r25	; 0x0a
	default:
		return LCD_UNSUPPORTED_FONT_SIZE;
	}

	// LCD size
	switch(size) {
    10d4:	48 2f       	mov	r20, r24
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	fa 01       	movw	r30, r20
    10da:	31 97       	sbiw	r30, 0x01	; 1
    10dc:	e2 31       	cpi	r30, 0x12	; 18
    10de:	f1 05       	cpc	r31, r1
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <lcdInit+0x32>
    10e2:	04 c1       	rjmp	.+520    	; 0x12ec <lcdInit+0x23a>
    10e4:	e4 57       	subi	r30, 0x74	; 116
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		lines = 1;
		lcd->size = size;
    10ec:	98 2f       	mov	r25, r24
    10ee:	9f 71       	andi	r25, 0x1F	; 31
    10f0:	82 95       	swap	r24
    10f2:	88 0f       	add	r24, r24
    10f4:	88 0f       	add	r24, r24
    10f6:	80 7c       	andi	r24, 0xC0	; 192
    10f8:	29 85       	ldd	r18, Y+9	; 0x09
    10fa:	2f 73       	andi	r18, 0x3F	; 63
    10fc:	82 2b       	or	r24, r18
    10fe:	89 87       	std	Y+9, r24	; 0x09
    1100:	96 95       	lsr	r25
    1102:	96 95       	lsr	r25
    1104:	8a 85       	ldd	r24, Y+10	; 0x0a
    1106:	88 7f       	andi	r24, 0xF8	; 248
    1108:	89 2b       	or	r24, r25
    110a:	8a 87       	std	Y+10, r24	; 0x0a
	case LCD_8X1:
	case LCD_16X1b:
	case LCD_20X1:
	case LCD_24X1:
	case LCD_40X1:
		lines = 1;
    110c:	11 e0       	ldi	r17, 0x01	; 1
		lcd->size = size;
		break;
    110e:	23 c0       	rjmp	.+70     	; 0x1156 <lcdInit+0xa4>
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		lines = 2;
		lcd->size = size;
    1110:	98 2f       	mov	r25, r24
    1112:	9f 71       	andi	r25, 0x1F	; 31
    1114:	82 95       	swap	r24
    1116:	88 0f       	add	r24, r24
    1118:	88 0f       	add	r24, r24
    111a:	80 7c       	andi	r24, 0xC0	; 192
    111c:	29 85       	ldd	r18, Y+9	; 0x09
    111e:	2f 73       	andi	r18, 0x3F	; 63
    1120:	82 2b       	or	r24, r18
    1122:	89 87       	std	Y+9, r24	; 0x09
    1124:	96 95       	lsr	r25
    1126:	96 95       	lsr	r25
    1128:	8a 85       	ldd	r24, Y+10	; 0x0a
    112a:	88 7f       	andi	r24, 0xF8	; 248
    112c:	89 2b       	or	r24, r25
    112e:	8a 87       	std	Y+10, r24	; 0x0a
	case LCD_20X2:
	case LCD_24X2:
	case LCD_30X2:
	case LCD_32X2:
	case LCD_40X2:
		lines = 2;
    1130:	12 e0       	ldi	r17, 0x02	; 2
		lcd->size = size;
		break;
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <lcdInit+0xa4>
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		lines = 4;
		lcd->size = size;
    1134:	98 2f       	mov	r25, r24
    1136:	9f 71       	andi	r25, 0x1F	; 31
    1138:	82 95       	swap	r24
    113a:	88 0f       	add	r24, r24
    113c:	88 0f       	add	r24, r24
    113e:	80 7c       	andi	r24, 0xC0	; 192
    1140:	29 85       	ldd	r18, Y+9	; 0x09
    1142:	2f 73       	andi	r18, 0x3F	; 63
    1144:	82 2b       	or	r24, r18
    1146:	89 87       	std	Y+9, r24	; 0x09
    1148:	96 95       	lsr	r25
    114a:	96 95       	lsr	r25
    114c:	8a 85       	ldd	r24, Y+10	; 0x0a
    114e:	88 7f       	andi	r24, 0xF8	; 248
    1150:	89 2b       	or	r24, r25
    1152:	8a 87       	std	Y+10, r24	; 0x0a
		lcd->size = size;
		break;
	case LCD_12X4:
	case LCD_16X4:
	case LCD_20X4:
		lines = 4;
    1154:	14 e0       	ldi	r17, 0x04	; 4
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
	}

	// I/O initialization
	if(lcd->dataPortConfigured == FALSE) {
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
    1158:	81 ff       	sbrs	r24, 1
    115a:	ca c0       	rjmp	.+404    	; 0x12f0 <lcdInit+0x23e>
		return LCD_DATA_PORT_NOT_CONFIGURED;
	}
	if(lcd->controlPortConfigured == FALSE) {
    115c:	8c 85       	ldd	r24, Y+12	; 0x0c
    115e:	82 ff       	sbrs	r24, 2
    1160:	c9 c0       	rjmp	.+402    	; 0x12f4 <lcdInit+0x242>
		return LCD_CONTROL_PORT_NOT_CONFIGURED;
	}
	clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);
    1162:	ea 81       	ldd	r30, Y+2	; 0x02
    1164:	fb 81       	ldd	r31, Y+3	; 0x03
    1166:	40 81       	ld	r20, Z
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	27 70       	andi	r18, 0x07	; 7
    116c:	8f e0       	ldi	r24, 0x0F	; 15
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	bc 01       	movw	r22, r24
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <lcdInit+0xc6>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <lcdInit+0xc2>
    117c:	9b 01       	movw	r18, r22
    117e:	20 95       	com	r18
    1180:	24 23       	and	r18, r20
    1182:	20 83       	st	Z, r18
	setMask(*(lcd->dataDDR), 0x0F, lcd->dataFirst);
    1184:	e8 81       	ld	r30, Y
    1186:	f9 81       	ldd	r31, Y+1	; 0x01
    1188:	20 81       	ld	r18, Z
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	37 70       	andi	r19, 0x07	; 7
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <lcdInit+0xe2>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	3a 95       	dec	r19
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <lcdInit+0xde>
    1198:	82 2b       	or	r24, r18
    119a:	80 83       	st	Z, r24
	clrBit(*(lcd->controlPORT), lcd->controlE);
    119c:	ef 81       	ldd	r30, Y+7	; 0x07
    119e:	f8 85       	ldd	r31, Y+8	; 0x08
    11a0:	40 81       	ld	r20, Z
    11a2:	29 85       	ldd	r18, Y+9	; 0x09
    11a4:	26 95       	lsr	r18
    11a6:	26 95       	lsr	r18
    11a8:	26 95       	lsr	r18
    11aa:	27 70       	andi	r18, 0x07	; 7
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	bc 01       	movw	r22, r24
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <lcdInit+0x106>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	2a 95       	dec	r18
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <lcdInit+0x102>
    11bc:	9b 01       	movw	r18, r22
    11be:	20 95       	com	r18
    11c0:	24 23       	and	r18, r20
    11c2:	20 83       	st	Z, r18
	setBit(*(lcd->controlDDR), lcd->controlE);
    11c4:	ed 81       	ldd	r30, Y+5	; 0x05
    11c6:	fe 81       	ldd	r31, Y+6	; 0x06
    11c8:	40 81       	ld	r20, Z
    11ca:	39 85       	ldd	r19, Y+9	; 0x09
    11cc:	36 95       	lsr	r19
    11ce:	36 95       	lsr	r19
    11d0:	36 95       	lsr	r19
    11d2:	37 70       	andi	r19, 0x07	; 7
    11d4:	bc 01       	movw	r22, r24
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <lcdInit+0x12a>
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	3a 95       	dec	r19
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <lcdInit+0x126>
    11e0:	9b 01       	movw	r18, r22
    11e2:	24 2b       	or	r18, r20
    11e4:	20 83       	st	Z, r18
	clrBit(*(lcd->controlPORT), lcd->controlRS);
    11e6:	ef 81       	ldd	r30, Y+7	; 0x07
    11e8:	f8 85       	ldd	r31, Y+8	; 0x08
    11ea:	40 81       	ld	r20, Z
    11ec:	29 85       	ldd	r18, Y+9	; 0x09
    11ee:	27 70       	andi	r18, 0x07	; 7
    11f0:	bc 01       	movw	r22, r24
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <lcdInit+0x146>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	2a 95       	dec	r18
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <lcdInit+0x142>
    11fc:	9b 01       	movw	r18, r22
    11fe:	20 95       	com	r18
    1200:	24 23       	and	r18, r20
    1202:	20 83       	st	Z, r18
	setBit(*(lcd->controlDDR), lcd->controlRS);
    1204:	ed 81       	ldd	r30, Y+5	; 0x05
    1206:	fe 81       	ldd	r31, Y+6	; 0x06
    1208:	20 81       	ld	r18, Z
    120a:	39 85       	ldd	r19, Y+9	; 0x09
    120c:	37 70       	andi	r19, 0x07	; 7
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <lcdInit+0x162>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	3a 95       	dec	r19
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <lcdInit+0x15e>
    1218:	82 2b       	or	r24, r18
    121a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121c:	8f e5       	ldi	r24, 0x5F	; 95
    121e:	9a ee       	ldi	r25, 0xEA	; 234
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <lcdInit+0x16e>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <lcdInit+0x174>
    1226:	00 00       	nop

	// Reset the controller, must be sent 3 times
	_delay_ms(15);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
    1228:	60 e3       	ldi	r22, 0x30	; 48
    122a:	ce 01       	movw	r24, r28
    122c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <lcdFunctionSet8Bits>
    1230:	8f e1       	ldi	r24, 0x1F	; 31
    1232:	9e e4       	ldi	r25, 0x4E	; 78
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <lcdInit+0x182>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <lcdInit+0x188>
    123a:	00 00       	nop
	_delay_ms(5);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
    123c:	60 e3       	ldi	r22, 0x30	; 48
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 e6 07 	call	0xfcc	; 0xfcc <lcdFunctionSet8Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1244:	8f ee       	ldi	r24, 0xEF	; 239
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <lcdInit+0x196>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <lcdInit+0x19c>
    124e:	00 00       	nop
	_delay_us(60);
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_RESET);
    1250:	60 e3       	ldi	r22, 0x30	; 48
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 e6 07 	call	0xfcc	; 0xfcc <lcdFunctionSet8Bits>
    1258:	8f ee       	ldi	r24, 0xEF	; 239
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <lcdInit+0x1aa>
    1260:	00 c0       	rjmp	.+0      	; 0x1262 <lcdInit+0x1b0>
    1262:	00 00       	nop
	_delay_us(60);

	// Configures the LCD to 4 bits interface
	lcdFunctionSet8Bits(lcd, LCD_FUNCTION_SET | LCD_FUNCTION_4_BITS);
    1264:	60 e2       	ldi	r22, 0x20	; 32
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 e6 07 	call	0xfcc	; 0xfcc <lcdFunctionSet8Bits>

	// Function set
	command = LCD_FUNCTION_SET | LCD_FUNCTION_4_BITS;
	if(lcd->functionFontSize == LCD_FONT_5X8) {
    126c:	8a 85       	ldd	r24, Y+10	; 0x0a
		command |= LCD_FUNCTION_5x8_FONT;
	}
	if(lcd->functionFontSize == LCD_FONT_5X10) {
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	83 fd       	sbrc	r24, 3
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <lcdInit+0x1c6>
    1274:	60 e2       	ldi	r22, 0x20	; 32
    1276:	01 c0       	rjmp	.+2      	; 0x127a <lcdInit+0x1c8>
		command |= LCD_FUNCTION_5x10_FONT;
    1278:	64 e2       	ldi	r22, 0x24	; 36
	}
	if(lines == 1) {
		command |= LCD_FUNCTION_1_LINE;
	}
	if((lines == 2) || (lines == 4)) {
    127a:	12 30       	cpi	r17, 0x02	; 2
    127c:	11 f0       	breq	.+4      	; 0x1282 <lcdInit+0x1d0>
    127e:	14 30       	cpi	r17, 0x04	; 4
    1280:	09 f4       	brne	.+2      	; 0x1284 <lcdInit+0x1d2>
		command |= LCD_FUNCTION_2_LINES;
    1282:	68 60       	ori	r22, 0x08	; 8
	}
	lcdWriteCommand(lcd, command);
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>

	// Turns display off
	lcdWriteCommand(lcd, LCD_DISPLAY_OFF);
    128a:	68 e0       	ldi	r22, 0x08	; 8
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>

	// Clears the screen
	lcdWriteCommand(lcd, LCD_CLEAR_SCREEN);
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	ce 01       	movw	r24, r28
    1296:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>

	// Entry set
	command = LCD_ENTRY_SET;
	if(lcd->entryIncDec == LCD_INCREMENT) {
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	84 ff       	sbrs	r24, 4
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <lcdInit+0x1f2>
		command |= LCD_ENTRY_INCREMENT;
    12a0:	66 e0       	ldi	r22, 0x06	; 6
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <lcdInit+0x1f4>
	} else {
		command |= LCD_ENTRY_DECREMENT;
    12a4:	64 e0       	ldi	r22, 0x04	; 4
	}
	if(lcd->entryShiftDisplay == LCD_DISPLAY_SHIFT) {
    12a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a8:	85 fd       	sbrc	r24, 5
		command |= LCD_ENTRY_SHIFT;
    12aa:	61 60       	ori	r22, 0x01	; 1
	} else {
		command |= LCD_ENTRY_OVERWRITE;
	}
	lcdWriteCommand(lcd, command);
    12ac:	ce 01       	movw	r24, r28
    12ae:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>

	// Turns display on
	lcdWriteCommand(lcd, LCD_DISPLAY_ON);
    12b2:	6c e0       	ldi	r22, 0x0C	; 12
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 f7 05 	call	0xbee	; 0xbee <lcdWriteCommand>

	// Updates the struct variables
	lcd->initialized = TRUE;
    12ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	8c 87       	std	Y+12, r24	; 0x0c
	lcd->displayOn = TRUE;
    12c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8a 87       	std	Y+10, r24	; 0x0a
	lcd->cursorOn = FALSE;
    12c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c8:	8f 77       	andi	r24, 0x7F	; 127
    12ca:	8a 87       	std	Y+10, r24	; 0x0a
	lcd->cursorBlink = FALSE;
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	8e 7f       	andi	r24, 0xFE	; 254
    12d0:	8b 87       	std	Y+11, r24	; 0x0b
	lcd->cursorLine = 0;
    12d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d4:	8f 77       	andi	r24, 0x7F	; 127
    12d6:	8b 87       	std	Y+11, r24	; 0x0b
    12d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 87       	std	Y+12, r24	; 0x0c
	lcd->cursorColumn = 0;
    12de:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e0:	81 78       	andi	r24, 0x81	; 129
    12e2:	8b 87       	std	Y+11, r24	; 0x0b

	return LCD_OK;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <lcdInit+0x244>
		break;
	case LCD_FONT_5X10:
		lcd->functionFontSize = LCD_FONT_5X10;
		break;
	default:
		return LCD_UNSUPPORTED_FONT_SIZE;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <lcdInit+0x244>
	case LCD_20X4:
		lines = 4;
		lcd->size = size;
		break;
	default:
		return LCD_UNSUPPORTED_DISPLAY_SIZE;
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <lcdInit+0x244>
	}

	// I/O initialization
	if(lcd->dataPortConfigured == FALSE) {
		return LCD_DATA_PORT_NOT_CONFIGURED;
    12f0:	85 e0       	ldi	r24, 0x05	; 5
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <lcdInit+0x244>
	}
	if(lcd->controlPortConfigured == FALSE) {
		return LCD_CONTROL_PORT_NOT_CONFIGURED;
    12f4:	86 e0       	ldi	r24, 0x06	; 6
	lcd->cursorBlink = FALSE;
	lcd->cursorLine = 0;
	lcd->cursorColumn = 0;

	return LCD_OK;
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	08 95       	ret

000012fe <lcdWriteCharacter>:
 * Returns:		LCD_NOT_INITIALIZED
 *				LCD_OK
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCharacter(volatile lcdConfiguration_t * lcd, uint8 character)
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	fc 01       	movw	r30, r24
	if(lcd->initialized == FALSE) {
    1304:	84 85       	ldd	r24, Z+12	; 0x0c
    1306:	83 ff       	sbrs	r24, 3
    1308:	c8 c0       	rjmp	.+400    	; 0x149a <lcdWriteCharacter+0x19c>
		return LCD_NOT_INITIALIZED;
	}

	if(lcd->cursorColumn < 40) {
    130a:	83 85       	ldd	r24, Z+11	; 0x0b
    130c:	86 95       	lsr	r24
    130e:	8f 73       	andi	r24, 0x3F	; 63
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	88 97       	sbiw	r24, 0x28	; 40
    1314:	0c f0       	brlt	.+2      	; 0x1318 <lcdWriteCharacter+0x1a>
    1316:	c3 c0       	rjmp	.+390    	; 0x149e <lcdWriteCharacter+0x1a0>
		setBit(*(lcd->controlPORT), lcd->controlRS);		// LCD in command mode
    1318:	a7 81       	ldd	r26, Z+7	; 0x07
    131a:	b0 85       	ldd	r27, Z+8	; 0x08
    131c:	4c 91       	ld	r20, X
    131e:	21 85       	ldd	r18, Z+9	; 0x09
    1320:	27 70       	andi	r18, 0x07	; 7
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	ec 01       	movw	r28, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <lcdWriteCharacter+0x30>
    132a:	cc 0f       	add	r28, r28
    132c:	dd 1f       	adc	r29, r29
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <lcdWriteCharacter+0x2c>
    1332:	9e 01       	movw	r18, r28
    1334:	24 2b       	or	r18, r20
    1336:	2c 93       	st	X, r18
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Makes sure enable is LOW
    1338:	a7 81       	ldd	r26, Z+7	; 0x07
    133a:	b0 85       	ldd	r27, Z+8	; 0x08
    133c:	4c 91       	ld	r20, X
    133e:	21 85       	ldd	r18, Z+9	; 0x09
    1340:	26 95       	lsr	r18
    1342:	26 95       	lsr	r18
    1344:	26 95       	lsr	r18
    1346:	27 70       	andi	r18, 0x07	; 7
    1348:	ec 01       	movw	r28, r24
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <lcdWriteCharacter+0x52>
    134c:	cc 0f       	add	r28, r28
    134e:	dd 1f       	adc	r29, r29
    1350:	2a 95       	dec	r18
    1352:	e2 f7       	brpl	.-8      	; 0x134c <lcdWriteCharacter+0x4e>
    1354:	9e 01       	movw	r18, r28
    1356:	20 95       	com	r18
    1358:	24 23       	and	r18, r20
    135a:	2c 93       	st	X, r18
		clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (higher nibble)
    135c:	a2 81       	ldd	r26, Z+2	; 0x02
    135e:	b3 81       	ldd	r27, Z+3	; 0x03
    1360:	7c 91       	ld	r23, X
    1362:	24 81       	ldd	r18, Z+4	; 0x04
    1364:	27 70       	andi	r18, 0x07	; 7
    1366:	4f e0       	ldi	r20, 0x0F	; 15
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	ea 01       	movw	r28, r20
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <lcdWriteCharacter+0x74>
    136e:	cc 0f       	add	r28, r28
    1370:	dd 1f       	adc	r29, r29
    1372:	2a 95       	dec	r18
    1374:	e2 f7       	brpl	.-8      	; 0x136e <lcdWriteCharacter+0x70>
    1376:	9e 01       	movw	r18, r28
    1378:	20 95       	com	r18
    137a:	27 23       	and	r18, r23
    137c:	2c 93       	st	X, r18
		*(lcd->dataPORT) |= ((character >> 4) << lcd->dataFirst);
    137e:	a2 81       	ldd	r26, Z+2	; 0x02
    1380:	b3 81       	ldd	r27, Z+3	; 0x03
    1382:	3c 91       	ld	r19, X
    1384:	44 81       	ldd	r20, Z+4	; 0x04
    1386:	47 70       	andi	r20, 0x07	; 7
    1388:	26 2f       	mov	r18, r22
    138a:	22 95       	swap	r18
    138c:	2f 70       	andi	r18, 0x0F	; 15
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <lcdWriteCharacter+0x94>
    1390:	22 0f       	add	r18, r18
    1392:	4a 95       	dec	r20
    1394:	ea f7       	brpl	.-6      	; 0x1390 <lcdWriteCharacter+0x92>
    1396:	23 2b       	or	r18, r19
    1398:	2c 93       	st	X, r18
		setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
    139a:	a7 81       	ldd	r26, Z+7	; 0x07
    139c:	b0 85       	ldd	r27, Z+8	; 0x08
    139e:	3c 91       	ld	r19, X
    13a0:	21 85       	ldd	r18, Z+9	; 0x09
    13a2:	26 95       	lsr	r18
    13a4:	26 95       	lsr	r18
    13a6:	26 95       	lsr	r18
    13a8:	27 70       	andi	r18, 0x07	; 7
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <lcdWriteCharacter+0xb2>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	2a 95       	dec	r18
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <lcdWriteCharacter+0xae>
    13b4:	83 2b       	or	r24, r19
    13b6:	8c 93       	st	X, r24
    13b8:	d5 e0       	ldi	r29, 0x05	; 5
    13ba:	da 95       	dec	r29
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <lcdWriteCharacter+0xbc>
    13be:	00 00       	nop
		_delay_us(1);
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
    13c0:	a7 81       	ldd	r26, Z+7	; 0x07
    13c2:	b0 85       	ldd	r27, Z+8	; 0x08
    13c4:	4c 91       	ld	r20, X
    13c6:	81 85       	ldd	r24, Z+9	; 0x09
    13c8:	86 95       	lsr	r24
    13ca:	86 95       	lsr	r24
    13cc:	86 95       	lsr	r24
    13ce:	87 70       	andi	r24, 0x07	; 7
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	e9 01       	movw	r28, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <lcdWriteCharacter+0xde>
    13d8:	cc 0f       	add	r28, r28
    13da:	dd 1f       	adc	r29, r29
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <lcdWriteCharacter+0xda>
    13e0:	ce 01       	movw	r24, r28
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	d5 e0       	ldi	r29, 0x05	; 5
    13ea:	da 95       	dec	r29
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <lcdWriteCharacter+0xec>
    13ee:	00 00       	nop
		_delay_us(1);
		clrMask(*(lcd->dataPORT), 0x0F, lcd->dataFirst);	// Writes data (lower nibble)
    13f0:	a2 81       	ldd	r26, Z+2	; 0x02
    13f2:	b3 81       	ldd	r27, Z+3	; 0x03
    13f4:	4c 91       	ld	r20, X
    13f6:	84 81       	ldd	r24, Z+4	; 0x04
    13f8:	87 70       	andi	r24, 0x07	; 7
    13fa:	2f e0       	ldi	r18, 0x0F	; 15
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	e9 01       	movw	r28, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <lcdWriteCharacter+0x108>
    1402:	cc 0f       	add	r28, r28
    1404:	dd 1f       	adc	r29, r29
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <lcdWriteCharacter+0x104>
    140a:	ce 01       	movw	r24, r28
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
		*(lcd->dataPORT) |= ((character & 0x0F) << lcd->dataFirst);
    1412:	a2 81       	ldd	r26, Z+2	; 0x02
    1414:	b3 81       	ldd	r27, Z+3	; 0x03
    1416:	8c 91       	ld	r24, X
    1418:	94 81       	ldd	r25, Z+4	; 0x04
    141a:	97 70       	andi	r25, 0x07	; 7
    141c:	6f 70       	andi	r22, 0x0F	; 15
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <lcdWriteCharacter+0x124>
    1420:	66 0f       	add	r22, r22
    1422:	9a 95       	dec	r25
    1424:	ea f7       	brpl	.-6      	; 0x1420 <lcdWriteCharacter+0x122>
    1426:	68 2b       	or	r22, r24
    1428:	6c 93       	st	X, r22
		setBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse start
    142a:	a7 81       	ldd	r26, Z+7	; 0x07
    142c:	b0 85       	ldd	r27, Z+8	; 0x08
    142e:	4c 91       	ld	r20, X
    1430:	91 85       	ldd	r25, Z+9	; 0x09
    1432:	96 95       	lsr	r25
    1434:	96 95       	lsr	r25
    1436:	96 95       	lsr	r25
    1438:	97 70       	andi	r25, 0x07	; 7
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <lcdWriteCharacter+0x148>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	9a 95       	dec	r25
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <lcdWriteCharacter+0x144>
    144a:	cb 01       	movw	r24, r22
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	75 e0       	ldi	r23, 0x05	; 5
    1452:	7a 95       	dec	r23
    1454:	f1 f7       	brne	.-4      	; 0x1452 <lcdWriteCharacter+0x154>
    1456:	00 00       	nop
		_delay_us(1);
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
    1458:	a7 81       	ldd	r26, Z+7	; 0x07
    145a:	b0 85       	ldd	r27, Z+8	; 0x08
    145c:	4c 91       	ld	r20, X
    145e:	81 85       	ldd	r24, Z+9	; 0x09
    1460:	86 95       	lsr	r24
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	87 70       	andi	r24, 0x07	; 7
    1468:	e9 01       	movw	r28, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <lcdWriteCharacter+0x172>
    146c:	cc 0f       	add	r28, r28
    146e:	dd 1f       	adc	r29, r29
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <lcdWriteCharacter+0x16e>
    1474:	ce 01       	movw	r24, r28
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	d5 ed       	ldi	r29, 0xD5	; 213
    147e:	da 95       	dec	r29
    1480:	f1 f7       	brne	.-4      	; 0x147e <lcdWriteCharacter+0x180>
    1482:	00 00       	nop
		_delay_us(40);
		lcd->cursorColumn++;
    1484:	93 85       	ldd	r25, Z+11	; 0x0b
    1486:	96 95       	lsr	r25
    1488:	9f 5f       	subi	r25, 0xFF	; 255
    148a:	9f 73       	andi	r25, 0x3F	; 63
    148c:	99 0f       	add	r25, r25
    148e:	83 85       	ldd	r24, Z+11	; 0x0b
    1490:	81 78       	andi	r24, 0x81	; 129
    1492:	89 2b       	or	r24, r25
    1494:	83 87       	std	Z+11, r24	; 0x0b
	}

	return LCD_OK;
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <lcdWriteCharacter+0x1a2>
 * -------------------------------------------------------------------------- */

lcdResult_t lcdWriteCharacter(volatile lcdConfiguration_t * lcd, uint8 character)
{
	if(lcd->initialized == FALSE) {
		return LCD_NOT_INITIALIZED;
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <lcdWriteCharacter+0x1a2>
		clrBit(*(lcd->controlPORT), lcd->controlE);			// Enable pulse end
		_delay_us(40);
		lcd->cursorColumn++;
	}

	return LCD_OK;
    149e:	80 e0       	ldi	r24, 0x00	; 0
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <lcdWriteStd>:
 * Returns:		0 (This function always returns 0)
 * Note:		This function must not be used outside this file
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
	uint8 columns = 0;
	uint8 i = 0;

	if(defaultDisplay->initialized == FALSE) {
    14ae:	a0 91 5c 01 	lds	r26, 0x015C
    14b2:	b0 91 5d 01 	lds	r27, 0x015D
    14b6:	1c 96       	adiw	r26, 0x0c	; 12
    14b8:	9c 91       	ld	r25, X
    14ba:	1c 97       	sbiw	r26, 0x0c	; 12
    14bc:	93 ff       	sbrs	r25, 3
    14be:	4d c0       	rjmp	.+154    	; 0x155a <lcdWriteStd+0xb4>
		return FALSE;
	}

	switch(defaultDisplay->size) {
    14c0:	19 96       	adiw	r26, 0x09	; 9
    14c2:	9c 91       	ld	r25, X
    14c4:	19 97       	sbiw	r26, 0x09	; 9
    14c6:	92 95       	swap	r25
    14c8:	96 95       	lsr	r25
    14ca:	96 95       	lsr	r25
    14cc:	93 70       	andi	r25, 0x03	; 3
    14ce:	1a 96       	adiw	r26, 0x0a	; 10
    14d0:	2c 91       	ld	r18, X
    14d2:	1a 97       	sbiw	r26, 0x0a	; 10
    14d4:	27 70       	andi	r18, 0x07	; 7
    14d6:	22 0f       	add	r18, r18
    14d8:	22 0f       	add	r18, r18
    14da:	29 2b       	or	r18, r25
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	21 50       	subi	r18, 0x01	; 1
    14e0:	31 09       	sbc	r19, r1
    14e2:	22 31       	cpi	r18, 0x12	; 18
    14e4:	31 05       	cpc	r19, r1
    14e6:	28 f4       	brcc	.+10     	; 0x14f2 <lcdWriteStd+0x4c>
    14e8:	22 56       	subi	r18, 0x62	; 98
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	f9 01       	movw	r30, r18
    14ee:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__tablejump2__>
 * Note:		This function must not be used outside this file
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
	uint8 columns = 0;
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_8X1:
	case LCD_8X2:
		columns = 8;
		break;
	case LCD_10x2:
		columns = 10;
    14f6:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_12X2:
	case LCD_12X4:
		columns = 12;
    14fa:	1c e0       	ldi	r17, 0x0C	; 12
		break;
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_16X1:
	case LCD_16X1b:
	case LCD_16X2:
	case LCD_16X4:
		columns = 16;
    14fe:	10 e1       	ldi	r17, 0x10	; 16
		break;
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_20X1:
	case LCD_20X2:
	case LCD_20X4:
		columns = 20;
    1502:	14 e1       	ldi	r17, 0x14	; 20
		break;
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_24X1:
	case LCD_24X2:
		columns = 24;
    1506:	18 e1       	ldi	r17, 0x18	; 24
		break;
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_30X2:
		columns = 30;
    150a:	1e e1       	ldi	r17, 0x1E	; 30
		break;
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <lcdWriteStd+0x72>
	case LCD_32X2:
		columns = 32;
    150e:	10 e2       	ldi	r17, 0x20	; 32
		break;
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <lcdWriteStd+0x72>
	case LCD_40X1:
	case LCD_40X2:
		columns = 40;
    1512:	18 e2       	ldi	r17, 0x28	; 40
		break;
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <lcdWriteStd+0x72>
	}

	switch(defaultDisplay->size) {
	case LCD_8X1:
	case LCD_8X2:
		columns = 8;
    1516:	18 e0       	ldi	r17, 0x08	; 8
	case LCD_40X2:
		columns = 40;
		break;
	}

	if(character == '\n') {
    1518:	8a 30       	cpi	r24, 0x0A	; 10
    151a:	d9 f4       	brne	.+54     	; 0x1552 <lcdWriteStd+0xac>
		for(i = defaultDisplay->cursorColumn; i < columns; i++) {
    151c:	1b 96       	adiw	r26, 0x0b	; 11
    151e:	0c 91       	ld	r16, X
    1520:	06 95       	lsr	r16
    1522:	0f 73       	andi	r16, 0x3F	; 63
    1524:	01 17       	cp	r16, r17
    1526:	70 f4       	brcc	.+28     	; 0x1544 <lcdWriteStd+0x9e>
    1528:	c0 e0       	ldi	r28, 0x00	; 0
    152a:	d0 e0       	ldi	r29, 0x00	; 0
			lcdWriteCharacter(defaultDisplay, ' ');
    152c:	60 e2       	ldi	r22, 0x20	; 32
    152e:	80 91 5c 01 	lds	r24, 0x015C
    1532:	90 91 5d 01 	lds	r25, 0x015D
    1536:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lcdWriteCharacter>
    153a:	21 96       	adiw	r28, 0x01	; 1
    153c:	8c 2f       	mov	r24, r28
    153e:	80 0f       	add	r24, r16
		columns = 40;
		break;
	}

	if(character == '\n') {
		for(i = defaultDisplay->cursorColumn; i < columns; i++) {
    1540:	81 17       	cp	r24, r17
    1542:	a0 f3       	brcs	.-24     	; 0x152c <lcdWriteStd+0x86>
			lcdWriteCharacter(defaultDisplay, ' ');
		}
		lcdCursorMoveNextLine(defaultDisplay);
    1544:	80 91 5c 01 	lds	r24, 0x015C
    1548:	90 91 5d 01 	lds	r25, 0x015D
    154c:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcdCursorMoveNextLine>
    1550:	04 c0       	rjmp	.+8      	; 0x155a <lcdWriteStd+0xb4>
	} else {
		lcdWriteCharacter(defaultDisplay, character);
    1552:	68 2f       	mov	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lcdWriteCharacter>
	}

	return 0;
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <__tablejump2__>:
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31

0000156c <__tablejump__>:
    156c:	05 90       	lpm	r0, Z+
    156e:	f4 91       	lpm	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	09 94       	ijmp

00001574 <malloc>:
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	91 05       	cpc	r25, r1
    157c:	10 f4       	brcc	.+4      	; 0x1582 <malloc+0xe>
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	e0 91 60 01 	lds	r30, 0x0160
    1586:	f0 91 61 01 	lds	r31, 0x0161
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	39 f1       	breq	.+78     	; 0x15e4 <malloc+0x70>
    1596:	40 81       	ld	r20, Z
    1598:	51 81       	ldd	r21, Z+1	; 0x01
    159a:	48 17       	cp	r20, r24
    159c:	59 07       	cpc	r21, r25
    159e:	b8 f0       	brcs	.+46     	; 0x15ce <malloc+0x5a>
    15a0:	48 17       	cp	r20, r24
    15a2:	59 07       	cpc	r21, r25
    15a4:	71 f4       	brne	.+28     	; 0x15c2 <malloc+0x4e>
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	10 97       	sbiw	r26, 0x00	; 0
    15ac:	29 f0       	breq	.+10     	; 0x15b8 <malloc+0x44>
    15ae:	13 96       	adiw	r26, 0x03	; 3
    15b0:	9c 93       	st	X, r25
    15b2:	8e 93       	st	-X, r24
    15b4:	12 97       	sbiw	r26, 0x02	; 2
    15b6:	2c c0       	rjmp	.+88     	; 0x1610 <malloc+0x9c>
    15b8:	90 93 61 01 	sts	0x0161, r25
    15bc:	80 93 60 01 	sts	0x0160, r24
    15c0:	27 c0       	rjmp	.+78     	; 0x1610 <malloc+0x9c>
    15c2:	21 15       	cp	r18, r1
    15c4:	31 05       	cpc	r19, r1
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <malloc+0x60>
    15c8:	42 17       	cp	r20, r18
    15ca:	53 07       	cpc	r21, r19
    15cc:	18 f0       	brcs	.+6      	; 0x15d4 <malloc+0x60>
    15ce:	a9 01       	movw	r20, r18
    15d0:	db 01       	movw	r26, r22
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <malloc+0x62>
    15d4:	ef 01       	movw	r28, r30
    15d6:	9a 01       	movw	r18, r20
    15d8:	bd 01       	movw	r22, r26
    15da:	df 01       	movw	r26, r30
    15dc:	02 80       	ldd	r0, Z+2	; 0x02
    15de:	f3 81       	ldd	r31, Z+3	; 0x03
    15e0:	e0 2d       	mov	r30, r0
    15e2:	d7 cf       	rjmp	.-82     	; 0x1592 <malloc+0x1e>
    15e4:	21 15       	cp	r18, r1
    15e6:	31 05       	cpc	r19, r1
    15e8:	f9 f0       	breq	.+62     	; 0x1628 <malloc+0xb4>
    15ea:	28 1b       	sub	r18, r24
    15ec:	39 0b       	sbc	r19, r25
    15ee:	24 30       	cpi	r18, 0x04	; 4
    15f0:	31 05       	cpc	r19, r1
    15f2:	80 f4       	brcc	.+32     	; 0x1614 <malloc+0xa0>
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	9b 81       	ldd	r25, Y+3	; 0x03
    15f8:	61 15       	cp	r22, r1
    15fa:	71 05       	cpc	r23, r1
    15fc:	21 f0       	breq	.+8      	; 0x1606 <malloc+0x92>
    15fe:	fb 01       	movw	r30, r22
    1600:	93 83       	std	Z+3, r25	; 0x03
    1602:	82 83       	std	Z+2, r24	; 0x02
    1604:	04 c0       	rjmp	.+8      	; 0x160e <malloc+0x9a>
    1606:	90 93 61 01 	sts	0x0161, r25
    160a:	80 93 60 01 	sts	0x0160, r24
    160e:	fe 01       	movw	r30, r28
    1610:	32 96       	adiw	r30, 0x02	; 2
    1612:	44 c0       	rjmp	.+136    	; 0x169c <malloc+0x128>
    1614:	fe 01       	movw	r30, r28
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	81 93       	st	Z+, r24
    161c:	91 93       	st	Z+, r25
    161e:	22 50       	subi	r18, 0x02	; 2
    1620:	31 09       	sbc	r19, r1
    1622:	39 83       	std	Y+1, r19	; 0x01
    1624:	28 83       	st	Y, r18
    1626:	3a c0       	rjmp	.+116    	; 0x169c <malloc+0x128>
    1628:	20 91 5e 01 	lds	r18, 0x015E
    162c:	30 91 5f 01 	lds	r19, 0x015F
    1630:	23 2b       	or	r18, r19
    1632:	41 f4       	brne	.+16     	; 0x1644 <malloc+0xd0>
    1634:	20 91 02 01 	lds	r18, 0x0102
    1638:	30 91 03 01 	lds	r19, 0x0103
    163c:	30 93 5f 01 	sts	0x015F, r19
    1640:	20 93 5e 01 	sts	0x015E, r18
    1644:	20 91 00 01 	lds	r18, 0x0100
    1648:	30 91 01 01 	lds	r19, 0x0101
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	41 f4       	brne	.+16     	; 0x1662 <malloc+0xee>
    1652:	2d b7       	in	r18, 0x3d	; 61
    1654:	3e b7       	in	r19, 0x3e	; 62
    1656:	40 91 04 01 	lds	r20, 0x0104
    165a:	50 91 05 01 	lds	r21, 0x0105
    165e:	24 1b       	sub	r18, r20
    1660:	35 0b       	sbc	r19, r21
    1662:	e0 91 5e 01 	lds	r30, 0x015E
    1666:	f0 91 5f 01 	lds	r31, 0x015F
    166a:	e2 17       	cp	r30, r18
    166c:	f3 07       	cpc	r31, r19
    166e:	a0 f4       	brcc	.+40     	; 0x1698 <malloc+0x124>
    1670:	2e 1b       	sub	r18, r30
    1672:	3f 0b       	sbc	r19, r31
    1674:	28 17       	cp	r18, r24
    1676:	39 07       	cpc	r19, r25
    1678:	78 f0       	brcs	.+30     	; 0x1698 <malloc+0x124>
    167a:	ac 01       	movw	r20, r24
    167c:	4e 5f       	subi	r20, 0xFE	; 254
    167e:	5f 4f       	sbci	r21, 0xFF	; 255
    1680:	24 17       	cp	r18, r20
    1682:	35 07       	cpc	r19, r21
    1684:	48 f0       	brcs	.+18     	; 0x1698 <malloc+0x124>
    1686:	4e 0f       	add	r20, r30
    1688:	5f 1f       	adc	r21, r31
    168a:	50 93 5f 01 	sts	0x015F, r21
    168e:	40 93 5e 01 	sts	0x015E, r20
    1692:	81 93       	st	Z+, r24
    1694:	91 93       	st	Z+, r25
    1696:	02 c0       	rjmp	.+4      	; 0x169c <malloc+0x128>
    1698:	e0 e0       	ldi	r30, 0x00	; 0
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	cf 01       	movw	r24, r30
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <free>:
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	09 f4       	brne	.+2      	; 0x16ae <free+0xa>
    16ac:	87 c0       	rjmp	.+270    	; 0x17bc <free+0x118>
    16ae:	fc 01       	movw	r30, r24
    16b0:	32 97       	sbiw	r30, 0x02	; 2
    16b2:	13 82       	std	Z+3, r1	; 0x03
    16b4:	12 82       	std	Z+2, r1	; 0x02
    16b6:	c0 91 60 01 	lds	r28, 0x0160
    16ba:	d0 91 61 01 	lds	r29, 0x0161
    16be:	20 97       	sbiw	r28, 0x00	; 0
    16c0:	81 f4       	brne	.+32     	; 0x16e2 <free+0x3e>
    16c2:	20 81       	ld	r18, Z
    16c4:	31 81       	ldd	r19, Z+1	; 0x01
    16c6:	28 0f       	add	r18, r24
    16c8:	39 1f       	adc	r19, r25
    16ca:	80 91 5e 01 	lds	r24, 0x015E
    16ce:	90 91 5f 01 	lds	r25, 0x015F
    16d2:	82 17       	cp	r24, r18
    16d4:	93 07       	cpc	r25, r19
    16d6:	79 f5       	brne	.+94     	; 0x1736 <free+0x92>
    16d8:	f0 93 5f 01 	sts	0x015F, r31
    16dc:	e0 93 5e 01 	sts	0x015E, r30
    16e0:	6d c0       	rjmp	.+218    	; 0x17bc <free+0x118>
    16e2:	de 01       	movw	r26, r28
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	ae 17       	cp	r26, r30
    16ea:	bf 07       	cpc	r27, r31
    16ec:	50 f4       	brcc	.+20     	; 0x1702 <free+0x5e>
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	4d 91       	ld	r20, X+
    16f2:	5c 91       	ld	r21, X
    16f4:	13 97       	sbiw	r26, 0x03	; 3
    16f6:	9d 01       	movw	r18, r26
    16f8:	41 15       	cp	r20, r1
    16fa:	51 05       	cpc	r21, r1
    16fc:	09 f1       	breq	.+66     	; 0x1740 <free+0x9c>
    16fe:	da 01       	movw	r26, r20
    1700:	f3 cf       	rjmp	.-26     	; 0x16e8 <free+0x44>
    1702:	b3 83       	std	Z+3, r27	; 0x03
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	40 81       	ld	r20, Z
    1708:	51 81       	ldd	r21, Z+1	; 0x01
    170a:	84 0f       	add	r24, r20
    170c:	95 1f       	adc	r25, r21
    170e:	8a 17       	cp	r24, r26
    1710:	9b 07       	cpc	r25, r27
    1712:	71 f4       	brne	.+28     	; 0x1730 <free+0x8c>
    1714:	8d 91       	ld	r24, X+
    1716:	9c 91       	ld	r25, X
    1718:	11 97       	sbiw	r26, 0x01	; 1
    171a:	84 0f       	add	r24, r20
    171c:	95 1f       	adc	r25, r21
    171e:	02 96       	adiw	r24, 0x02	; 2
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	12 96       	adiw	r26, 0x02	; 2
    1726:	8d 91       	ld	r24, X+
    1728:	9c 91       	ld	r25, X
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	93 83       	std	Z+3, r25	; 0x03
    172e:	82 83       	std	Z+2, r24	; 0x02
    1730:	21 15       	cp	r18, r1
    1732:	31 05       	cpc	r19, r1
    1734:	29 f4       	brne	.+10     	; 0x1740 <free+0x9c>
    1736:	f0 93 61 01 	sts	0x0161, r31
    173a:	e0 93 60 01 	sts	0x0160, r30
    173e:	3e c0       	rjmp	.+124    	; 0x17bc <free+0x118>
    1740:	d9 01       	movw	r26, r18
    1742:	13 96       	adiw	r26, 0x03	; 3
    1744:	fc 93       	st	X, r31
    1746:	ee 93       	st	-X, r30
    1748:	12 97       	sbiw	r26, 0x02	; 2
    174a:	4d 91       	ld	r20, X+
    174c:	5d 91       	ld	r21, X+
    174e:	a4 0f       	add	r26, r20
    1750:	b5 1f       	adc	r27, r21
    1752:	ea 17       	cp	r30, r26
    1754:	fb 07       	cpc	r31, r27
    1756:	79 f4       	brne	.+30     	; 0x1776 <free+0xd2>
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	02 96       	adiw	r24, 0x02	; 2
    1762:	d9 01       	movw	r26, r18
    1764:	11 96       	adiw	r26, 0x01	; 1
    1766:	9c 93       	st	X, r25
    1768:	8e 93       	st	-X, r24
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	13 96       	adiw	r26, 0x03	; 3
    1770:	9c 93       	st	X, r25
    1772:	8e 93       	st	-X, r24
    1774:	12 97       	sbiw	r26, 0x02	; 2
    1776:	e0 e0       	ldi	r30, 0x00	; 0
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	19 f0       	breq	.+6      	; 0x1788 <free+0xe4>
    1782:	fe 01       	movw	r30, r28
    1784:	ec 01       	movw	r28, r24
    1786:	f9 cf       	rjmp	.-14     	; 0x177a <free+0xd6>
    1788:	ce 01       	movw	r24, r28
    178a:	02 96       	adiw	r24, 0x02	; 2
    178c:	28 81       	ld	r18, Y
    178e:	39 81       	ldd	r19, Y+1	; 0x01
    1790:	82 0f       	add	r24, r18
    1792:	93 1f       	adc	r25, r19
    1794:	20 91 5e 01 	lds	r18, 0x015E
    1798:	30 91 5f 01 	lds	r19, 0x015F
    179c:	28 17       	cp	r18, r24
    179e:	39 07       	cpc	r19, r25
    17a0:	69 f4       	brne	.+26     	; 0x17bc <free+0x118>
    17a2:	30 97       	sbiw	r30, 0x00	; 0
    17a4:	29 f4       	brne	.+10     	; 0x17b0 <free+0x10c>
    17a6:	10 92 61 01 	sts	0x0161, r1
    17aa:	10 92 60 01 	sts	0x0160, r1
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <free+0x110>
    17b0:	13 82       	std	Z+3, r1	; 0x03
    17b2:	12 82       	std	Z+2, r1	; 0x02
    17b4:	d0 93 5f 01 	sts	0x015F, r29
    17b8:	c0 93 5e 01 	sts	0x015E, r28
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <realloc>:
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e7 ee       	ldi	r30, 0xE7	; 231
    17c8:	fb e0       	ldi	r31, 0x0B	; 11
    17ca:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x8>
    17ce:	ec 01       	movw	r28, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	20 97       	sbiw	r28, 0x00	; 0
    17d4:	19 f4       	brne	.+6      	; 0x17dc <realloc+0x1a>
    17d6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <malloc>
    17da:	b8 c0       	rjmp	.+368    	; 0x194c <realloc+0x18a>
    17dc:	fe 01       	movw	r30, r28
    17de:	e6 0f       	add	r30, r22
    17e0:	f7 1f       	adc	r31, r23
    17e2:	9e 01       	movw	r18, r28
    17e4:	22 50       	subi	r18, 0x02	; 2
    17e6:	31 09       	sbc	r19, r1
    17e8:	e2 17       	cp	r30, r18
    17ea:	f3 07       	cpc	r31, r19
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <realloc+0x2e>
    17ee:	ac c0       	rjmp	.+344    	; 0x1948 <realloc+0x186>
    17f0:	d9 01       	movw	r26, r18
    17f2:	0d 91       	ld	r16, X+
    17f4:	1c 91       	ld	r17, X
    17f6:	11 97       	sbiw	r26, 0x01	; 1
    17f8:	06 17       	cp	r16, r22
    17fa:	17 07       	cpc	r17, r23
    17fc:	b8 f0       	brcs	.+46     	; 0x182c <realloc+0x6a>
    17fe:	05 30       	cpi	r16, 0x05	; 5
    1800:	11 05       	cpc	r17, r1
    1802:	08 f4       	brcc	.+2      	; 0x1806 <realloc+0x44>
    1804:	9f c0       	rjmp	.+318    	; 0x1944 <realloc+0x182>
    1806:	a8 01       	movw	r20, r16
    1808:	44 50       	subi	r20, 0x04	; 4
    180a:	51 09       	sbc	r21, r1
    180c:	46 17       	cp	r20, r22
    180e:	57 07       	cpc	r21, r23
    1810:	08 f4       	brcc	.+2      	; 0x1814 <realloc+0x52>
    1812:	98 c0       	rjmp	.+304    	; 0x1944 <realloc+0x182>
    1814:	02 50       	subi	r16, 0x02	; 2
    1816:	11 09       	sbc	r17, r1
    1818:	06 1b       	sub	r16, r22
    181a:	17 0b       	sbc	r17, r23
    181c:	01 93       	st	Z+, r16
    181e:	11 93       	st	Z+, r17
    1820:	6d 93       	st	X+, r22
    1822:	7c 93       	st	X, r23
    1824:	cf 01       	movw	r24, r30
    1826:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <free>
    182a:	8c c0       	rjmp	.+280    	; 0x1944 <realloc+0x182>
    182c:	5b 01       	movw	r10, r22
    182e:	a0 1a       	sub	r10, r16
    1830:	b1 0a       	sbc	r11, r17
    1832:	4e 01       	movw	r8, r28
    1834:	80 0e       	add	r8, r16
    1836:	91 1e       	adc	r9, r17
    1838:	a0 91 60 01 	lds	r26, 0x0160
    183c:	b0 91 61 01 	lds	r27, 0x0161
    1840:	61 2c       	mov	r6, r1
    1842:	71 2c       	mov	r7, r1
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	10 97       	sbiw	r26, 0x00	; 0
    184a:	09 f4       	brne	.+2      	; 0x184e <realloc+0x8c>
    184c:	49 c0       	rjmp	.+146    	; 0x18e0 <realloc+0x11e>
    184e:	a8 15       	cp	r26, r8
    1850:	b9 05       	cpc	r27, r9
    1852:	c9 f5       	brne	.+114    	; 0x18c6 <realloc+0x104>
    1854:	ed 90       	ld	r14, X+
    1856:	fc 90       	ld	r15, X
    1858:	11 97       	sbiw	r26, 0x01	; 1
    185a:	67 01       	movw	r12, r14
    185c:	42 e0       	ldi	r20, 0x02	; 2
    185e:	c4 0e       	add	r12, r20
    1860:	d1 1c       	adc	r13, r1
    1862:	ca 14       	cp	r12, r10
    1864:	db 04       	cpc	r13, r11
    1866:	78 f1       	brcs	.+94     	; 0x18c6 <realloc+0x104>
    1868:	47 01       	movw	r8, r14
    186a:	8a 18       	sub	r8, r10
    186c:	9b 08       	sbc	r9, r11
    186e:	64 01       	movw	r12, r8
    1870:	42 e0       	ldi	r20, 0x02	; 2
    1872:	c4 0e       	add	r12, r20
    1874:	d1 1c       	adc	r13, r1
    1876:	12 96       	adiw	r26, 0x02	; 2
    1878:	bc 90       	ld	r11, X
    187a:	12 97       	sbiw	r26, 0x02	; 2
    187c:	13 96       	adiw	r26, 0x03	; 3
    187e:	ac 91       	ld	r26, X
    1880:	b5 e0       	ldi	r27, 0x05	; 5
    1882:	cb 16       	cp	r12, r27
    1884:	d1 04       	cpc	r13, r1
    1886:	40 f0       	brcs	.+16     	; 0x1898 <realloc+0xd6>
    1888:	b2 82       	std	Z+2, r11	; 0x02
    188a:	a3 83       	std	Z+3, r26	; 0x03
    188c:	91 82       	std	Z+1, r9	; 0x01
    188e:	80 82       	st	Z, r8
    1890:	d9 01       	movw	r26, r18
    1892:	8d 93       	st	X+, r24
    1894:	9c 93       	st	X, r25
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <realloc+0xe8>
    1898:	0e 5f       	subi	r16, 0xFE	; 254
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	0e 0d       	add	r16, r14
    189e:	1f 1d       	adc	r17, r15
    18a0:	f9 01       	movw	r30, r18
    18a2:	11 83       	std	Z+1, r17	; 0x01
    18a4:	00 83       	st	Z, r16
    18a6:	eb 2d       	mov	r30, r11
    18a8:	fa 2f       	mov	r31, r26
    18aa:	61 15       	cp	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	31 f0       	breq	.+12     	; 0x18bc <realloc+0xfa>
    18b0:	db 01       	movw	r26, r22
    18b2:	13 96       	adiw	r26, 0x03	; 3
    18b4:	fc 93       	st	X, r31
    18b6:	ee 93       	st	-X, r30
    18b8:	12 97       	sbiw	r26, 0x02	; 2
    18ba:	44 c0       	rjmp	.+136    	; 0x1944 <realloc+0x182>
    18bc:	f0 93 61 01 	sts	0x0161, r31
    18c0:	e0 93 60 01 	sts	0x0160, r30
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <realloc+0x182>
    18c6:	6d 91       	ld	r22, X+
    18c8:	7c 91       	ld	r23, X
    18ca:	11 97       	sbiw	r26, 0x01	; 1
    18cc:	66 16       	cp	r6, r22
    18ce:	77 06       	cpc	r7, r23
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <realloc+0x112>
    18d2:	3b 01       	movw	r6, r22
    18d4:	bd 01       	movw	r22, r26
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	0d 90       	ld	r0, X+
    18da:	bc 91       	ld	r27, X
    18dc:	a0 2d       	mov	r26, r0
    18de:	b4 cf       	rjmp	.-152    	; 0x1848 <realloc+0x86>
    18e0:	60 91 5e 01 	lds	r22, 0x015E
    18e4:	70 91 5f 01 	lds	r23, 0x015F
    18e8:	68 15       	cp	r22, r8
    18ea:	79 05       	cpc	r23, r9
    18ec:	e9 f4       	brne	.+58     	; 0x1928 <realloc+0x166>
    18ee:	68 16       	cp	r6, r24
    18f0:	79 06       	cpc	r7, r25
    18f2:	d0 f4       	brcc	.+52     	; 0x1928 <realloc+0x166>
    18f4:	40 91 00 01 	lds	r20, 0x0100
    18f8:	50 91 01 01 	lds	r21, 0x0101
    18fc:	41 15       	cp	r20, r1
    18fe:	51 05       	cpc	r21, r1
    1900:	41 f4       	brne	.+16     	; 0x1912 <realloc+0x150>
    1902:	4d b7       	in	r20, 0x3d	; 61
    1904:	5e b7       	in	r21, 0x3e	; 62
    1906:	60 91 04 01 	lds	r22, 0x0104
    190a:	70 91 05 01 	lds	r23, 0x0105
    190e:	46 1b       	sub	r20, r22
    1910:	57 0b       	sbc	r21, r23
    1912:	e4 17       	cp	r30, r20
    1914:	f5 07       	cpc	r31, r21
    1916:	c0 f4       	brcc	.+48     	; 0x1948 <realloc+0x186>
    1918:	f0 93 5f 01 	sts	0x015F, r31
    191c:	e0 93 5e 01 	sts	0x015E, r30
    1920:	f9 01       	movw	r30, r18
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	0e c0       	rjmp	.+28     	; 0x1944 <realloc+0x182>
    1928:	0e 94 ba 0a 	call	0x1574	; 0x1574 <malloc>
    192c:	7c 01       	movw	r14, r24
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	59 f0       	breq	.+22     	; 0x1948 <realloc+0x186>
    1932:	a8 01       	movw	r20, r16
    1934:	be 01       	movw	r22, r28
    1936:	0e 94 ab 0c 	call	0x1956	; 0x1956 <memcpy>
    193a:	ce 01       	movw	r24, r28
    193c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <free>
    1940:	c7 01       	movw	r24, r14
    1942:	04 c0       	rjmp	.+8      	; 0x194c <realloc+0x18a>
    1944:	ce 01       	movw	r24, r28
    1946:	02 c0       	rjmp	.+4      	; 0x194c <realloc+0x18a>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	ee e0       	ldi	r30, 0x0E	; 14
    1952:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x8>

00001956 <memcpy>:
    1956:	fb 01       	movw	r30, r22
    1958:	dc 01       	movw	r26, r24
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <memcpy+0xa>
    195c:	01 90       	ld	r0, Z+
    195e:	0d 92       	st	X+, r0
    1960:	41 50       	subi	r20, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	d8 f7       	brcc	.-10     	; 0x195c <memcpy+0x6>
    1966:	08 95       	ret

00001968 <printf>:
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea eb       	ldi	r30, 0xBA	; 186
    196e:	fc e0       	ldi	r31, 0x0C	; 12
    1970:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__prologue_saves__+0x20>
    1974:	fe 01       	movw	r30, r28
    1976:	35 96       	adiw	r30, 0x05	; 5
    1978:	61 91       	ld	r22, Z+
    197a:	71 91       	ld	r23, Z+
    197c:	af 01       	movw	r20, r30
    197e:	80 91 64 01 	lds	r24, 0x0164
    1982:	90 91 65 01 	lds	r25, 0x0165
    1986:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vfprintf>
    198a:	e2 e0       	ldi	r30, 0x02	; 2
    198c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__epilogue_restores__+0x20>

00001990 <puts>:
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	e0 91 64 01 	lds	r30, 0x0164
    199c:	f0 91 65 01 	lds	r31, 0x0165
    19a0:	23 81       	ldd	r18, Z+3	; 0x03
    19a2:	21 ff       	sbrs	r18, 1
    19a4:	1b c0       	rjmp	.+54     	; 0x19dc <puts+0x4c>
    19a6:	ec 01       	movw	r28, r24
    19a8:	00 e0       	ldi	r16, 0x00	; 0
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	89 91       	ld	r24, Y+
    19ae:	60 91 64 01 	lds	r22, 0x0164
    19b2:	70 91 65 01 	lds	r23, 0x0165
    19b6:	db 01       	movw	r26, r22
    19b8:	18 96       	adiw	r26, 0x08	; 8
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	19 97       	sbiw	r26, 0x09	; 9
    19c0:	88 23       	and	r24, r24
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <puts+0x40>
    19c4:	09 95       	icall
    19c6:	89 2b       	or	r24, r25
    19c8:	89 f3       	breq	.-30     	; 0x19ac <puts+0x1c>
    19ca:	0f ef       	ldi	r16, 0xFF	; 255
    19cc:	1f ef       	ldi	r17, 0xFF	; 255
    19ce:	ee cf       	rjmp	.-36     	; 0x19ac <puts+0x1c>
    19d0:	8a e0       	ldi	r24, 0x0A	; 10
    19d2:	09 95       	icall
    19d4:	89 2b       	or	r24, r25
    19d6:	11 f4       	brne	.+4      	; 0x19dc <puts+0x4c>
    19d8:	c8 01       	movw	r24, r16
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <puts+0x50>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <vfprintf>:
    19ea:	ac e0       	ldi	r26, 0x0C	; 12
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb ef       	ldi	r30, 0xFB	; 251
    19f0:	fc e0       	ldi	r31, 0x0C	; 12
    19f2:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__>
    19f6:	7c 01       	movw	r14, r24
    19f8:	6b 01       	movw	r12, r22
    19fa:	8a 01       	movw	r16, r20
    19fc:	fc 01       	movw	r30, r24
    19fe:	17 82       	std	Z+7, r1	; 0x07
    1a00:	16 82       	std	Z+6, r1	; 0x06
    1a02:	83 81       	ldd	r24, Z+3	; 0x03
    1a04:	81 ff       	sbrs	r24, 1
    1a06:	bd c1       	rjmp	.+890    	; 0x1d82 <vfprintf+0x398>
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	4c 01       	movw	r8, r24
    1a0e:	f7 01       	movw	r30, r14
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	f6 01       	movw	r30, r12
    1a14:	93 fd       	sbrc	r25, 3
    1a16:	85 91       	lpm	r24, Z+
    1a18:	93 ff       	sbrs	r25, 3
    1a1a:	81 91       	ld	r24, Z+
    1a1c:	6f 01       	movw	r12, r30
    1a1e:	88 23       	and	r24, r24
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <vfprintf+0x3a>
    1a22:	ab c1       	rjmp	.+854    	; 0x1d7a <vfprintf+0x390>
    1a24:	85 32       	cpi	r24, 0x25	; 37
    1a26:	39 f4       	brne	.+14     	; 0x1a36 <vfprintf+0x4c>
    1a28:	93 fd       	sbrc	r25, 3
    1a2a:	85 91       	lpm	r24, Z+
    1a2c:	93 ff       	sbrs	r25, 3
    1a2e:	81 91       	ld	r24, Z+
    1a30:	6f 01       	movw	r12, r30
    1a32:	85 32       	cpi	r24, 0x25	; 37
    1a34:	29 f4       	brne	.+10     	; 0x1a40 <vfprintf+0x56>
    1a36:	b7 01       	movw	r22, r14
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1a3e:	e7 cf       	rjmp	.-50     	; 0x1a0e <vfprintf+0x24>
    1a40:	51 2c       	mov	r5, r1
    1a42:	31 2c       	mov	r3, r1
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	20 32       	cpi	r18, 0x20	; 32
    1a48:	a0 f4       	brcc	.+40     	; 0x1a72 <vfprintf+0x88>
    1a4a:	8b 32       	cpi	r24, 0x2B	; 43
    1a4c:	69 f0       	breq	.+26     	; 0x1a68 <vfprintf+0x7e>
    1a4e:	30 f4       	brcc	.+12     	; 0x1a5c <vfprintf+0x72>
    1a50:	80 32       	cpi	r24, 0x20	; 32
    1a52:	59 f0       	breq	.+22     	; 0x1a6a <vfprintf+0x80>
    1a54:	83 32       	cpi	r24, 0x23	; 35
    1a56:	69 f4       	brne	.+26     	; 0x1a72 <vfprintf+0x88>
    1a58:	20 61       	ori	r18, 0x10	; 16
    1a5a:	2c c0       	rjmp	.+88     	; 0x1ab4 <vfprintf+0xca>
    1a5c:	8d 32       	cpi	r24, 0x2D	; 45
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <vfprintf+0x84>
    1a60:	80 33       	cpi	r24, 0x30	; 48
    1a62:	39 f4       	brne	.+14     	; 0x1a72 <vfprintf+0x88>
    1a64:	21 60       	ori	r18, 0x01	; 1
    1a66:	26 c0       	rjmp	.+76     	; 0x1ab4 <vfprintf+0xca>
    1a68:	22 60       	ori	r18, 0x02	; 2
    1a6a:	24 60       	ori	r18, 0x04	; 4
    1a6c:	23 c0       	rjmp	.+70     	; 0x1ab4 <vfprintf+0xca>
    1a6e:	28 60       	ori	r18, 0x08	; 8
    1a70:	21 c0       	rjmp	.+66     	; 0x1ab4 <vfprintf+0xca>
    1a72:	27 fd       	sbrc	r18, 7
    1a74:	27 c0       	rjmp	.+78     	; 0x1ac4 <vfprintf+0xda>
    1a76:	30 ed       	ldi	r19, 0xD0	; 208
    1a78:	38 0f       	add	r19, r24
    1a7a:	3a 30       	cpi	r19, 0x0A	; 10
    1a7c:	78 f4       	brcc	.+30     	; 0x1a9c <vfprintf+0xb2>
    1a7e:	26 ff       	sbrs	r18, 6
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <vfprintf+0xa4>
    1a82:	fa e0       	ldi	r31, 0x0A	; 10
    1a84:	5f 9e       	mul	r5, r31
    1a86:	30 0d       	add	r19, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	53 2e       	mov	r5, r19
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <vfprintf+0xca>
    1a8e:	8a e0       	ldi	r24, 0x0A	; 10
    1a90:	38 9e       	mul	r3, r24
    1a92:	30 0d       	add	r19, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	33 2e       	mov	r3, r19
    1a98:	20 62       	ori	r18, 0x20	; 32
    1a9a:	0c c0       	rjmp	.+24     	; 0x1ab4 <vfprintf+0xca>
    1a9c:	8e 32       	cpi	r24, 0x2E	; 46
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <vfprintf+0xbe>
    1aa0:	26 fd       	sbrc	r18, 6
    1aa2:	6b c1       	rjmp	.+726    	; 0x1d7a <vfprintf+0x390>
    1aa4:	20 64       	ori	r18, 0x40	; 64
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <vfprintf+0xca>
    1aa8:	8c 36       	cpi	r24, 0x6C	; 108
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <vfprintf+0xc6>
    1aac:	20 68       	ori	r18, 0x80	; 128
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <vfprintf+0xca>
    1ab0:	88 36       	cpi	r24, 0x68	; 104
    1ab2:	41 f4       	brne	.+16     	; 0x1ac4 <vfprintf+0xda>
    1ab4:	f6 01       	movw	r30, r12
    1ab6:	93 fd       	sbrc	r25, 3
    1ab8:	85 91       	lpm	r24, Z+
    1aba:	93 ff       	sbrs	r25, 3
    1abc:	81 91       	ld	r24, Z+
    1abe:	6f 01       	movw	r12, r30
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	c1 cf       	rjmp	.-126    	; 0x1a46 <vfprintf+0x5c>
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	9f 7d       	andi	r25, 0xDF	; 223
    1ac8:	95 54       	subi	r25, 0x45	; 69
    1aca:	93 30       	cpi	r25, 0x03	; 3
    1acc:	28 f4       	brcc	.+10     	; 0x1ad8 <vfprintf+0xee>
    1ace:	0c 5f       	subi	r16, 0xFC	; 252
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	ff e3       	ldi	r31, 0x3F	; 63
    1ad4:	f9 83       	std	Y+1, r31	; 0x01
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <vfprintf+0x108>
    1ad8:	83 36       	cpi	r24, 0x63	; 99
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <vfprintf+0xfe>
    1adc:	83 37       	cpi	r24, 0x73	; 115
    1ade:	71 f0       	breq	.+28     	; 0x1afc <vfprintf+0x112>
    1ae0:	83 35       	cpi	r24, 0x53	; 83
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <vfprintf+0xfc>
    1ae4:	5b c0       	rjmp	.+182    	; 0x1b9c <vfprintf+0x1b2>
    1ae6:	22 c0       	rjmp	.+68     	; 0x1b2c <vfprintf+0x142>
    1ae8:	f8 01       	movw	r30, r16
    1aea:	80 81       	ld	r24, Z
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	0e 5f       	subi	r16, 0xFE	; 254
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	44 24       	eor	r4, r4
    1af4:	43 94       	inc	r4
    1af6:	51 2c       	mov	r5, r1
    1af8:	54 01       	movw	r10, r8
    1afa:	15 c0       	rjmp	.+42     	; 0x1b26 <vfprintf+0x13c>
    1afc:	38 01       	movw	r6, r16
    1afe:	f2 e0       	ldi	r31, 0x02	; 2
    1b00:	6f 0e       	add	r6, r31
    1b02:	71 1c       	adc	r7, r1
    1b04:	f8 01       	movw	r30, r16
    1b06:	a0 80       	ld	r10, Z
    1b08:	b1 80       	ldd	r11, Z+1	; 0x01
    1b0a:	26 ff       	sbrs	r18, 6
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <vfprintf+0x12a>
    1b0e:	65 2d       	mov	r22, r5
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <vfprintf+0x12e>
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	7f ef       	ldi	r23, 0xFF	; 255
    1b18:	c5 01       	movw	r24, r10
    1b1a:	2c 87       	std	Y+12, r18	; 0x0c
    1b1c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <strnlen>
    1b20:	2c 01       	movw	r4, r24
    1b22:	83 01       	movw	r16, r6
    1b24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b26:	2f 77       	andi	r18, 0x7F	; 127
    1b28:	22 2e       	mov	r2, r18
    1b2a:	17 c0       	rjmp	.+46     	; 0x1b5a <vfprintf+0x170>
    1b2c:	38 01       	movw	r6, r16
    1b2e:	f2 e0       	ldi	r31, 0x02	; 2
    1b30:	6f 0e       	add	r6, r31
    1b32:	71 1c       	adc	r7, r1
    1b34:	f8 01       	movw	r30, r16
    1b36:	a0 80       	ld	r10, Z
    1b38:	b1 80       	ldd	r11, Z+1	; 0x01
    1b3a:	26 ff       	sbrs	r18, 6
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <vfprintf+0x15a>
    1b3e:	65 2d       	mov	r22, r5
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x15e>
    1b44:	6f ef       	ldi	r22, 0xFF	; 255
    1b46:	7f ef       	ldi	r23, 0xFF	; 255
    1b48:	c5 01       	movw	r24, r10
    1b4a:	2c 87       	std	Y+12, r18	; 0x0c
    1b4c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <strnlen_P>
    1b50:	2c 01       	movw	r4, r24
    1b52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b54:	20 68       	ori	r18, 0x80	; 128
    1b56:	22 2e       	mov	r2, r18
    1b58:	83 01       	movw	r16, r6
    1b5a:	23 fc       	sbrc	r2, 3
    1b5c:	1b c0       	rjmp	.+54     	; 0x1b94 <vfprintf+0x1aa>
    1b5e:	83 2d       	mov	r24, r3
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	48 16       	cp	r4, r24
    1b64:	59 06       	cpc	r5, r25
    1b66:	b0 f4       	brcc	.+44     	; 0x1b94 <vfprintf+0x1aa>
    1b68:	b7 01       	movw	r22, r14
    1b6a:	80 e2       	ldi	r24, 0x20	; 32
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b72:	3a 94       	dec	r3
    1b74:	f4 cf       	rjmp	.-24     	; 0x1b5e <vfprintf+0x174>
    1b76:	f5 01       	movw	r30, r10
    1b78:	27 fc       	sbrc	r2, 7
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	27 fe       	sbrs	r2, 7
    1b7e:	81 91       	ld	r24, Z+
    1b80:	5f 01       	movw	r10, r30
    1b82:	b7 01       	movw	r22, r14
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b8a:	31 10       	cpse	r3, r1
    1b8c:	3a 94       	dec	r3
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	4f 1a       	sub	r4, r31
    1b92:	51 08       	sbc	r5, r1
    1b94:	41 14       	cp	r4, r1
    1b96:	51 04       	cpc	r5, r1
    1b98:	71 f7       	brne	.-36     	; 0x1b76 <vfprintf+0x18c>
    1b9a:	e5 c0       	rjmp	.+458    	; 0x1d66 <vfprintf+0x37c>
    1b9c:	84 36       	cpi	r24, 0x64	; 100
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <vfprintf+0x1ba>
    1ba0:	89 36       	cpi	r24, 0x69	; 105
    1ba2:	39 f5       	brne	.+78     	; 0x1bf2 <vfprintf+0x208>
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	27 ff       	sbrs	r18, 7
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <vfprintf+0x1ce>
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	0c 5f       	subi	r16, 0xFC	; 252
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <vfprintf+0x1de>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	88 27       	eor	r24, r24
    1bbe:	77 fd       	sbrc	r23, 7
    1bc0:	80 95       	com	r24
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	0e 5f       	subi	r16, 0xFE	; 254
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	2f 76       	andi	r18, 0x6F	; 111
    1bca:	b2 2e       	mov	r11, r18
    1bcc:	97 ff       	sbrs	r25, 7
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <vfprintf+0x1f8>
    1bd0:	90 95       	com	r25
    1bd2:	80 95       	com	r24
    1bd4:	70 95       	com	r23
    1bd6:	61 95       	neg	r22
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	8f 4f       	sbci	r24, 0xFF	; 255
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	20 68       	ori	r18, 0x80	; 128
    1be0:	b2 2e       	mov	r11, r18
    1be2:	2a e0       	ldi	r18, 0x0A	; 10
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a4 01       	movw	r20, r8
    1be8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__ultoa_invert>
    1bec:	a8 2e       	mov	r10, r24
    1bee:	a8 18       	sub	r10, r8
    1bf0:	44 c0       	rjmp	.+136    	; 0x1c7a <vfprintf+0x290>
    1bf2:	85 37       	cpi	r24, 0x75	; 117
    1bf4:	29 f4       	brne	.+10     	; 0x1c00 <vfprintf+0x216>
    1bf6:	2f 7e       	andi	r18, 0xEF	; 239
    1bf8:	b2 2e       	mov	r11, r18
    1bfa:	2a e0       	ldi	r18, 0x0A	; 10
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	25 c0       	rjmp	.+74     	; 0x1c4a <vfprintf+0x260>
    1c00:	f2 2f       	mov	r31, r18
    1c02:	f9 7f       	andi	r31, 0xF9	; 249
    1c04:	bf 2e       	mov	r11, r31
    1c06:	8f 36       	cpi	r24, 0x6F	; 111
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <vfprintf+0x250>
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <vfprintf+0x228>
    1c0c:	88 35       	cpi	r24, 0x58	; 88
    1c0e:	79 f0       	breq	.+30     	; 0x1c2e <vfprintf+0x244>
    1c10:	b4 c0       	rjmp	.+360    	; 0x1d7a <vfprintf+0x390>
    1c12:	80 37       	cpi	r24, 0x70	; 112
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <vfprintf+0x232>
    1c16:	88 37       	cpi	r24, 0x78	; 120
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <vfprintf+0x238>
    1c1a:	af c0       	rjmp	.+350    	; 0x1d7a <vfprintf+0x390>
    1c1c:	2f 2f       	mov	r18, r31
    1c1e:	20 61       	ori	r18, 0x10	; 16
    1c20:	b2 2e       	mov	r11, r18
    1c22:	b4 fe       	sbrs	r11, 4
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <vfprintf+0x256>
    1c26:	8b 2d       	mov	r24, r11
    1c28:	84 60       	ori	r24, 0x04	; 4
    1c2a:	b8 2e       	mov	r11, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <vfprintf+0x256>
    1c2e:	24 ff       	sbrs	r18, 4
    1c30:	0a c0       	rjmp	.+20     	; 0x1c46 <vfprintf+0x25c>
    1c32:	9f 2f       	mov	r25, r31
    1c34:	96 60       	ori	r25, 0x06	; 6
    1c36:	b9 2e       	mov	r11, r25
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x25c>
    1c3a:	28 e0       	ldi	r18, 0x08	; 8
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <vfprintf+0x260>
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0x260>
    1c46:	20 e1       	ldi	r18, 0x10	; 16
    1c48:	32 e0       	ldi	r19, 0x02	; 2
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	b7 fe       	sbrs	r11, 7
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <vfprintf+0x274>
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0c 5f       	subi	r16, 0xFC	; 252
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <vfprintf+0x280>
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 5f       	subi	r16, 0xFE	; 254
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	a4 01       	movw	r20, r8
    1c6c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__ultoa_invert>
    1c70:	a8 2e       	mov	r10, r24
    1c72:	a8 18       	sub	r10, r8
    1c74:	fb 2d       	mov	r31, r11
    1c76:	ff 77       	andi	r31, 0x7F	; 127
    1c78:	bf 2e       	mov	r11, r31
    1c7a:	b6 fe       	sbrs	r11, 6
    1c7c:	0b c0       	rjmp	.+22     	; 0x1c94 <vfprintf+0x2aa>
    1c7e:	2b 2d       	mov	r18, r11
    1c80:	2e 7f       	andi	r18, 0xFE	; 254
    1c82:	a5 14       	cp	r10, r5
    1c84:	50 f4       	brcc	.+20     	; 0x1c9a <vfprintf+0x2b0>
    1c86:	b4 fe       	sbrs	r11, 4
    1c88:	0a c0       	rjmp	.+20     	; 0x1c9e <vfprintf+0x2b4>
    1c8a:	b2 fc       	sbrc	r11, 2
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <vfprintf+0x2b4>
    1c8e:	2b 2d       	mov	r18, r11
    1c90:	2e 7e       	andi	r18, 0xEE	; 238
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <vfprintf+0x2b4>
    1c94:	7a 2c       	mov	r7, r10
    1c96:	2b 2d       	mov	r18, r11
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <vfprintf+0x2b6>
    1c9a:	7a 2c       	mov	r7, r10
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <vfprintf+0x2b6>
    1c9e:	75 2c       	mov	r7, r5
    1ca0:	24 ff       	sbrs	r18, 4
    1ca2:	0d c0       	rjmp	.+26     	; 0x1cbe <vfprintf+0x2d4>
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ea 0d       	add	r30, r10
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	80 81       	ld	r24, Z
    1cac:	80 33       	cpi	r24, 0x30	; 48
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <vfprintf+0x2ca>
    1cb0:	29 7e       	andi	r18, 0xE9	; 233
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <vfprintf+0x2dc>
    1cb4:	22 ff       	sbrs	r18, 2
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <vfprintf+0x2da>
    1cb8:	73 94       	inc	r7
    1cba:	73 94       	inc	r7
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <vfprintf+0x2dc>
    1cbe:	82 2f       	mov	r24, r18
    1cc0:	86 78       	andi	r24, 0x86	; 134
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <vfprintf+0x2dc>
    1cc4:	73 94       	inc	r7
    1cc6:	23 fd       	sbrc	r18, 3
    1cc8:	13 c0       	rjmp	.+38     	; 0x1cf0 <vfprintf+0x306>
    1cca:	20 ff       	sbrs	r18, 0
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <vfprintf+0x2f0>
    1cce:	5a 2c       	mov	r5, r10
    1cd0:	73 14       	cp	r7, r3
    1cd2:	18 f4       	brcc	.+6      	; 0x1cda <vfprintf+0x2f0>
    1cd4:	53 0c       	add	r5, r3
    1cd6:	57 18       	sub	r5, r7
    1cd8:	73 2c       	mov	r7, r3
    1cda:	73 14       	cp	r7, r3
    1cdc:	68 f4       	brcc	.+26     	; 0x1cf8 <vfprintf+0x30e>
    1cde:	b7 01       	movw	r22, r14
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	2c 87       	std	Y+12, r18	; 0x0c
    1ce6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1cea:	73 94       	inc	r7
    1cec:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cee:	f5 cf       	rjmp	.-22     	; 0x1cda <vfprintf+0x2f0>
    1cf0:	73 14       	cp	r7, r3
    1cf2:	10 f4       	brcc	.+4      	; 0x1cf8 <vfprintf+0x30e>
    1cf4:	37 18       	sub	r3, r7
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <vfprintf+0x310>
    1cf8:	31 2c       	mov	r3, r1
    1cfa:	24 ff       	sbrs	r18, 4
    1cfc:	12 c0       	rjmp	.+36     	; 0x1d22 <vfprintf+0x338>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	80 e3       	ldi	r24, 0x30	; 48
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2c 87       	std	Y+12, r18	; 0x0c
    1d06:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0c:	22 ff       	sbrs	r18, 2
    1d0e:	17 c0       	rjmp	.+46     	; 0x1d3e <vfprintf+0x354>
    1d10:	21 ff       	sbrs	r18, 1
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <vfprintf+0x330>
    1d14:	88 e5       	ldi	r24, 0x58	; 88
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x334>
    1d1a:	88 e7       	ldi	r24, 0x78	; 120
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	b7 01       	movw	r22, r14
    1d20:	0c c0       	rjmp	.+24     	; 0x1d3a <vfprintf+0x350>
    1d22:	82 2f       	mov	r24, r18
    1d24:	86 78       	andi	r24, 0x86	; 134
    1d26:	59 f0       	breq	.+22     	; 0x1d3e <vfprintf+0x354>
    1d28:	21 fd       	sbrc	r18, 1
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x346>
    1d2c:	80 e2       	ldi	r24, 0x20	; 32
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <vfprintf+0x348>
    1d30:	8b e2       	ldi	r24, 0x2B	; 43
    1d32:	27 fd       	sbrc	r18, 7
    1d34:	8d e2       	ldi	r24, 0x2D	; 45
    1d36:	b7 01       	movw	r22, r14
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d3e:	a5 14       	cp	r10, r5
    1d40:	38 f4       	brcc	.+14     	; 0x1d50 <vfprintf+0x366>
    1d42:	b7 01       	movw	r22, r14
    1d44:	80 e3       	ldi	r24, 0x30	; 48
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d4c:	5a 94       	dec	r5
    1d4e:	f7 cf       	rjmp	.-18     	; 0x1d3e <vfprintf+0x354>
    1d50:	aa 94       	dec	r10
    1d52:	f4 01       	movw	r30, r8
    1d54:	ea 0d       	add	r30, r10
    1d56:	f1 1d       	adc	r31, r1
    1d58:	80 81       	ld	r24, Z
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d62:	a1 10       	cpse	r10, r1
    1d64:	f5 cf       	rjmp	.-22     	; 0x1d50 <vfprintf+0x366>
    1d66:	33 20       	and	r3, r3
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <vfprintf+0x382>
    1d6a:	51 ce       	rjmp	.-862    	; 0x1a0e <vfprintf+0x24>
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d76:	3a 94       	dec	r3
    1d78:	f6 cf       	rjmp	.-20     	; 0x1d66 <vfprintf+0x37c>
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	86 81       	ldd	r24, Z+6	; 0x06
    1d7e:	97 81       	ldd	r25, Z+7	; 0x07
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <vfprintf+0x39c>
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	9f ef       	ldi	r25, 0xFF	; 255
    1d86:	2c 96       	adiw	r28, 0x0c	; 12
    1d88:	e2 e1       	ldi	r30, 0x12	; 18
    1d8a:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__epilogue_restores__>

00001d8e <strnlen_P>:
    1d8e:	fc 01       	movw	r30, r24
    1d90:	05 90       	lpm	r0, Z+
    1d92:	61 50       	subi	r22, 0x01	; 1
    1d94:	70 40       	sbci	r23, 0x00	; 0
    1d96:	01 10       	cpse	r0, r1
    1d98:	d8 f7       	brcc	.-10     	; 0x1d90 <strnlen_P+0x2>
    1d9a:	80 95       	com	r24
    1d9c:	90 95       	com	r25
    1d9e:	8e 0f       	add	r24, r30
    1da0:	9f 1f       	adc	r25, r31
    1da2:	08 95       	ret

00001da4 <strnlen>:
    1da4:	fc 01       	movw	r30, r24
    1da6:	61 50       	subi	r22, 0x01	; 1
    1da8:	70 40       	sbci	r23, 0x00	; 0
    1daa:	01 90       	ld	r0, Z+
    1dac:	01 10       	cpse	r0, r1
    1dae:	d8 f7       	brcc	.-10     	; 0x1da6 <strnlen+0x2>
    1db0:	80 95       	com	r24
    1db2:	90 95       	com	r25
    1db4:	8e 0f       	add	r24, r30
    1db6:	9f 1f       	adc	r25, r31
    1db8:	08 95       	ret

00001dba <fputc>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	18 2f       	mov	r17, r24
    1dc4:	09 2f       	mov	r16, r25
    1dc6:	eb 01       	movw	r28, r22
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	81 fd       	sbrc	r24, 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <fputc+0x1a>
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	20 c0       	rjmp	.+64     	; 0x1e14 <fputc+0x5a>
    1dd4:	82 ff       	sbrs	r24, 2
    1dd6:	10 c0       	rjmp	.+32     	; 0x1df8 <fputc+0x3e>
    1dd8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dda:	5f 81       	ldd	r21, Y+7	; 0x07
    1ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dde:	3d 81       	ldd	r19, Y+5	; 0x05
    1de0:	42 17       	cp	r20, r18
    1de2:	53 07       	cpc	r21, r19
    1de4:	7c f4       	brge	.+30     	; 0x1e04 <fputc+0x4a>
    1de6:	e8 81       	ld	r30, Y
    1de8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dea:	9f 01       	movw	r18, r30
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	39 83       	std	Y+1, r19	; 0x01
    1df2:	28 83       	st	Y, r18
    1df4:	10 83       	st	Z, r17
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <fputc+0x4a>
    1df8:	e8 85       	ldd	r30, Y+8	; 0x08
    1dfa:	f9 85       	ldd	r31, Y+9	; 0x09
    1dfc:	81 2f       	mov	r24, r17
    1dfe:	09 95       	icall
    1e00:	89 2b       	or	r24, r25
    1e02:	29 f7       	brne	.-54     	; 0x1dce <fputc+0x14>
    1e04:	2e 81       	ldd	r18, Y+6	; 0x06
    1e06:	3f 81       	ldd	r19, Y+7	; 0x07
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	3f 83       	std	Y+7, r19	; 0x07
    1e0e:	2e 83       	std	Y+6, r18	; 0x06
    1e10:	81 2f       	mov	r24, r17
    1e12:	90 2f       	mov	r25, r16
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <__ultoa_invert>:
    1e1e:	fa 01       	movw	r30, r20
    1e20:	aa 27       	eor	r26, r26
    1e22:	28 30       	cpi	r18, 0x08	; 8
    1e24:	51 f1       	breq	.+84     	; 0x1e7a <__ultoa_invert+0x5c>
    1e26:	20 31       	cpi	r18, 0x10	; 16
    1e28:	81 f1       	breq	.+96     	; 0x1e8a <__ultoa_invert+0x6c>
    1e2a:	e8 94       	clt
    1e2c:	6f 93       	push	r22
    1e2e:	6e 7f       	andi	r22, 0xFE	; 254
    1e30:	6e 5f       	subi	r22, 0xFE	; 254
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	8f 4f       	sbci	r24, 0xFF	; 255
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	af 4f       	sbci	r26, 0xFF	; 255
    1e3a:	b1 e0       	ldi	r27, 0x01	; 1
    1e3c:	3e d0       	rcall	.+124    	; 0x1eba <__ultoa_invert+0x9c>
    1e3e:	b4 e0       	ldi	r27, 0x04	; 4
    1e40:	3c d0       	rcall	.+120    	; 0x1eba <__ultoa_invert+0x9c>
    1e42:	67 0f       	add	r22, r23
    1e44:	78 1f       	adc	r23, r24
    1e46:	89 1f       	adc	r24, r25
    1e48:	9a 1f       	adc	r25, r26
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	68 0f       	add	r22, r24
    1e4e:	79 1f       	adc	r23, r25
    1e50:	8a 1f       	adc	r24, r26
    1e52:	91 1d       	adc	r25, r1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	6a 0f       	add	r22, r26
    1e58:	71 1d       	adc	r23, r1
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	91 1d       	adc	r25, r1
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	20 d0       	rcall	.+64     	; 0x1ea2 <__ultoa_invert+0x84>
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__ultoa_invert+0x48>
    1e64:	68 94       	set
    1e66:	3f 91       	pop	r19
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	26 9f       	mul	r18, r22
    1e6c:	11 24       	eor	r1, r1
    1e6e:	30 19       	sub	r19, r0
    1e70:	30 5d       	subi	r19, 0xD0	; 208
    1e72:	31 93       	st	Z+, r19
    1e74:	de f6       	brtc	.-74     	; 0x1e2c <__ultoa_invert+0xe>
    1e76:	cf 01       	movw	r24, r30
    1e78:	08 95       	ret
    1e7a:	46 2f       	mov	r20, r22
    1e7c:	47 70       	andi	r20, 0x07	; 7
    1e7e:	40 5d       	subi	r20, 0xD0	; 208
    1e80:	41 93       	st	Z+, r20
    1e82:	b3 e0       	ldi	r27, 0x03	; 3
    1e84:	0f d0       	rcall	.+30     	; 0x1ea4 <__ultoa_invert+0x86>
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__ultoa_invert+0x5c>
    1e88:	f6 cf       	rjmp	.-20     	; 0x1e76 <__ultoa_invert+0x58>
    1e8a:	46 2f       	mov	r20, r22
    1e8c:	4f 70       	andi	r20, 0x0F	; 15
    1e8e:	40 5d       	subi	r20, 0xD0	; 208
    1e90:	4a 33       	cpi	r20, 0x3A	; 58
    1e92:	18 f0       	brcs	.+6      	; 0x1e9a <__ultoa_invert+0x7c>
    1e94:	49 5d       	subi	r20, 0xD9	; 217
    1e96:	31 fd       	sbrc	r19, 1
    1e98:	40 52       	subi	r20, 0x20	; 32
    1e9a:	41 93       	st	Z+, r20
    1e9c:	02 d0       	rcall	.+4      	; 0x1ea2 <__ultoa_invert+0x84>
    1e9e:	a9 f7       	brne	.-22     	; 0x1e8a <__ultoa_invert+0x6c>
    1ea0:	ea cf       	rjmp	.-44     	; 0x1e76 <__ultoa_invert+0x58>
    1ea2:	b4 e0       	ldi	r27, 0x04	; 4
    1ea4:	a6 95       	lsr	r26
    1ea6:	97 95       	ror	r25
    1ea8:	87 95       	ror	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	ba 95       	dec	r27
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <__ultoa_invert+0x86>
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	61 05       	cpc	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	08 95       	ret
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	0a 2e       	mov	r0, r26
    1ec0:	06 94       	lsr	r0
    1ec2:	57 95       	ror	r21
    1ec4:	47 95       	ror	r20
    1ec6:	37 95       	ror	r19
    1ec8:	27 95       	ror	r18
    1eca:	ba 95       	dec	r27
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <__ultoa_invert+0xa2>
    1ece:	62 0f       	add	r22, r18
    1ed0:	73 1f       	adc	r23, r19
    1ed2:	84 1f       	adc	r24, r20
    1ed4:	95 1f       	adc	r25, r21
    1ed6:	a0 1d       	adc	r26, r0
    1ed8:	08 95       	ret

00001eda <__prologue_saves__>:
    1eda:	2f 92       	push	r2
    1edc:	3f 92       	push	r3
    1ede:	4f 92       	push	r4
    1ee0:	5f 92       	push	r5
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	ca 1b       	sub	r28, r26
    1f04:	db 0b       	sbc	r29, r27
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	09 94       	ijmp

00001f12 <__epilogue_restores__>:
    1f12:	2a 88       	ldd	r2, Y+18	; 0x12
    1f14:	39 88       	ldd	r3, Y+17	; 0x11
    1f16:	48 88       	ldd	r4, Y+16	; 0x10
    1f18:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f20:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f22:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f24:	b9 84       	ldd	r11, Y+9	; 0x09
    1f26:	c8 84       	ldd	r12, Y+8	; 0x08
    1f28:	df 80       	ldd	r13, Y+7	; 0x07
    1f2a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f2c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f2e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f30:	1b 81       	ldd	r17, Y+3	; 0x03
    1f32:	aa 81       	ldd	r26, Y+2	; 0x02
    1f34:	b9 81       	ldd	r27, Y+1	; 0x01
    1f36:	ce 0f       	add	r28, r30
    1f38:	d1 1d       	adc	r29, r1
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	ed 01       	movw	r28, r26
    1f46:	08 95       	ret

00001f48 <_exit>:
    1f48:	f8 94       	cli

00001f4a <__stop_program>:
    1f4a:	ff cf       	rjmp	.-2      	; 0x1f4a <__stop_program>
