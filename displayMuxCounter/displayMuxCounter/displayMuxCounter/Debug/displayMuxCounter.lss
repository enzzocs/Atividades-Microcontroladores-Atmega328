
displayMuxCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001bc  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fc  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000156  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001df  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b3  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_3>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_14>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	c3 00       	.word	0x00c3	; ????
  6a:	d7 00       	.word	0x00d7	; ????
  6c:	c5 00       	.word	0x00c5	; ????
  6e:	c7 00       	.word	0x00c7	; ????
  70:	c9 00       	.word	0x00c9	; ????
  72:	cb 00       	.word	0x00cb	; ????
  74:	cd 00       	.word	0x00cd	; ????
  76:	cf 00       	.word	0x00cf	; ????
  78:	d1 00       	.word	0x00d1	; ????
  7a:	d3 00       	.word	0x00d3	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ea       	ldi	r30, 0xA2	; 162
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 30       	cpi	r26, 0x0A	; 10
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  b2:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_3>:
	}
	return 0;
}

ISR(PCINT0_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	if(testBitClr(PINB, PB0)) { //Botão pressionado
  cc:	18 99       	sbic	0x03, 0	; 3
  ce:	0e c0       	rjmp	.+28     	; 0xec <__vector_3+0x32>
		TCCR1B |= (1 << CS12) | (1 << CS10); // set prescaler to 1024 and start the timer
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	85 60       	ori	r24, 0x05	; 5
  d8:	80 83       	st	Z, r24
		estouro = 0;
  da:	10 92 07 01 	sts	0x0107, r1
  de:	10 92 06 01 	sts	0x0106, r1
		saiu = 0;
  e2:	10 92 03 01 	sts	0x0103, r1
  e6:	10 92 02 01 	sts	0x0102, r1
  ea:	14 c0       	rjmp	.+40     	; 0x114 <__vector_3+0x5a>
	} else {						 //Botão solto
		TCCR1B &= 0x00;
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	10 82       	st	Z, r1
		aux = TCNT1;
  f4:	e4 e8       	ldi	r30, 0x84	; 132
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	90 93 05 01 	sts	0x0105, r25
 100:	80 93 04 01 	sts	0x0104, r24
		TCNT1 = 0;
 104:	11 82       	std	Z+1, r1	; 0x01
 106:	10 82       	st	Z, r1
		saiu = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 03 01 	sts	0x0103, r25
 110:	80 93 02 01 	sts	0x0102, r24
	}
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
	estouro = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 07 01 	sts	0x0107, r25
 13c:	80 93 06 01 	sts	0x0106, r24
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	flag_delay = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 09 01 	sts	0x0109, r25
 164:	80 93 08 01 	sts	0x0108, r24
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <decode>:

unsigned char decode(unsigned int cont)
{
	switch(cont) {
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	91 05       	cpc	r25, r1
 17a:	b8 f4       	brcc	.+46     	; 0x1aa <decode+0x34>
 17c:	fc 01       	movw	r30, r24
 17e:	ec 5c       	subi	r30, 0xCC	; 204
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	0c 94 3a 02 	jmp	0x474	; 0x474 <__tablejump2__>
	case 0:
		return 0xC0;
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	08 95       	ret
	case 1:
		return 0xF9;
	case 2:
		return 0XA4;
 18a:	84 ea       	ldi	r24, 0xA4	; 164
 18c:	08 95       	ret
	case 3:
		return 0XB0;
 18e:	80 eb       	ldi	r24, 0xB0	; 176
 190:	08 95       	ret
	case 4:
		return 0X99;
 192:	89 e9       	ldi	r24, 0x99	; 153
 194:	08 95       	ret
	case 5:
		return 0X92;
 196:	82 e9       	ldi	r24, 0x92	; 146
 198:	08 95       	ret
	case 6:
		return 0X83;
 19a:	83 e8       	ldi	r24, 0x83	; 131
 19c:	08 95       	ret
	case 7:
		return 0XF8;
 19e:	88 ef       	ldi	r24, 0xF8	; 248
 1a0:	08 95       	ret
	case 8:
		return 0X80;
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	08 95       	ret
	case 9:
		return 0X98;
 1a6:	88 e9       	ldi	r24, 0x98	; 152
 1a8:	08 95       	ret
	default:
		return 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
{
	switch(cont) {
	case 0:
		return 0xC0;
	case 1:
		return 0xF9;
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
		return 0X98;
	default:
		return 0;

	}
}
 1b0:	08 95       	ret

000001b2 <main>:
volatile unsigned int saiu = 0;

unsigned char decode(unsigned int cont);

int main(void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <main+0x6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <main+0x8>
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char segments[4];
	unsigned int i = 0;

	// Display configuration
	DDRD = 0xFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x0F;
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F;
 1c6:	88 b9       	out	0x08, r24	; 8

	// PCINT configuration
	setBit(PORTB, PB0);
 1c8:	28 9a       	sbi	0x05, 0	; 5
	setBit(PCICR, PCIE0);
 1ca:	e8 e6       	ldi	r30, 0x68	; 104
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
	setBit(PCMSK0, PCINT0);
 1d4:	eb e6       	ldi	r30, 0x6B	; 107
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24

	//Timer
	OCR1A = 31249;
 1de:	81 e1       	ldi	r24, 0x11	; 17
 1e0:	9a e7       	ldi	r25, 0x7A	; 122
 1e2:	90 93 89 00 	sts	0x0089, r25
 1e6:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (1 << WGM12);  // Mode 4, CTC on OCR1A
 1ea:	e1 e8       	ldi	r30, 0x81	; 129
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); //Set interrupt on compare match, com o prescaler e 1024 contara 2s
 1f4:	ef e6       	ldi	r30, 0x6F	; 111
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24

	//delay
	TCCR0A |= (1 << WGM01);     // Set the Timer Mode to CTC
 1fe:	84 b5       	in	r24, 0x24	; 36
 200:	82 60       	ori	r24, 0x02	; 2
 202:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;               // Set the value that you want to count to
 204:	89 ef       	ldi	r24, 0xF9	; 249
 206:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
 208:	ee e6       	ldi	r30, 0x6E	; 110
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24

	sei();         //enable interrupts
 212:	78 94       	sei

	TCCR0B |= (1 << CS02);      // set prescaler to 256 and start the timer
 214:	85 b5       	in	r24, 0x25	; 37
 216:	84 60       	ori	r24, 0x04	; 4
 218:	85 bd       	out	0x25, r24	; 37
unsigned char decode(unsigned int cont);

int main(void)
{
	unsigned char segments[4];
	unsigned int i = 0;
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	10 e0       	ldi	r17, 0x00	; 0
		if(flag_delay) {
			flag_delay = 0;
			if(i > 3) {
				i = 0;
			}
			PORTC = 0x0F;
 21e:	0f 2e       	mov	r0, r31
 220:	ff e0       	ldi	r31, 0x0F	; 15
 222:	df 2e       	mov	r13, r31
 224:	f0 2d       	mov	r31, r0
			PORTD = segments[i];
			clrBit(PORTC, (PC0 + i));
 226:	ee 24       	eor	r14, r14
 228:	e3 94       	inc	r14
 22a:	f1 2c       	mov	r15, r1
	sei();         //enable interrupts

	TCCR0B |= (1 << CS02);      // set prescaler to 256 and start the timer

	while(1) {
		if(saiu == 1) {
 22c:	80 91 02 01 	lds	r24, 0x0102
 230:	90 91 03 01 	lds	r25, 0x0103
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	d1 f5       	brne	.+116    	; 0x2ac <main+0xfa>

			if((estouro == 0) && (aux <= 7813)) {
 238:	80 91 06 01 	lds	r24, 0x0106
 23c:	90 91 07 01 	lds	r25, 0x0107
 240:	89 2b       	or	r24, r25
 242:	81 f4       	brne	.+32     	; 0x264 <main+0xb2>
 244:	80 91 04 01 	lds	r24, 0x0104
 248:	90 91 05 01 	lds	r25, 0x0105
 24c:	86 38       	cpi	r24, 0x86	; 134
 24e:	9e 41       	sbci	r25, 0x1E	; 30
 250:	48 f4       	brcc	.+18     	; 0x264 <main+0xb2>
				number++;
 252:	80 91 00 01 	lds	r24, 0x0100
 256:	90 91 01 01 	lds	r25, 0x0101
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	90 93 01 01 	sts	0x0101, r25
 260:	80 93 00 01 	sts	0x0100, r24
			}
			if((estouro == 0) && (aux >= 7813)) {
 264:	80 91 06 01 	lds	r24, 0x0106
 268:	90 91 07 01 	lds	r25, 0x0107
 26c:	89 2b       	or	r24, r25
 26e:	81 f4       	brne	.+32     	; 0x290 <main+0xde>
 270:	80 91 04 01 	lds	r24, 0x0104
 274:	90 91 05 01 	lds	r25, 0x0105
 278:	85 38       	cpi	r24, 0x85	; 133
 27a:	9e 41       	sbci	r25, 0x1E	; 30
 27c:	48 f0       	brcs	.+18     	; 0x290 <main+0xde>
				number += 10;
 27e:	80 91 00 01 	lds	r24, 0x0100
 282:	90 91 01 01 	lds	r25, 0x0101
 286:	0a 96       	adiw	r24, 0x0a	; 10
 288:	90 93 01 01 	sts	0x0101, r25
 28c:	80 93 00 01 	sts	0x0100, r24
			}
			if(estouro == 1) {
 290:	80 91 06 01 	lds	r24, 0x0106
 294:	90 91 07 01 	lds	r25, 0x0107
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	21 f4       	brne	.+8      	; 0x2a4 <main+0xf2>
				number = 0;
 29c:	10 92 01 01 	sts	0x0101, r1
 2a0:	10 92 00 01 	sts	0x0100, r1
			}
			saiu = 0;
 2a4:	10 92 03 01 	sts	0x0103, r1
 2a8:	10 92 02 01 	sts	0x0102, r1
		}
		segments[0] = decode(number % 10);
 2ac:	40 91 00 01 	lds	r20, 0x0100
 2b0:	50 91 01 01 	lds	r21, 0x0101
 2b4:	9a 01       	movw	r18, r20
 2b6:	ad ec       	ldi	r26, 0xCD	; 205
 2b8:	bc ec       	ldi	r27, 0xCC	; 204
 2ba:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	9c 01       	movw	r18, r24
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	82 0f       	add	r24, r18
 2de:	93 1f       	adc	r25, r19
 2e0:	9a 01       	movw	r18, r20
 2e2:	28 1b       	sub	r18, r24
 2e4:	39 0b       	sbc	r19, r25
 2e6:	c9 01       	movw	r24, r18
 2e8:	0e 94 bb 00 	call	0x176	; 0x176 <decode>
 2ec:	c8 2e       	mov	r12, r24
		segments[1] = decode((number / 10) % 10);
 2ee:	20 91 00 01 	lds	r18, 0x0100
 2f2:	30 91 01 01 	lds	r19, 0x0101
 2f6:	ad ec       	ldi	r26, 0xCD	; 205
 2f8:	bc ec       	ldi	r27, 0xCC	; 204
 2fa:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 2fe:	ac 01       	movw	r20, r24
 300:	56 95       	lsr	r21
 302:	47 95       	ror	r20
 304:	56 95       	lsr	r21
 306:	47 95       	ror	r20
 308:	56 95       	lsr	r21
 30a:	47 95       	ror	r20
 30c:	9a 01       	movw	r18, r20
 30e:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	9c 01       	movw	r18, r24
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	82 0f       	add	r24, r18
 332:	93 1f       	adc	r25, r19
 334:	9a 01       	movw	r18, r20
 336:	28 1b       	sub	r18, r24
 338:	39 0b       	sbc	r19, r25
 33a:	c9 01       	movw	r24, r18
 33c:	0e 94 bb 00 	call	0x176	; 0x176 <decode>
 340:	b8 2e       	mov	r11, r24
		segments[2] = decode((number / 100) % 10);
 342:	20 91 00 01 	lds	r18, 0x0100
 346:	30 91 01 01 	lds	r19, 0x0101
 34a:	36 95       	lsr	r19
 34c:	27 95       	ror	r18
 34e:	36 95       	lsr	r19
 350:	27 95       	ror	r18
 352:	ab e7       	ldi	r26, 0x7B	; 123
 354:	b4 e1       	ldi	r27, 0x14	; 20
 356:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 35a:	ac 01       	movw	r20, r24
 35c:	56 95       	lsr	r21
 35e:	47 95       	ror	r20
 360:	9a 01       	movw	r18, r20
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 36a:	9c 01       	movw	r18, r24
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	36 95       	lsr	r19
 376:	27 95       	ror	r18
 378:	c9 01       	movw	r24, r18
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	28 0f       	add	r18, r24
 38c:	39 1f       	adc	r19, r25
 38e:	ca 01       	movw	r24, r20
 390:	82 1b       	sub	r24, r18
 392:	93 0b       	sbc	r25, r19
 394:	0e 94 bb 00 	call	0x176	; 0x176 <decode>
 398:	a8 2e       	mov	r10, r24
		segments[3] = decode((number / 1000) % 10);
 39a:	20 91 00 01 	lds	r18, 0x0100
 39e:	30 91 01 01 	lds	r19, 0x0101
 3a2:	36 95       	lsr	r19
 3a4:	27 95       	ror	r18
 3a6:	36 95       	lsr	r19
 3a8:	27 95       	ror	r18
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	a5 ec       	ldi	r26, 0xC5	; 197
 3b0:	b0 e2       	ldi	r27, 0x20	; 32
 3b2:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 3b6:	ac 01       	movw	r20, r24
 3b8:	52 95       	swap	r21
 3ba:	42 95       	swap	r20
 3bc:	4f 70       	andi	r20, 0x0F	; 15
 3be:	45 27       	eor	r20, r21
 3c0:	5f 70       	andi	r21, 0x0F	; 15
 3c2:	45 27       	eor	r20, r21
 3c4:	9a 01       	movw	r18, r20
 3c6:	ad ec       	ldi	r26, 0xCD	; 205
 3c8:	bc ec       	ldi	r27, 0xCC	; 204
 3ca:	0e 94 40 02 	call	0x480	; 0x480 <__umulhisi3>
 3ce:	9c 01       	movw	r18, r24
 3d0:	36 95       	lsr	r19
 3d2:	27 95       	ror	r18
 3d4:	36 95       	lsr	r19
 3d6:	27 95       	ror	r18
 3d8:	36 95       	lsr	r19
 3da:	27 95       	ror	r18
 3dc:	c9 01       	movw	r24, r18
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	28 0f       	add	r18, r24
 3f0:	39 1f       	adc	r19, r25
 3f2:	ca 01       	movw	r24, r20
 3f4:	82 1b       	sub	r24, r18
 3f6:	93 0b       	sbc	r25, r19
 3f8:	0e 94 bb 00 	call	0x176	; 0x176 <decode>

		////////////////////////////////////////////////////////////////////////////////
		// Realce de código  estouro cíclico do contador //////////////////////////////
		////////////////////////////////////////////////////////////////////////////////
		if(number > 10000) {
 3fc:	20 91 00 01 	lds	r18, 0x0100
 400:	30 91 01 01 	lds	r19, 0x0101
 404:	21 31       	cpi	r18, 0x11	; 17
 406:	37 42       	sbci	r19, 0x27	; 39
 408:	50 f0       	brcs	.+20     	; 0x41e <main+0x26c>
			number -= 10000;
 40a:	20 91 00 01 	lds	r18, 0x0100
 40e:	30 91 01 01 	lds	r19, 0x0101
 412:	20 51       	subi	r18, 0x10	; 16
 414:	37 42       	sbci	r19, 0x27	; 39
 416:	30 93 01 01 	sts	0x0101, r19
 41a:	20 93 00 01 	sts	0x0100, r18
		////////////////////////////////////////////////////////////////////////////////
		// Fim do Realce ///////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////


		if(flag_delay) {
 41e:	20 91 08 01 	lds	r18, 0x0108
 422:	30 91 09 01 	lds	r19, 0x0109
 426:	23 2b       	or	r18, r19
 428:	09 f4       	brne	.+2      	; 0x42c <main+0x27a>
 42a:	00 cf       	rjmp	.-512    	; 0x22c <main+0x7a>
 42c:	c9 82       	std	Y+1, r12	; 0x01
 42e:	ba 82       	std	Y+2, r11	; 0x02
 430:	ab 82       	std	Y+3, r10	; 0x03
 432:	8c 83       	std	Y+4, r24	; 0x04
			flag_delay = 0;
 434:	10 92 09 01 	sts	0x0109, r1
 438:	10 92 08 01 	sts	0x0108, r1
			if(i > 3) {
 43c:	04 30       	cpi	r16, 0x04	; 4
 43e:	11 05       	cpc	r17, r1
 440:	10 f0       	brcs	.+4      	; 0x446 <main+0x294>
				i = 0;
 442:	00 e0       	ldi	r16, 0x00	; 0
 444:	10 e0       	ldi	r17, 0x00	; 0
			}
			PORTC = 0x0F;
 446:	d8 b8       	out	0x08, r13	; 8
			PORTD = segments[i];
 448:	e1 e0       	ldi	r30, 0x01	; 1
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ec 0f       	add	r30, r28
 44e:	fd 1f       	adc	r31, r29
 450:	e0 0f       	add	r30, r16
 452:	f1 1f       	adc	r31, r17
 454:	80 81       	ld	r24, Z
 456:	8b b9       	out	0x0b, r24	; 11
			clrBit(PORTC, (PC0 + i));
 458:	28 b1       	in	r18, 0x08	; 8
 45a:	c7 01       	movw	r24, r14
 45c:	00 2e       	mov	r0, r16
 45e:	02 c0       	rjmp	.+4      	; 0x464 <main+0x2b2>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <main+0x2ae>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	88 b9       	out	0x08, r24	; 8
			i++;
 46e:	0f 5f       	subi	r16, 0xFF	; 255
 470:	1f 4f       	sbci	r17, 0xFF	; 255
 472:	dc ce       	rjmp	.-584    	; 0x22c <main+0x7a>

00000474 <__tablejump2__>:
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31

00000478 <__tablejump__>:
 478:	05 90       	lpm	r0, Z+
 47a:	f4 91       	lpm	r31, Z
 47c:	e0 2d       	mov	r30, r0
 47e:	09 94       	ijmp

00000480 <__umulhisi3>:
 480:	a2 9f       	mul	r26, r18
 482:	b0 01       	movw	r22, r0
 484:	b3 9f       	mul	r27, r19
 486:	c0 01       	movw	r24, r0
 488:	a3 9f       	mul	r26, r19
 48a:	70 0d       	add	r23, r0
 48c:	81 1d       	adc	r24, r1
 48e:	11 24       	eor	r1, r1
 490:	91 1d       	adc	r25, r1
 492:	b2 9f       	mul	r27, r18
 494:	70 0d       	add	r23, r0
 496:	81 1d       	adc	r24, r1
 498:	11 24       	eor	r1, r1
 49a:	91 1d       	adc	r25, r1
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
